if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2411";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__17514__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__17514 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__17514__delegate.call(this, args);
    };
    G__17514.cljs$lang$maxFixedArity = 0;
    G__17514.cljs$lang$applyTo = function(arglist__17515) {
      var args = cljs.core.seq(arglist__17515);
      return G__17514__delegate(args);
    };
    G__17514.cljs$core$IFn$_invoke$arity$variadic = G__17514__delegate;
    return G__17514;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3749__auto__ = ty;
    if (cljs.core.truth_(and__3749__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3749__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4643__auto___17516 = len;
  var i_17517 = 0;
  while (true) {
    if (i_17517 < n__4643__auto___17516) {
      new_arr[i_17517] = arr[i_17517];
      var G__17518 = i_17517 + 1;
      i_17517 = G__17518;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__17519__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__17519 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17519__delegate.call(this, array, i, idxs);
    };
    G__17519.cljs$lang$maxFixedArity = 2;
    G__17519.cljs$lang$applyTo = function(arglist__17520) {
      var array = cljs.core.first(arglist__17520);
      arglist__17520 = cljs.core.next(arglist__17520);
      var i = cljs.core.first(arglist__17520);
      var idxs = cljs.core.rest(arglist__17520);
      return G__17519__delegate(array, i, idxs);
    };
    G__17519.cljs$core$IFn$_invoke$arity$variadic = G__17519__delegate;
    return G__17519;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__17521__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__17521 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17521__delegate.call(this, array, idx, idx2, idxv);
    };
    G__17521.cljs$lang$maxFixedArity = 3;
    G__17521.cljs$lang$applyTo = function(arglist__17522) {
      var array = cljs.core.first(arglist__17522);
      arglist__17522 = cljs.core.next(arglist__17522);
      var idx = cljs.core.first(arglist__17522);
      arglist__17522 = cljs.core.next(arglist__17522);
      var idx2 = cljs.core.first(arglist__17522);
      var idxv = cljs.core.rest(arglist__17522);
      return G__17521__delegate(array, idx, idx2, idxv);
    };
    G__17521.cljs$core$IFn$_invoke$arity$variadic = G__17521__delegate;
    return G__17521;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.js_invoke = function() {
  var js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.call(null, args));
  };
  var js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return js_invoke__delegate.call(this, obj, s, args);
  };
  js_invoke.cljs$lang$maxFixedArity = 2;
  js_invoke.cljs$lang$applyTo = function(arglist__17523) {
    var obj = cljs.core.first(arglist__17523);
    arglist__17523 = cljs.core.next(arglist__17523);
    var s = cljs.core.first(arglist__17523);
    var args = cljs.core.rest(arglist__17523);
    return js_invoke__delegate(obj, s, args);
  };
  js_invoke.cljs$core$IFn$_invoke$arity$variadic = js_invoke__delegate;
  return js_invoke;
}();
cljs.core.Fn = function() {
  var obj17525 = {};
  return obj17525;
}();
cljs.core.IFn = function() {
  var obj17527 = {};
  return obj17527;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = cljs.core._invoke[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._invoke["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj17529 = {};
  return obj17529;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3749__auto__ = value;
    if (and__3749__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4400__auto__ = value == null ? null : value;
    return function() {
      var or__3761__auto__ = cljs.core._clone[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._clone["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj17531 = {};
  return obj17531;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._count[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._count["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj17533 = {};
  return obj17533;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._empty[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._empty["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj17535 = {};
  return obj17535;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._conj[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._conj["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj17537 = {};
  return obj17537;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3749__auto__ = coll;
      if (and__3749__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4400__auto__ = coll == null ? null : coll;
      return function() {
        var or__3761__auto__ = cljs.core._nth[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._nth["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3749__auto__ = coll;
      if (and__3749__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4400__auto__ = coll == null ? null : coll;
      return function() {
        var or__3761__auto__ = cljs.core._nth[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._nth["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj17539 = {};
  return obj17539;
}();
cljs.core.ISeq = function() {
  var obj17541 = {};
  return obj17541;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._first[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._first["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._rest[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._rest["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj17543 = {};
  return obj17543;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._next[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._next["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj17545 = {};
  return obj17545;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3749__auto__ = o;
      if (and__3749__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4400__auto__ = o == null ? null : o;
      return function() {
        var or__3761__auto__ = cljs.core._lookup[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._lookup["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3749__auto__ = o;
      if (and__3749__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4400__auto__ = o == null ? null : o;
      return function() {
        var or__3761__auto__ = cljs.core._lookup[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._lookup["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj17547 = {};
  return obj17547;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._assoc[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._assoc["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj17549 = {};
  return obj17549;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._dissoc[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._dissoc["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj17551 = {};
  return obj17551;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._key[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._key["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._val[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._val["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj17553 = {};
  return obj17553;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._disjoin[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._disjoin["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj17555 = {};
  return obj17555;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._peek[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._peek["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._pop[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._pop["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj17557 = {};
  return obj17557;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._assoc_n[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj17559 = {};
  return obj17559;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3749__auto__ = o;
    if (and__3749__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4400__auto__ = o == null ? null : o;
    return function() {
      var or__3761__auto__ = cljs.core._deref[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._deref["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj17561 = {};
  return obj17561;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3749__auto__ = o;
    if (and__3749__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4400__auto__ = o == null ? null : o;
    return function() {
      var or__3761__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj17563 = {};
  return obj17563;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3749__auto__ = o;
    if (and__3749__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4400__auto__ = o == null ? null : o;
    return function() {
      var or__3761__auto__ = cljs.core._meta[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._meta["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj17565 = {};
  return obj17565;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3749__auto__ = o;
    if (and__3749__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4400__auto__ = o == null ? null : o;
    return function() {
      var or__3761__auto__ = cljs.core._with_meta[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._with_meta["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj17567 = {};
  return obj17567;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3749__auto__ = coll;
      if (and__3749__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4400__auto__ = coll == null ? null : coll;
      return function() {
        var or__3761__auto__ = cljs.core._reduce[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._reduce["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3749__auto__ = coll;
      if (and__3749__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4400__auto__ = coll == null ? null : coll;
      return function() {
        var or__3761__auto__ = cljs.core._reduce[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._reduce["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj17569 = {};
  return obj17569;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj17571 = {};
  return obj17571;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3749__auto__ = o;
    if (and__3749__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4400__auto__ = o == null ? null : o;
    return function() {
      var or__3761__auto__ = cljs.core._equiv[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._equiv["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj17573 = {};
  return obj17573;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3749__auto__ = o;
    if (and__3749__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4400__auto__ = o == null ? null : o;
    return function() {
      var or__3761__auto__ = cljs.core._hash[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._hash["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj17575 = {};
  return obj17575;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3749__auto__ = o;
    if (and__3749__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4400__auto__ = o == null ? null : o;
    return function() {
      var or__3761__auto__ = cljs.core._seq[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._seq["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj17577 = {};
  return obj17577;
}();
cljs.core.IList = function() {
  var obj17579 = {};
  return obj17579;
}();
cljs.core.IRecord = function() {
  var obj17581 = {};
  return obj17581;
}();
cljs.core.IReversible = function() {
  var obj17583 = {};
  return obj17583;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._rseq[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._rseq["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj17585 = {};
  return obj17585;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._entry_key[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._entry_key["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._comparator[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._comparator["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj17587 = {};
  return obj17587;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3749__auto__ = writer;
    if (and__3749__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4400__auto__ = writer == null ? null : writer;
    return function() {
      var or__3761__auto__ = cljs.core._write[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._write["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3749__auto__ = writer;
    if (and__3749__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4400__auto__ = writer == null ? null : writer;
    return function() {
      var or__3761__auto__ = cljs.core._flush[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._flush["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj17589 = {};
  return obj17589;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3749__auto__ = o;
    if (and__3749__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4400__auto__ = o == null ? null : o;
    return function() {
      var or__3761__auto__ = cljs.core._pr_writer[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj17591 = {};
  return obj17591;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3749__auto__ = d;
    if (and__3749__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4400__auto__ = d == null ? null : d;
    return function() {
      var or__3761__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj17593 = {};
  return obj17593;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3749__auto__ = this$;
    if (and__3749__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4400__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3761__auto__ = cljs.core._notify_watches[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3749__auto__ = this$;
    if (and__3749__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4400__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3761__auto__ = cljs.core._add_watch[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._add_watch["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3749__auto__ = this$;
    if (and__3749__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4400__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3761__auto__ = cljs.core._remove_watch[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj17595 = {};
  return obj17595;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._as_transient[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._as_transient["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj17597 = {};
  return obj17597;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3749__auto__ = tcoll;
    if (and__3749__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4400__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3761__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3749__auto__ = tcoll;
    if (and__3749__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4400__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3761__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj17599 = {};
  return obj17599;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3749__auto__ = tcoll;
    if (and__3749__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4400__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3761__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj17601 = {};
  return obj17601;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3749__auto__ = tcoll;
    if (and__3749__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4400__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3761__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj17603 = {};
  return obj17603;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3749__auto__ = tcoll;
    if (and__3749__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4400__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3761__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3749__auto__ = tcoll;
    if (and__3749__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4400__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3761__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj17605 = {};
  return obj17605;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3749__auto__ = tcoll;
    if (and__3749__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4400__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3761__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj17607 = {};
  return obj17607;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3749__auto__ = x;
    if (and__3749__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4400__auto__ = x == null ? null : x;
    return function() {
      var or__3761__auto__ = cljs.core._compare[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._compare["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj17609 = {};
  return obj17609;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._drop_first[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._drop_first["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj17611 = {};
  return obj17611;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._chunked_first[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj17613 = {};
  return obj17613;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._chunked_next[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj17615 = {};
  return obj17615;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3749__auto__ = x;
    if (and__3749__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4400__auto__ = x == null ? null : x;
    return function() {
      var or__3761__auto__ = cljs.core._name[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._name["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3749__auto__ = x;
    if (and__3749__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4400__auto__ = x == null ? null : x;
    return function() {
      var or__3761__auto__ = cljs.core._namespace[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._namespace["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj17617 = {};
  return obj17617;
}();
cljs.core.IReset = function() {
  var obj17619 = {};
  return obj17619;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3749__auto__ = o;
    if (and__3749__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4400__auto__ = o == null ? null : o;
    return function() {
      var or__3761__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj17621 = {};
  return obj17621;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3749__auto__ = o;
      if (and__3749__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4400__auto__ = o == null ? null : o;
      return function() {
        var or__3761__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3749__auto__ = o;
      if (and__3749__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4400__auto__ = o == null ? null : o;
      return function() {
        var or__3761__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3749__auto__ = o;
      if (and__3749__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4400__auto__ = o == null ? null : o;
      return function() {
        var or__3761__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3749__auto__ = o;
      if (and__3749__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4400__auto__ = o == null ? null : o;
      return function() {
        var or__3761__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj17623 = {};
  return obj17623;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3749__auto__ = coll;
    if (and__3749__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4400__auto__ = coll == null ? null : coll;
    return function() {
      var or__3761__auto__ = cljs.core._iterator[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._iterator["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__17624 = i + 2;
        var G__17625 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__17624;
        h1 = G__17625;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj17627 = {};
  return obj17627;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__17628 = i + 1;
          var G__17629 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__17628;
          hash = G__17629;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj17633 = {};
      return obj17633;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__17635 = o;
    if (G__17635) {
      var bit__4430__auto__ = G__17635.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4430__auto__ || G__17635.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash.call(null, o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3749__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3749__auto__) {
        return b.ns;
      } else {
        return and__3749__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4177__auto__ = self__._hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__17637 = null;
  var G__17637__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__17637__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__17637 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17637__2.call(this, self__, coll);
      case 3:
        return G__17637__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17637.cljs$core$IFn$_invoke$arity$2 = G__17637__2;
  G__17637.cljs$core$IFn$_invoke$arity$3 = G__17637__3;
  return G__17637;
}();
cljs.core.Symbol.prototype.apply = function(self__, args17636) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17636)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__17639 = x;
  if (G__17639) {
    var bit__4437__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3761__auto__ = bit__4437__auto__;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return G__17639.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__17639.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__17639);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__17639);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__17641 = value;
  if (G__17641) {
    var bit__4437__auto__ = G__17641.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4437__auto__ || G__17641.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__17641.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__17641);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__17641);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__17643 = coll;
      if (G__17643) {
        var bit__4430__auto__ = G__17643.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4430__auto__ || G__17643.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__17645 = coll;
      if (G__17645) {
        var bit__4430__auto__ = G__17645.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4430__auto__ || G__17645.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__17647 = coll;
      if (G__17647) {
        var bit__4430__auto__ = G__17647.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4430__auto__ || G__17647.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__17649 = coll;
      if (G__17649) {
        var bit__4430__auto__ = G__17649.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4430__auto__ || G__17649.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__17650__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__17651 = y;
            var G__17652 = cljs.core.first.call(null, more);
            var G__17653 = cljs.core.next.call(null, more);
            x = G__17651;
            y = G__17652;
            more = G__17653;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17650 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17650__delegate.call(this, x, y, more);
    };
    G__17650.cljs$lang$maxFixedArity = 2;
    G__17650.cljs$lang$applyTo = function(arglist__17654) {
      var x = cljs.core.first(arglist__17654);
      arglist__17654 = cljs.core.next(arglist__17654);
      var y = cljs.core.first(arglist__17654);
      var more = cljs.core.rest(arglist__17654);
      return G__17650__delegate(x, y, more);
    };
    G__17650.cljs$core$IFn$_invoke$arity$variadic = G__17650__delegate;
    return G__17650;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function __GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__17655 = n + 1;
      var G__17656 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__17657 = cljs.core.next.call(null, coll__$1);
      n = G__17655;
      hash_code = G__17656;
      coll__$1 = G__17657;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__17658 = n + 1;
      var G__17659 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__17660 = cljs.core.next.call(null, coll__$1);
      n = G__17658;
      hash_code = G__17659;
      coll__$1 = G__17660;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_.call(null, x)) {
    return x;
  } else {
    return cljs.core.reduced.call(null, x);
  }
};
cljs.core.unreduced = function unreduced(x) {
  if (cljs.core.reduced_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__17661 = nval;
            var G__17662 = n + 1;
            val = G__17661;
            n = G__17662;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17663 = nval;
          var G__17664 = n + 1;
          val__$1 = G__17663;
          n = G__17664;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17665 = nval;
          var G__17666 = n + 1;
          val__$1 = G__17665;
          n = G__17666;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__17667 = nval;
            var G__17668 = n + 1;
            val = G__17667;
            n = G__17668;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17669 = nval;
          var G__17670 = n + 1;
          val__$1 = G__17669;
          n = G__17670;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17671 = nval;
          var G__17672 = n + 1;
          val__$1 = G__17671;
          n = G__17672;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__17674 = x;
  if (G__17674) {
    var bit__4437__auto__ = G__17674.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4437__auto__ || G__17674.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__17674.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__17674);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__17674);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__17676 = x;
  if (G__17676) {
    var bit__4437__auto__ = G__17676.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4437__auto__ || G__17676.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__17676.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__17676);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__17676);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__17677 = sn;
      s = G__17677;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__17678__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__17679 = conj.call(null, coll, x);
          var G__17680 = cljs.core.first.call(null, xs);
          var G__17681 = cljs.core.next.call(null, xs);
          coll = G__17679;
          x = G__17680;
          xs = G__17681;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__17678 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17678__delegate.call(this, coll, x, xs);
    };
    G__17678.cljs$lang$maxFixedArity = 2;
    G__17678.cljs$lang$applyTo = function(arglist__17682) {
      var coll = cljs.core.first(arglist__17682);
      arglist__17682 = cljs.core.next(arglist__17682);
      var x = cljs.core.first(arglist__17682);
      var xs = cljs.core.rest(arglist__17682);
      return G__17678__delegate(coll, x, xs);
    };
    G__17678.cljs$core$IFn$_invoke$arity$variadic = G__17678__delegate;
    return G__17678;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__17683 = cljs.core.next.call(null, s);
      var G__17684 = acc + 1;
      s = G__17683;
      acc = G__17684;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__17686 = coll;
      if (G__17686) {
        var bit__4430__auto__ = G__17686.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4430__auto__ || G__17686.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__17687 = cljs.core.next.call(null, coll);
              var G__17688 = n - 1;
              coll = G__17687;
              n = G__17688;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__17689 = cljs.core.next.call(null, coll);
              var G__17690 = n - 1;
              var G__17691 = not_found;
              coll = G__17689;
              n = G__17690;
              not_found = G__17691;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__17696 = coll;
          if (G__17696) {
            var bit__4430__auto__ = G__17696.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4430__auto__ || G__17696.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__17697 = coll;
                  if (G__17697) {
                    var bit__4437__auto__ = G__17697.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4437__auto__ || G__17697.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__17697.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17697);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17697);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__17698 = coll;
          if (G__17698) {
            var bit__4430__auto__ = G__17698.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4430__auto__ || G__17698.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__17699 = coll;
                  if (G__17699) {
                    var bit__4437__auto__ = G__17699.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4437__auto__ || G__17699.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__17699.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17699);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17699);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.nthrest = function nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq.call(null, xs)) {
      var G__17700 = n__$1 - 1;
      var G__17701 = cljs.core.rest.call(null, xs);
      n__$1 = G__17700;
      xs = G__17701;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__17704 = o;
        if (G__17704) {
          var bit__4430__auto__ = G__17704.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4430__auto__ || G__17704.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__17705 = o;
        if (G__17705) {
          var bit__4430__auto__ = G__17705.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4430__auto__ || G__17705.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__17706__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__17707 = ret;
          var G__17708 = cljs.core.first.call(null, kvs);
          var G__17709 = cljs.core.second.call(null, kvs);
          var G__17710 = cljs.core.nnext.call(null, kvs);
          coll = G__17707;
          k = G__17708;
          v = G__17709;
          kvs = G__17710;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__17706 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17706__delegate.call(this, coll, k, v, kvs);
    };
    G__17706.cljs$lang$maxFixedArity = 3;
    G__17706.cljs$lang$applyTo = function(arglist__17711) {
      var coll = cljs.core.first(arglist__17711);
      arglist__17711 = cljs.core.next(arglist__17711);
      var k = cljs.core.first(arglist__17711);
      arglist__17711 = cljs.core.next(arglist__17711);
      var v = cljs.core.first(arglist__17711);
      var kvs = cljs.core.rest(arglist__17711);
      return G__17706__delegate(coll, k, v, kvs);
    };
    G__17706.cljs$core$IFn$_invoke$arity$variadic = G__17706__delegate;
    return G__17706;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__17712__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__17713 = ret;
            var G__17714 = cljs.core.first.call(null, ks);
            var G__17715 = cljs.core.next.call(null, ks);
            coll = G__17713;
            k = G__17714;
            ks = G__17715;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__17712 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17712__delegate.call(this, coll, k, ks);
    };
    G__17712.cljs$lang$maxFixedArity = 2;
    G__17712.cljs$lang$applyTo = function(arglist__17716) {
      var coll = cljs.core.first(arglist__17716);
      arglist__17716 = cljs.core.next(arglist__17716);
      var k = cljs.core.first(arglist__17716);
      var ks = cljs.core.rest(arglist__17716);
      return G__17712__delegate(coll, k, ks);
    };
    G__17712.cljs$core$IFn$_invoke$arity$variadic = G__17712__delegate;
    return G__17712;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3761__auto__ = goog.isFunction(f);
  if (or__3761__auto__) {
    return or__3761__auto__;
  } else {
    var G__17720 = f;
    if (G__17720) {
      var bit__4437__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3761__auto____$1 = bit__4437__auto__;
        if (cljs.core.truth_(or__3761__auto____$1)) {
          return or__3761__auto____$1;
        } else {
          return G__17720.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__17720.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__17720);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__17720);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__17722 = null;
  var G__17722__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__17722__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__17722__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__17722__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__17722__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__17722__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__17722__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__17722__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__17722__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__17722__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__17722__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__17722__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__17722__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__17722__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__17722__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__17722__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__17722__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__17722__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__17722__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__17722__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__17722__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__17722__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__17722 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__17722__1.call(this, self__);
      case 2:
        return G__17722__2.call(this, self__, a);
      case 3:
        return G__17722__3.call(this, self__, a, b);
      case 4:
        return G__17722__4.call(this, self__, a, b, c);
      case 5:
        return G__17722__5.call(this, self__, a, b, c, d);
      case 6:
        return G__17722__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__17722__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__17722__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__17722__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__17722__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__17722__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__17722__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__17722__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__17722__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__17722__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__17722__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__17722__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__17722__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__17722__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__17722__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__17722__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__17722__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17722.cljs$core$IFn$_invoke$arity$1 = G__17722__1;
  G__17722.cljs$core$IFn$_invoke$arity$2 = G__17722__2;
  G__17722.cljs$core$IFn$_invoke$arity$3 = G__17722__3;
  G__17722.cljs$core$IFn$_invoke$arity$4 = G__17722__4;
  G__17722.cljs$core$IFn$_invoke$arity$5 = G__17722__5;
  G__17722.cljs$core$IFn$_invoke$arity$6 = G__17722__6;
  G__17722.cljs$core$IFn$_invoke$arity$7 = G__17722__7;
  G__17722.cljs$core$IFn$_invoke$arity$8 = G__17722__8;
  G__17722.cljs$core$IFn$_invoke$arity$9 = G__17722__9;
  G__17722.cljs$core$IFn$_invoke$arity$10 = G__17722__10;
  G__17722.cljs$core$IFn$_invoke$arity$11 = G__17722__11;
  G__17722.cljs$core$IFn$_invoke$arity$12 = G__17722__12;
  G__17722.cljs$core$IFn$_invoke$arity$13 = G__17722__13;
  G__17722.cljs$core$IFn$_invoke$arity$14 = G__17722__14;
  G__17722.cljs$core$IFn$_invoke$arity$15 = G__17722__15;
  G__17722.cljs$core$IFn$_invoke$arity$16 = G__17722__16;
  G__17722.cljs$core$IFn$_invoke$arity$17 = G__17722__17;
  G__17722.cljs$core$IFn$_invoke$arity$18 = G__17722__18;
  G__17722.cljs$core$IFn$_invoke$arity$19 = G__17722__19;
  G__17722.cljs$core$IFn$_invoke$arity$20 = G__17722__20;
  G__17722.cljs$core$IFn$_invoke$arity$21 = G__17722__21;
  G__17722.cljs$core$IFn$_invoke$arity$22 = G__17722__22;
  return G__17722;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args17721) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17721)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__17726 = o;
    if (G__17726) {
      var bit__4437__auto__ = G__17726.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4437__auto__ || G__17726.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__17726.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__17726);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__17726);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3749__auto__ = !(o == null);
    if (and__3749__auto__) {
      var G__17730 = o;
      if (G__17730) {
        var bit__4437__auto__ = G__17730.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4437__auto__ || G__17730.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__17730.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__17730);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__17730);
      }
    } else {
      return and__3749__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__17731__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__17732 = ret;
            var G__17733 = cljs.core.first.call(null, ks);
            var G__17734 = cljs.core.next.call(null, ks);
            coll = G__17732;
            k = G__17733;
            ks = G__17734;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__17731 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17731__delegate.call(this, coll, k, ks);
    };
    G__17731.cljs$lang$maxFixedArity = 2;
    G__17731.cljs$lang$applyTo = function(arglist__17735) {
      var coll = cljs.core.first(arglist__17735);
      arglist__17735 = cljs.core.next(arglist__17735);
      var k = cljs.core.first(arglist__17735);
      var ks = cljs.core.rest(arglist__17735);
      return G__17731__delegate(coll, k, ks);
    };
    G__17731.cljs$core$IFn$_invoke$arity$variadic = G__17731__delegate;
    return G__17731;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17737 = x;
    if (G__17737) {
      var bit__4437__auto__ = G__17737.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4437__auto__ || G__17737.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__17737.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__17737);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__17737);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17739 = x;
    if (G__17739) {
      var bit__4437__auto__ = G__17739.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4437__auto__ || G__17739.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__17739.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__17739);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__17739);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__17741 = x;
  if (G__17741) {
    var bit__4437__auto__ = G__17741.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4437__auto__ || G__17741.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__17741.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__17741);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__17741);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__17743 = x;
  if (G__17743) {
    var bit__4437__auto__ = G__17743.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4437__auto__ || G__17743.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__17743.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__17743);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__17743);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__17745 = x;
  if (G__17745) {
    var bit__4437__auto__ = G__17745.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4437__auto__ || G__17745.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__17745.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__17745);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__17745);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__17747 = x;
  if (G__17747) {
    var bit__4437__auto__ = G__17747.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4437__auto__ || G__17747.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__17747.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__17747);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__17747);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17749 = x;
    if (G__17749) {
      var bit__4437__auto__ = G__17749.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4437__auto__ || G__17749.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__17749.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__17749);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__17749);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__17751 = x;
  if (G__17751) {
    var bit__4437__auto__ = G__17751.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4437__auto__ || G__17751.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__17751.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__17751);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__17751);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__17753 = x;
  if (G__17753) {
    var bit__4430__auto__ = G__17753.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4430__auto__ || G__17753.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj17757 = {};
    return obj17757;
  };
  var js_obj__1 = function() {
    var G__17758__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__17758 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__17758__delegate.call(this, keyvals);
    };
    G__17758.cljs$lang$maxFixedArity = 0;
    G__17758.cljs$lang$applyTo = function(arglist__17759) {
      var keyvals = cljs.core.seq(arglist__17759);
      return G__17758__delegate(keyvals);
    };
    G__17758.cljs$core$IFn$_invoke$arity$variadic = G__17758__delegate;
    return G__17758;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__17760 = i__$1 + 1;
      var G__17761 = j__$1 + 1;
      var G__17762 = len__$1 - 1;
      i__$1 = G__17760;
      j__$1 = G__17761;
      len__$1 = G__17762;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__17763 = i__$1 - 1;
      var G__17764 = j__$1 - 1;
      var G__17765 = len__$1 - 1;
      i__$1 = G__17763;
      j__$1 = G__17764;
      len__$1 = G__17765;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj17767 = {};
  return obj17767;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__17769 = s;
    if (G__17769) {
      var bit__4437__auto__ = G__17769.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4437__auto__ || G__17769.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__17769.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17769);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17769);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__17771 = s;
  if (G__17771) {
    var bit__4437__auto__ = G__17771.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4437__auto__ || G__17771.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__17771.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__17771);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__17771);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3761__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3761__auto__) {
    return or__3761__auto__;
  } else {
    var G__17775 = f;
    if (G__17775) {
      var bit__4437__auto__ = G__17775.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4437__auto__ || G__17775.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__17775.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__17775);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__17775);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__17776__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__17777 = cljs.core.conj.call(null, s, x__$1);
              var G__17778 = etc;
              s = G__17777;
              xs = G__17778;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__17776 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17776__delegate.call(this, x, y, more);
    };
    G__17776.cljs$lang$maxFixedArity = 2;
    G__17776.cljs$lang$applyTo = function(arglist__17779) {
      var x = cljs.core.first(arglist__17779);
      arglist__17779 = cljs.core.next(arglist__17779);
      var y = cljs.core.first(arglist__17779);
      var more = cljs.core.rest(arglist__17779);
      return G__17776__delegate(x, y, more);
    };
    G__17776.cljs$core$IFn$_invoke$arity$variadic = G__17776__delegate;
    return G__17776;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3761__auto__ = cljs.core.seq.call(null, coll);
    if (or__3761__auto__) {
      return or__3761__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__17781 = x;
            if (G__17781) {
              var bit__4430__auto__ = G__17781.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4430__auto__ || G__17781.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__17782 = xs;
        var G__17783 = ys;
        var G__17784 = len;
        var G__17785 = n + 1;
        xs = G__17782;
        ys = G__17783;
        len = G__17784;
        n = G__17785;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17786 = nval;
          var G__17787 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__17786;
          coll__$1 = G__17787;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__17790 = coll;
      if (G__17790) {
        var bit__4430__auto__ = G__17790.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4430__auto__ || G__17790.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__17791 = coll;
      if (G__17791) {
        var bit__4430__auto__ = G__17791.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4430__auto__ || G__17791.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__17792 = null;
      var G__17792__0 = function() {
        return f.call(null);
      };
      var G__17792__1 = function(x) {
        return cf.call(null, x);
      };
      var G__17792__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__17792 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__17792__0.call(this);
          case 1:
            return G__17792__1.call(this, x);
          case 2:
            return G__17792__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17792.cljs$core$IFn$_invoke$arity$0 = G__17792__0;
      G__17792.cljs$core$IFn$_invoke$arity$1 = G__17792__1;
      G__17792.cljs$core$IFn$_invoke$arity$2 = G__17792__2;
      return G__17792;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__17793__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__17793 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17793__delegate.call(this, x, y, more);
    };
    G__17793.cljs$lang$maxFixedArity = 2;
    G__17793.cljs$lang$applyTo = function(arglist__17794) {
      var x = cljs.core.first(arglist__17794);
      arglist__17794 = cljs.core.next(arglist__17794);
      var y = cljs.core.first(arglist__17794);
      var more = cljs.core.rest(arglist__17794);
      return G__17793__delegate(x, y, more);
    };
    G__17793.cljs$core$IFn$_invoke$arity$variadic = G__17793__delegate;
    return G__17793;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__17795__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__17795 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17795__delegate.call(this, x, y, more);
    };
    G__17795.cljs$lang$maxFixedArity = 2;
    G__17795.cljs$lang$applyTo = function(arglist__17796) {
      var x = cljs.core.first(arglist__17796);
      arglist__17796 = cljs.core.next(arglist__17796);
      var y = cljs.core.first(arglist__17796);
      var more = cljs.core.rest(arglist__17796);
      return G__17795__delegate(x, y, more);
    };
    G__17795.cljs$core$IFn$_invoke$arity$variadic = G__17795__delegate;
    return G__17795;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__17797__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__17797 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17797__delegate.call(this, x, y, more);
    };
    G__17797.cljs$lang$maxFixedArity = 2;
    G__17797.cljs$lang$applyTo = function(arglist__17798) {
      var x = cljs.core.first(arglist__17798);
      arglist__17798 = cljs.core.next(arglist__17798);
      var y = cljs.core.first(arglist__17798);
      var more = cljs.core.rest(arglist__17798);
      return G__17797__delegate(x, y, more);
    };
    G__17797.cljs$core$IFn$_invoke$arity$variadic = G__17797__delegate;
    return G__17797;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__17799__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__17799 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17799__delegate.call(this, x, y, more);
    };
    G__17799.cljs$lang$maxFixedArity = 2;
    G__17799.cljs$lang$applyTo = function(arglist__17800) {
      var x = cljs.core.first(arglist__17800);
      arglist__17800 = cljs.core.next(arglist__17800);
      var y = cljs.core.first(arglist__17800);
      var more = cljs.core.rest(arglist__17800);
      return G__17799__delegate(x, y, more);
    };
    G__17799.cljs$core$IFn$_invoke$arity$variadic = G__17799__delegate;
    return G__17799;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__17801__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__17802 = y;
            var G__17803 = cljs.core.first.call(null, more);
            var G__17804 = cljs.core.next.call(null, more);
            x = G__17802;
            y = G__17803;
            more = G__17804;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17801 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17801__delegate.call(this, x, y, more);
    };
    G__17801.cljs$lang$maxFixedArity = 2;
    G__17801.cljs$lang$applyTo = function(arglist__17805) {
      var x = cljs.core.first(arglist__17805);
      arglist__17805 = cljs.core.next(arglist__17805);
      var y = cljs.core.first(arglist__17805);
      var more = cljs.core.rest(arglist__17805);
      return G__17801__delegate(x, y, more);
    };
    G__17801.cljs$core$IFn$_invoke$arity$variadic = G__17801__delegate;
    return G__17801;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__17806__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__17807 = y;
            var G__17808 = cljs.core.first.call(null, more);
            var G__17809 = cljs.core.next.call(null, more);
            x = G__17807;
            y = G__17808;
            more = G__17809;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17806 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17806__delegate.call(this, x, y, more);
    };
    G__17806.cljs$lang$maxFixedArity = 2;
    G__17806.cljs$lang$applyTo = function(arglist__17810) {
      var x = cljs.core.first(arglist__17810);
      arglist__17810 = cljs.core.next(arglist__17810);
      var y = cljs.core.first(arglist__17810);
      var more = cljs.core.rest(arglist__17810);
      return G__17806__delegate(x, y, more);
    };
    G__17806.cljs$core$IFn$_invoke$arity$variadic = G__17806__delegate;
    return G__17806;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__17811__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__17812 = y;
            var G__17813 = cljs.core.first.call(null, more);
            var G__17814 = cljs.core.next.call(null, more);
            x = G__17812;
            y = G__17813;
            more = G__17814;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17811 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17811__delegate.call(this, x, y, more);
    };
    G__17811.cljs$lang$maxFixedArity = 2;
    G__17811.cljs$lang$applyTo = function(arglist__17815) {
      var x = cljs.core.first(arglist__17815);
      arglist__17815 = cljs.core.next(arglist__17815);
      var y = cljs.core.first(arglist__17815);
      var more = cljs.core.rest(arglist__17815);
      return G__17811__delegate(x, y, more);
    };
    G__17811.cljs$core$IFn$_invoke$arity$variadic = G__17811__delegate;
    return G__17811;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__17816__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__17817 = y;
            var G__17818 = cljs.core.first.call(null, more);
            var G__17819 = cljs.core.next.call(null, more);
            x = G__17817;
            y = G__17818;
            more = G__17819;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17816 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17816__delegate.call(this, x, y, more);
    };
    G__17816.cljs$lang$maxFixedArity = 2;
    G__17816.cljs$lang$applyTo = function(arglist__17820) {
      var x = cljs.core.first(arglist__17820);
      arglist__17820 = cljs.core.next(arglist__17820);
      var y = cljs.core.first(arglist__17820);
      var more = cljs.core.rest(arglist__17820);
      return G__17816__delegate(x, y, more);
    };
    G__17816.cljs$core$IFn$_invoke$arity$variadic = G__17816__delegate;
    return G__17816;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__4073__auto__ = x;
    var y__4074__auto__ = y;
    return x__4073__auto__ > y__4074__auto__ ? x__4073__auto__ : y__4074__auto__;
  };
  var max__3 = function() {
    var G__17821__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__4073__auto__ = x;
        var y__4074__auto__ = y;
        return x__4073__auto__ > y__4074__auto__ ? x__4073__auto__ : y__4074__auto__;
      }(), more);
    };
    var G__17821 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17821__delegate.call(this, x, y, more);
    };
    G__17821.cljs$lang$maxFixedArity = 2;
    G__17821.cljs$lang$applyTo = function(arglist__17822) {
      var x = cljs.core.first(arglist__17822);
      arglist__17822 = cljs.core.next(arglist__17822);
      var y = cljs.core.first(arglist__17822);
      var more = cljs.core.rest(arglist__17822);
      return G__17821__delegate(x, y, more);
    };
    G__17821.cljs$core$IFn$_invoke$arity$variadic = G__17821__delegate;
    return G__17821;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__4080__auto__ = x;
    var y__4081__auto__ = y;
    return x__4080__auto__ < y__4081__auto__ ? x__4080__auto__ : y__4081__auto__;
  };
  var min__3 = function() {
    var G__17823__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__4080__auto__ = x;
        var y__4081__auto__ = y;
        return x__4080__auto__ < y__4081__auto__ ? x__4080__auto__ : y__4081__auto__;
      }(), more);
    };
    var G__17823 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17823__delegate.call(this, x, y, more);
    };
    G__17823.cljs$lang$maxFixedArity = 2;
    G__17823.cljs$lang$applyTo = function(arglist__17824) {
      var x = cljs.core.first(arglist__17824);
      arglist__17824 = cljs.core.next(arglist__17824);
      var y = cljs.core.first(arglist__17824);
      var more = cljs.core.rest(arglist__17824);
      return G__17823__delegate(x, y, more);
    };
    G__17823.cljs$core$IFn$_invoke$arity$variadic = G__17823__delegate;
    return G__17823;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__17825__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__17825 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17825__delegate.call(this, x, y, more);
    };
    G__17825.cljs$lang$maxFixedArity = 2;
    G__17825.cljs$lang$applyTo = function(arglist__17826) {
      var x = cljs.core.first(arglist__17826);
      arglist__17826 = cljs.core.next(arglist__17826);
      var y = cljs.core.first(arglist__17826);
      var more = cljs.core.rest(arglist__17826);
      return G__17825__delegate(x, y, more);
    };
    G__17825.cljs$core$IFn$_invoke$arity$variadic = G__17825__delegate;
    return G__17825;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__17827__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__17827 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17827__delegate.call(this, x, y, more);
    };
    G__17827.cljs$lang$maxFixedArity = 2;
    G__17827.cljs$lang$applyTo = function(arglist__17828) {
      var x = cljs.core.first(arglist__17828);
      arglist__17828 = cljs.core.next(arglist__17828);
      var y = cljs.core.first(arglist__17828);
      var more = cljs.core.rest(arglist__17828);
      return G__17827__delegate(x, y, more);
    };
    G__17827.cljs$core$IFn$_invoke$arity$variadic = G__17827__delegate;
    return G__17827;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__17829__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__17829 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17829__delegate.call(this, x, y, more);
    };
    G__17829.cljs$lang$maxFixedArity = 2;
    G__17829.cljs$lang$applyTo = function(arglist__17830) {
      var x = cljs.core.first(arglist__17830);
      arglist__17830 = cljs.core.next(arglist__17830);
      var y = cljs.core.first(arglist__17830);
      var more = cljs.core.rest(arglist__17830);
      return G__17829__delegate(x, y, more);
    };
    G__17829.cljs$core$IFn$_invoke$arity$variadic = G__17829__delegate;
    return G__17829;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__17831__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__17831 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17831__delegate.call(this, x, y, more);
    };
    G__17831.cljs$lang$maxFixedArity = 2;
    G__17831.cljs$lang$applyTo = function(arglist__17832) {
      var x = cljs.core.first(arglist__17832);
      arglist__17832 = cljs.core.next(arglist__17832);
      var y = cljs.core.first(arglist__17832);
      var more = cljs.core.rest(arglist__17832);
      return G__17831__delegate(x, y, more);
    };
    G__17831.cljs$core$IFn$_invoke$arity$variadic = G__17831__delegate;
    return G__17831;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__17833__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__17833 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17833__delegate.call(this, x, y, more);
    };
    G__17833.cljs$lang$maxFixedArity = 2;
    G__17833.cljs$lang$applyTo = function(arglist__17834) {
      var x = cljs.core.first(arglist__17834);
      arglist__17834 = cljs.core.next(arglist__17834);
      var y = cljs.core.first(arglist__17834);
      var more = cljs.core.rest(arglist__17834);
      return G__17833__delegate(x, y, more);
    };
    G__17833.cljs$core$IFn$_invoke$arity$variadic = G__17833__delegate;
    return G__17833;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__17835__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__17835 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17835__delegate.call(this, x, y, more);
    };
    G__17835.cljs$lang$maxFixedArity = 2;
    G__17835.cljs$lang$applyTo = function(arglist__17836) {
      var x = cljs.core.first(arglist__17836);
      arglist__17836 = cljs.core.next(arglist__17836);
      var y = cljs.core.first(arglist__17836);
      var more = cljs.core.rest(arglist__17836);
      return G__17835__delegate(x, y, more);
    };
    G__17835.cljs$core$IFn$_invoke$arity$variadic = G__17835__delegate;
    return G__17835;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__17837__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__17837 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17837__delegate.call(this, x, y, more);
    };
    G__17837.cljs$lang$maxFixedArity = 2;
    G__17837.cljs$lang$applyTo = function(arglist__17838) {
      var x = cljs.core.first(arglist__17838);
      arglist__17838 = cljs.core.next(arglist__17838);
      var y = cljs.core.first(arglist__17838);
      var more = cljs.core.rest(arglist__17838);
      return G__17837__delegate(x, y, more);
    };
    G__17837.cljs$core$IFn$_invoke$arity$variadic = G__17837__delegate;
    return G__17837;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__17839__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__17840 = y;
            var G__17841 = cljs.core.first.call(null, more);
            var G__17842 = cljs.core.next.call(null, more);
            x = G__17840;
            y = G__17841;
            more = G__17842;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17839 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17839__delegate.call(this, x, y, more);
    };
    G__17839.cljs$lang$maxFixedArity = 2;
    G__17839.cljs$lang$applyTo = function(arglist__17843) {
      var x = cljs.core.first(arglist__17843);
      arglist__17843 = cljs.core.next(arglist__17843);
      var y = cljs.core.first(arglist__17843);
      var more = cljs.core.rest(arglist__17843);
      return G__17839__delegate(x, y, more);
    };
    G__17839.cljs$core$IFn$_invoke$arity$variadic = G__17839__delegate;
    return G__17839;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__17844 = n__$1 - 1;
      var G__17845 = cljs.core.next.call(null, xs);
      n__$1 = G__17844;
      xs = G__17845;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__17846__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__17847 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__17848 = cljs.core.next.call(null, more);
          sb = G__17847;
          more = G__17848;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__17846 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17846__delegate.call(this, x, ys);
    };
    G__17846.cljs$lang$maxFixedArity = 1;
    G__17846.cljs$lang$applyTo = function(arglist__17849) {
      var x = cljs.core.first(arglist__17849);
      var ys = cljs.core.rest(arglist__17849);
      return G__17846__delegate(x, ys);
    };
    G__17846.cljs$core$IFn$_invoke$arity$variadic = G__17846__delegate;
    return G__17846;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__17850 = cljs.core.next.call(null, xs);
            var G__17851 = cljs.core.next.call(null, ys);
            xs = G__17850;
            ys = G__17851;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__17852 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__17853 = cljs.core.next.call(null, s);
        res = G__17852;
        s = G__17853;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__17854 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__17855 = cljs.core.next.call(null, s);
      h = G__17854;
      s = G__17855;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__17856 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__17857 = cljs.core.next.call(null, s__$1);
      h = G__17856;
      s__$1 = G__17857;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__17864_17870 = cljs.core.seq.call(null, fn_map);
  var chunk__17865_17871 = null;
  var count__17866_17872 = 0;
  var i__17867_17873 = 0;
  while (true) {
    if (i__17867_17873 < count__17866_17872) {
      var vec__17868_17874 = cljs.core._nth.call(null, chunk__17865_17871, i__17867_17873);
      var key_name_17875 = cljs.core.nth.call(null, vec__17868_17874, 0, null);
      var f_17876 = cljs.core.nth.call(null, vec__17868_17874, 1, null);
      var str_name_17877 = cljs.core.name.call(null, key_name_17875);
      obj[str_name_17877] = f_17876;
      var G__17878 = seq__17864_17870;
      var G__17879 = chunk__17865_17871;
      var G__17880 = count__17866_17872;
      var G__17881 = i__17867_17873 + 1;
      seq__17864_17870 = G__17878;
      chunk__17865_17871 = G__17879;
      count__17866_17872 = G__17880;
      i__17867_17873 = G__17881;
      continue;
    } else {
      var temp__4126__auto___17882 = cljs.core.seq.call(null, seq__17864_17870);
      if (temp__4126__auto___17882) {
        var seq__17864_17883__$1 = temp__4126__auto___17882;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17864_17883__$1)) {
          var c__4543__auto___17884 = cljs.core.chunk_first.call(null, seq__17864_17883__$1);
          var G__17885 = cljs.core.chunk_rest.call(null, seq__17864_17883__$1);
          var G__17886 = c__4543__auto___17884;
          var G__17887 = cljs.core.count.call(null, c__4543__auto___17884);
          var G__17888 = 0;
          seq__17864_17870 = G__17885;
          chunk__17865_17871 = G__17886;
          count__17866_17872 = G__17887;
          i__17867_17873 = G__17888;
          continue;
        } else {
          var vec__17869_17889 = cljs.core.first.call(null, seq__17864_17883__$1);
          var key_name_17890 = cljs.core.nth.call(null, vec__17869_17889, 0, null);
          var f_17891 = cljs.core.nth.call(null, vec__17869_17889, 1, null);
          var str_name_17892 = cljs.core.name.call(null, key_name_17890);
          obj[str_name_17892] = f_17891;
          var G__17893 = cljs.core.next.call(null, seq__17864_17883__$1);
          var G__17894 = null;
          var G__17895 = 0;
          var G__17896 = 0;
          seq__17864_17870 = G__17893;
          chunk__17865_17871 = G__17894;
          count__17866_17872 = G__17895;
          i__17867_17873 = G__17896;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__17898 = coll;
  if (G__17898) {
    var bit__4437__auto__ = G__17898.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4437__auto__ || G__17898.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__17898.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__17898);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__17898);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__17899 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__17899;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__17900 = i - 1;
        var G__17901 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__17900;
        r = G__17901;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__17902) {
    var xs = cljs.core.seq(arglist__17902);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3761__auto__ = coll == null;
    if (or__3761__auto__) {
      return or__3761__auto__;
    } else {
      var G__17906 = coll;
      if (G__17906) {
        var bit__4430__auto__ = G__17906.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4430__auto__ || G__17906.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__17908 = x;
  if (G__17908) {
    var bit__4437__auto__ = G__17908.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4437__auto__ || G__17908.cljs$core$IList$) {
      return true;
    } else {
      if (!G__17908.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__17908);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__17908);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4177__auto__ = self__._hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__17910 = null;
  var G__17910__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__17910__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__17910 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17910__2.call(this, self__, coll);
      case 3:
        return G__17910__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17910.cljs$core$IFn$_invoke$arity$2 = G__17910__2;
  G__17910.cljs$core$IFn$_invoke$arity$3 = G__17910__3;
  return G__17910;
}();
cljs.core.Keyword.prototype.apply = function(self__, args17909) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17909)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__17912 = x;
    if (G__17912) {
      var bit__4430__auto__ = G__17912.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4430__auto__ || G__17912.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__17913 = ls.sval();
        ls = G__17913;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__17915 = s;
    if (G__17915) {
      var bit__4430__auto__ = G__17915.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4430__auto__ || G__17915.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__17916 = cljs.core.next.call(null, s__$1);
      s__$1 = G__17916;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_17917 = 0;
  var xs_17918 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_17918) {
      ret[i_17917] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_17918));
      var G__17919 = i_17917 + 1;
      var G__17920 = cljs.core.next.call(null, xs_17918);
      i_17917 = G__17919;
      xs_17918 = G__17920;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__17921 = i + 1;
          var G__17922 = cljs.core.next.call(null, s__$1);
          i = G__17921;
          s__$1 = G__17922;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4643__auto___17923 = size;
      var i_17924 = 0;
      while (true) {
        if (i_17924 < n__4643__auto___17923) {
          a[i_17924] = init_val_or_seq;
          var G__17925 = i_17924 + 1;
          i_17924 = G__17925;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__17926 = i + 1;
          var G__17927 = cljs.core.next.call(null, s__$1);
          i = G__17926;
          s__$1 = G__17927;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4643__auto___17928 = size;
      var i_17929 = 0;
      while (true) {
        if (i_17929 < n__4643__auto___17928) {
          a[i_17929] = init_val_or_seq;
          var G__17930 = i_17929 + 1;
          i_17929 = G__17930;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__17931 = i + 1;
          var G__17932 = cljs.core.next.call(null, s__$1);
          i = G__17931;
          s__$1 = G__17932;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4643__auto___17933 = size;
      var i_17934 = 0;
      while (true) {
        if (i_17934 < n__4643__auto___17933) {
          a[i_17934] = init_val_or_seq;
          var G__17935 = i_17934 + 1;
          i_17934 = G__17935;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__17936 = i + 1;
          var G__17937 = cljs.core.next.call(null, s__$1);
          i = G__17936;
          s__$1 = G__17937;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4643__auto___17938 = size;
      var i_17939 = 0;
      while (true) {
        if (i_17939 < n__4643__auto___17938) {
          a[i_17939] = init_val_or_seq;
          var G__17940 = i_17939 + 1;
          i_17939 = G__17940;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__17941 = cljs.core.next.call(null, s__$1);
        var G__17942 = i - 1;
        var G__17943 = sum + 1;
        s__$1 = G__17941;
        i = G__17942;
        sum = G__17943;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__17944__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__17944 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17944__delegate.call(this, x, y, zs);
    };
    G__17944.cljs$lang$maxFixedArity = 2;
    G__17944.cljs$lang$applyTo = function(arglist__17945) {
      var x = cljs.core.first(arglist__17945);
      arglist__17945 = cljs.core.next(arglist__17945);
      var y = cljs.core.first(arglist__17945);
      var zs = cljs.core.rest(arglist__17945);
      return G__17944__delegate(x, y, zs);
    };
    G__17944.cljs$core$IFn$_invoke$arity$variadic = G__17944__delegate;
    return G__17944;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__17946__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__17946 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__17946__delegate.call(this, a, b, c, d, more);
    };
    G__17946.cljs$lang$maxFixedArity = 4;
    G__17946.cljs$lang$applyTo = function(arglist__17947) {
      var a = cljs.core.first(arglist__17947);
      arglist__17947 = cljs.core.next(arglist__17947);
      var b = cljs.core.first(arglist__17947);
      arglist__17947 = cljs.core.next(arglist__17947);
      var c = cljs.core.first(arglist__17947);
      arglist__17947 = cljs.core.next(arglist__17947);
      var d = cljs.core.first(arglist__17947);
      var more = cljs.core.rest(arglist__17947);
      return G__17946__delegate(a, b, c, d, more);
    };
    G__17946.cljs$core$IFn$_invoke$arity$variadic = G__17946__delegate;
    return G__17946;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__17948__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__17949 = ntcoll;
          var G__17950 = cljs.core.first.call(null, vals);
          var G__17951 = cljs.core.next.call(null, vals);
          tcoll = G__17949;
          val = G__17950;
          vals = G__17951;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17948 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17948__delegate.call(this, tcoll, val, vals);
    };
    G__17948.cljs$lang$maxFixedArity = 2;
    G__17948.cljs$lang$applyTo = function(arglist__17952) {
      var tcoll = cljs.core.first(arglist__17952);
      arglist__17952 = cljs.core.next(arglist__17952);
      var val = cljs.core.first(arglist__17952);
      var vals = cljs.core.rest(arglist__17952);
      return G__17948__delegate(tcoll, val, vals);
    };
    G__17948.cljs$core$IFn$_invoke$arity$variadic = G__17948__delegate;
    return G__17948;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__17953__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__17954 = ntcoll;
          var G__17955 = cljs.core.first.call(null, kvs);
          var G__17956 = cljs.core.second.call(null, kvs);
          var G__17957 = cljs.core.nnext.call(null, kvs);
          tcoll = G__17954;
          key = G__17955;
          val = G__17956;
          kvs = G__17957;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17953 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17953__delegate.call(this, tcoll, key, val, kvs);
    };
    G__17953.cljs$lang$maxFixedArity = 3;
    G__17953.cljs$lang$applyTo = function(arglist__17958) {
      var tcoll = cljs.core.first(arglist__17958);
      arglist__17958 = cljs.core.next(arglist__17958);
      var key = cljs.core.first(arglist__17958);
      arglist__17958 = cljs.core.next(arglist__17958);
      var val = cljs.core.first(arglist__17958);
      var kvs = cljs.core.rest(arglist__17958);
      return G__17953__delegate(tcoll, key, val, kvs);
    };
    G__17953.cljs$core$IFn$_invoke$arity$variadic = G__17953__delegate;
    return G__17953;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__17959__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__17960 = ntcoll;
          var G__17961 = cljs.core.first.call(null, ks);
          var G__17962 = cljs.core.next.call(null, ks);
          tcoll = G__17960;
          key = G__17961;
          ks = G__17962;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17959 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17959__delegate.call(this, tcoll, key, ks);
    };
    G__17959.cljs$lang$maxFixedArity = 2;
    G__17959.cljs$lang$applyTo = function(arglist__17963) {
      var tcoll = cljs.core.first(arglist__17963);
      arglist__17963 = cljs.core.next(arglist__17963);
      var key = cljs.core.first(arglist__17963);
      var ks = cljs.core.rest(arglist__17963);
      return G__17959__delegate(tcoll, key, ks);
    };
    G__17959.cljs$core$IFn$_invoke$arity$variadic = G__17959__delegate;
    return G__17959;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__17964__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__17965 = ntcoll;
          var G__17966 = cljs.core.first.call(null, vals);
          var G__17967 = cljs.core.next.call(null, vals);
          tcoll = G__17965;
          val = G__17966;
          vals = G__17967;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17964 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17964__delegate.call(this, tcoll, val, vals);
    };
    G__17964.cljs$lang$maxFixedArity = 2;
    G__17964.cljs$lang$applyTo = function(arglist__17968) {
      var tcoll = cljs.core.first(arglist__17968);
      arglist__17968 = cljs.core.next(arglist__17968);
      var val = cljs.core.first(arglist__17968);
      var vals = cljs.core.rest(arglist__17968);
      return G__17964__delegate(tcoll, val, vals);
    };
    G__17964.cljs$core$IFn$_invoke$arity$variadic = G__17964__delegate;
    return G__17964;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4687 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4687);
      } else {
        return f.call(null, a4687);
      }
    } else {
      var b4688 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4687, b4688);
        } else {
          return f.call(null, a4687, b4688);
        }
      } else {
        var c4689 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4687, b4688, c4689);
          } else {
            return f.call(null, a4687, b4688, c4689);
          }
        } else {
          var d4690 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4687, b4688, c4689, d4690);
            } else {
              return f.call(null, a4687, b4688, c4689, d4690);
            }
          } else {
            var e4691 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4687, b4688, c4689, d4690, e4691);
              } else {
                return f.call(null, a4687, b4688, c4689, d4690, e4691);
              }
            } else {
              var f4692 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4687, b4688, c4689, d4690, e4691, f4692);
                } else {
                  return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692);
                }
              } else {
                var g4693 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4687, b4688, c4689, d4690, e4691, f4692, g4693);
                  } else {
                    return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693);
                  }
                } else {
                  var h4694 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694);
                    } else {
                      return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694);
                    }
                  } else {
                    var i4695 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695);
                      } else {
                        return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695);
                      }
                    } else {
                      var j4696 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696);
                        } else {
                          return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696);
                        }
                      } else {
                        var k4697 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697);
                          } else {
                            return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697);
                          }
                        } else {
                          var l4698 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698);
                            } else {
                              return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698);
                            }
                          } else {
                            var m4699 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699);
                              } else {
                                return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699);
                              }
                            } else {
                              var n4700 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700);
                                } else {
                                  return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700);
                                }
                              } else {
                                var o4701 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701);
                                  } else {
                                    return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701);
                                  }
                                } else {
                                  var p4702 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702);
                                    } else {
                                      return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702);
                                    }
                                  } else {
                                    var q4703 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702, q4703);
                                      } else {
                                        return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702, q4703);
                                      }
                                    } else {
                                      var r4704 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702, q4703, r4704);
                                        } else {
                                          return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702, q4703, r4704);
                                        }
                                      } else {
                                        var s4705 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702, q4703, r4704, s4705);
                                          } else {
                                            return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702, q4703, r4704, s4705);
                                          }
                                        } else {
                                          var t4706 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702, q4703, r4704, s4705, t4706);
                                            } else {
                                              return f.call(null, a4687, b4688, c4689, d4690, e4691, f4692, g4693, h4694, i4695, j4696, k4697, l4698, m4699, n4700, o4701, p4702, q4703, r4704, s4705, t4706);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__17969__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__17969 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__17969__delegate.call(this, f, a, b, c, d, args);
    };
    G__17969.cljs$lang$maxFixedArity = 5;
    G__17969.cljs$lang$applyTo = function(arglist__17970) {
      var f = cljs.core.first(arglist__17970);
      arglist__17970 = cljs.core.next(arglist__17970);
      var a = cljs.core.first(arglist__17970);
      arglist__17970 = cljs.core.next(arglist__17970);
      var b = cljs.core.first(arglist__17970);
      arglist__17970 = cljs.core.next(arglist__17970);
      var c = cljs.core.first(arglist__17970);
      arglist__17970 = cljs.core.next(arglist__17970);
      var d = cljs.core.first(arglist__17970);
      var args = cljs.core.rest(arglist__17970);
      return G__17969__delegate(f, a, b, c, d, args);
    };
    G__17969.cljs$core$IFn$_invoke$arity$variadic = G__17969__delegate;
    return G__17969;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__17971__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__17971 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__17971__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__17971.cljs$lang$maxFixedArity = 6;
    G__17971.cljs$lang$applyTo = function(arglist__17972) {
      var obj = cljs.core.first(arglist__17972);
      arglist__17972 = cljs.core.next(arglist__17972);
      var f = cljs.core.first(arglist__17972);
      arglist__17972 = cljs.core.next(arglist__17972);
      var a = cljs.core.first(arglist__17972);
      arglist__17972 = cljs.core.next(arglist__17972);
      var b = cljs.core.first(arglist__17972);
      arglist__17972 = cljs.core.next(arglist__17972);
      var c = cljs.core.first(arglist__17972);
      arglist__17972 = cljs.core.next(arglist__17972);
      var d = cljs.core.first(arglist__17972);
      var args = cljs.core.rest(arglist__17972);
      return G__17971__delegate(obj, f, a, b, c, d, args);
    };
    G__17971.cljs$core$IFn$_invoke$arity$variadic = G__17971__delegate;
    return G__17971;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__17973__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__17973 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17973__delegate.call(this, x, y, more);
    };
    G__17973.cljs$lang$maxFixedArity = 2;
    G__17973.cljs$lang$applyTo = function(arglist__17974) {
      var x = cljs.core.first(arglist__17974);
      arglist__17974 = cljs.core.next(arglist__17974);
      var y = cljs.core.first(arglist__17974);
      var more = cljs.core.rest(arglist__17974);
      return G__17973__delegate(x, y, more);
    };
    G__17973.cljs$core$IFn$_invoke$arity$variadic = G__17973__delegate;
    return G__17973;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t17978 !== "undefined") {
  } else {
    cljs.core.t17978 = function(nil_iter, meta17979) {
      this.nil_iter = nil_iter;
      this.meta17979 = meta17979;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t17978.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t17978.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t17978.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t17978.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17980) {
      var self__ = this;
      var _17980__$1 = this;
      return self__.meta17979;
    };
    cljs.core.t17978.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17980, meta17979__$1) {
      var self__ = this;
      var _17980__$1 = this;
      return new cljs.core.t17978(self__.nil_iter, meta17979__$1);
    };
    cljs.core.t17978.cljs$lang$type = true;
    cljs.core.t17978.cljs$lang$ctorStr = "cljs.core/t17978";
    cljs.core.t17978.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
      return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/t17978");
    };
    cljs.core.__GT_t17978 = function __GT_t17978(nil_iter__$1, meta17979) {
      return new cljs.core.t17978(nil_iter__$1, meta17979);
    };
  }
  return new cljs.core.t17978(nil_iter, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 54, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 2986, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 2982, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core.cljs"], null));
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3749__auto__ = !(lt.stepper == null);
      if (and__3749__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3749__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__17981 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__17981;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4643__auto___17982 = self__.iters.length;
  var i_17983 = 0;
  while (true) {
    if (i_17983 < n__4643__auto___17982) {
      self__.nexts[i_17983] = self__.iters[i_17983].next();
      var G__17984 = i_17983 + 1;
      i_17983 = G__17984;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3749__auto__ = !(lt.stepper == null);
      if (and__3749__auto__) {
        return this$.hasNext();
      } else {
        return and__3749__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__17985_17989 = cljs.core.seq.call(null, colls);
  var chunk__17986_17990 = null;
  var count__17987_17991 = 0;
  var i__17988_17992 = 0;
  while (true) {
    if (i__17988_17992 < count__17987_17991) {
      var coll_17993 = cljs.core._nth.call(null, chunk__17986_17990, i__17988_17992);
      iters.push(cljs.core.iter.call(null, coll_17993));
      var G__17994 = seq__17985_17989;
      var G__17995 = chunk__17986_17990;
      var G__17996 = count__17987_17991;
      var G__17997 = i__17988_17992 + 1;
      seq__17985_17989 = G__17994;
      chunk__17986_17990 = G__17995;
      count__17987_17991 = G__17996;
      i__17988_17992 = G__17997;
      continue;
    } else {
      var temp__4126__auto___17998 = cljs.core.seq.call(null, seq__17985_17989);
      if (temp__4126__auto___17998) {
        var seq__17985_17999__$1 = temp__4126__auto___17998;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17985_17999__$1)) {
          var c__4543__auto___18000 = cljs.core.chunk_first.call(null, seq__17985_17999__$1);
          var G__18001 = cljs.core.chunk_rest.call(null, seq__17985_17999__$1);
          var G__18002 = c__4543__auto___18000;
          var G__18003 = cljs.core.count.call(null, c__4543__auto___18000);
          var G__18004 = 0;
          seq__17985_17989 = G__18001;
          chunk__17986_17990 = G__18002;
          count__17987_17991 = G__18003;
          i__17988_17992 = G__18004;
          continue;
        } else {
          var coll_18005 = cljs.core.first.call(null, seq__17985_17999__$1);
          iters.push(cljs.core.iter.call(null, coll_18005));
          var G__18006 = cljs.core.next.call(null, seq__17985_17999__$1);
          var G__18007 = null;
          var G__18008 = 0;
          var G__18009 = 0;
          seq__17985_17989 = G__18006;
          chunk__17986_17990 = G__18007;
          count__17987_17991 = G__18008;
          i__17988_17992 = G__18009;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3761__auto__ = cljs.core.seq.call(null, coll);
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__18010__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__18010 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18010__delegate.call(this, xform, coll, colls);
    };
    G__18010.cljs$lang$maxFixedArity = 2;
    G__18010.cljs$lang$applyTo = function(arglist__18011) {
      var xform = cljs.core.first(arglist__18011);
      arglist__18011 = cljs.core.next(arglist__18011);
      var coll = cljs.core.first(arglist__18011);
      var colls = cljs.core.rest(arglist__18011);
      return G__18010__delegate(xform, coll, colls);
    };
    G__18010.cljs$core$IFn$_invoke$arity$variadic = G__18010__delegate;
    return G__18010;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__18012 = pred;
        var G__18013 = cljs.core.next.call(null, coll);
        pred = G__18012;
        coll = G__18013;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3761__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        var G__18014 = pred;
        var G__18015 = cljs.core.next.call(null, coll);
        pred = G__18014;
        coll = G__18015;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__18016 = null;
    var G__18016__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__18016__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__18016__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__18016__3 = function() {
      var G__18017__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__18017 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__18017__delegate.call(this, x, y, zs);
      };
      G__18017.cljs$lang$maxFixedArity = 2;
      G__18017.cljs$lang$applyTo = function(arglist__18018) {
        var x = cljs.core.first(arglist__18018);
        arglist__18018 = cljs.core.next(arglist__18018);
        var y = cljs.core.first(arglist__18018);
        var zs = cljs.core.rest(arglist__18018);
        return G__18017__delegate(x, y, zs);
      };
      G__18017.cljs$core$IFn$_invoke$arity$variadic = G__18017__delegate;
      return G__18017;
    }();
    G__18016 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__18016__0.call(this);
        case 1:
          return G__18016__1.call(this, x);
        case 2:
          return G__18016__2.call(this, x, y);
        default:
          return G__18016__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18016.cljs$lang$maxFixedArity = 2;
    G__18016.cljs$lang$applyTo = G__18016__3.cljs$lang$applyTo;
    G__18016.cljs$core$IFn$_invoke$arity$0 = G__18016__0;
    G__18016.cljs$core$IFn$_invoke$arity$1 = G__18016__1;
    G__18016.cljs$core$IFn$_invoke$arity$2 = G__18016__2;
    G__18016.cljs$core$IFn$_invoke$arity$variadic = G__18016__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__18016;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__18019__delegate = function(args) {
      return x;
    };
    var G__18019 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__18019__delegate.call(this, args);
    };
    G__18019.cljs$lang$maxFixedArity = 0;
    G__18019.cljs$lang$applyTo = function(arglist__18020) {
      var args = cljs.core.seq(arglist__18020);
      return G__18019__delegate(args);
    };
    G__18019.cljs$core$IFn$_invoke$arity$variadic = G__18019__delegate;
    return G__18019;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__18021 = null;
      var G__18021__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__18021__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__18021__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__18021__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__18021__4 = function() {
        var G__18022__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__18022 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18022__delegate.call(this, x, y, z, args);
        };
        G__18022.cljs$lang$maxFixedArity = 3;
        G__18022.cljs$lang$applyTo = function(arglist__18023) {
          var x = cljs.core.first(arglist__18023);
          arglist__18023 = cljs.core.next(arglist__18023);
          var y = cljs.core.first(arglist__18023);
          arglist__18023 = cljs.core.next(arglist__18023);
          var z = cljs.core.first(arglist__18023);
          var args = cljs.core.rest(arglist__18023);
          return G__18022__delegate(x, y, z, args);
        };
        G__18022.cljs$core$IFn$_invoke$arity$variadic = G__18022__delegate;
        return G__18022;
      }();
      G__18021 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18021__0.call(this);
          case 1:
            return G__18021__1.call(this, x);
          case 2:
            return G__18021__2.call(this, x, y);
          case 3:
            return G__18021__3.call(this, x, y, z);
          default:
            return G__18021__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18021.cljs$lang$maxFixedArity = 3;
      G__18021.cljs$lang$applyTo = G__18021__4.cljs$lang$applyTo;
      G__18021.cljs$core$IFn$_invoke$arity$0 = G__18021__0;
      G__18021.cljs$core$IFn$_invoke$arity$1 = G__18021__1;
      G__18021.cljs$core$IFn$_invoke$arity$2 = G__18021__2;
      G__18021.cljs$core$IFn$_invoke$arity$3 = G__18021__3;
      G__18021.cljs$core$IFn$_invoke$arity$variadic = G__18021__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18021;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__18024 = null;
      var G__18024__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__18024__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__18024__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__18024__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__18024__4 = function() {
        var G__18025__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__18025 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18025__delegate.call(this, x, y, z, args);
        };
        G__18025.cljs$lang$maxFixedArity = 3;
        G__18025.cljs$lang$applyTo = function(arglist__18026) {
          var x = cljs.core.first(arglist__18026);
          arglist__18026 = cljs.core.next(arglist__18026);
          var y = cljs.core.first(arglist__18026);
          arglist__18026 = cljs.core.next(arglist__18026);
          var z = cljs.core.first(arglist__18026);
          var args = cljs.core.rest(arglist__18026);
          return G__18025__delegate(x, y, z, args);
        };
        G__18025.cljs$core$IFn$_invoke$arity$variadic = G__18025__delegate;
        return G__18025;
      }();
      G__18024 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18024__0.call(this);
          case 1:
            return G__18024__1.call(this, x);
          case 2:
            return G__18024__2.call(this, x, y);
          case 3:
            return G__18024__3.call(this, x, y, z);
          default:
            return G__18024__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18024.cljs$lang$maxFixedArity = 3;
      G__18024.cljs$lang$applyTo = G__18024__4.cljs$lang$applyTo;
      G__18024.cljs$core$IFn$_invoke$arity$0 = G__18024__0;
      G__18024.cljs$core$IFn$_invoke$arity$1 = G__18024__1;
      G__18024.cljs$core$IFn$_invoke$arity$2 = G__18024__2;
      G__18024.cljs$core$IFn$_invoke$arity$3 = G__18024__3;
      G__18024.cljs$core$IFn$_invoke$arity$variadic = G__18024__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18024;
    }();
  };
  var comp__4 = function() {
    var G__18027__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__18028__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__18029 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__18030 = cljs.core.next.call(null, fs__$2);
                ret = G__18029;
                fs__$2 = G__18030;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__18028 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__18028__delegate.call(this, args);
          };
          G__18028.cljs$lang$maxFixedArity = 0;
          G__18028.cljs$lang$applyTo = function(arglist__18031) {
            var args = cljs.core.seq(arglist__18031);
            return G__18028__delegate(args);
          };
          G__18028.cljs$core$IFn$_invoke$arity$variadic = G__18028__delegate;
          return G__18028;
        }();
      }(fs__$1);
    };
    var G__18027 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18027__delegate.call(this, f1, f2, f3, fs);
    };
    G__18027.cljs$lang$maxFixedArity = 3;
    G__18027.cljs$lang$applyTo = function(arglist__18032) {
      var f1 = cljs.core.first(arglist__18032);
      arglist__18032 = cljs.core.next(arglist__18032);
      var f2 = cljs.core.first(arglist__18032);
      arglist__18032 = cljs.core.next(arglist__18032);
      var f3 = cljs.core.first(arglist__18032);
      var fs = cljs.core.rest(arglist__18032);
      return G__18027__delegate(f1, f2, f3, fs);
    };
    G__18027.cljs$core$IFn$_invoke$arity$variadic = G__18027__delegate;
    return G__18027;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__18033__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__18033 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__18033__delegate.call(this, args);
      };
      G__18033.cljs$lang$maxFixedArity = 0;
      G__18033.cljs$lang$applyTo = function(arglist__18034) {
        var args = cljs.core.seq(arglist__18034);
        return G__18033__delegate(args);
      };
      G__18033.cljs$core$IFn$_invoke$arity$variadic = G__18033__delegate;
      return G__18033;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__18035__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__18035 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__18035__delegate.call(this, args);
      };
      G__18035.cljs$lang$maxFixedArity = 0;
      G__18035.cljs$lang$applyTo = function(arglist__18036) {
        var args = cljs.core.seq(arglist__18036);
        return G__18035__delegate(args);
      };
      G__18035.cljs$core$IFn$_invoke$arity$variadic = G__18035__delegate;
      return G__18035;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__18037__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__18037 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__18037__delegate.call(this, args);
      };
      G__18037.cljs$lang$maxFixedArity = 0;
      G__18037.cljs$lang$applyTo = function(arglist__18038) {
        var args = cljs.core.seq(arglist__18038);
        return G__18037__delegate(args);
      };
      G__18037.cljs$core$IFn$_invoke$arity$variadic = G__18037__delegate;
      return G__18037;
    }();
  };
  var partial__5 = function() {
    var G__18039__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__18040__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__18040 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__18040__delegate.call(this, args);
        };
        G__18040.cljs$lang$maxFixedArity = 0;
        G__18040.cljs$lang$applyTo = function(arglist__18041) {
          var args = cljs.core.seq(arglist__18041);
          return G__18040__delegate(args);
        };
        G__18040.cljs$core$IFn$_invoke$arity$variadic = G__18040__delegate;
        return G__18040;
      }();
    };
    var G__18039 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__18039__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__18039.cljs$lang$maxFixedArity = 4;
    G__18039.cljs$lang$applyTo = function(arglist__18042) {
      var f = cljs.core.first(arglist__18042);
      arglist__18042 = cljs.core.next(arglist__18042);
      var arg1 = cljs.core.first(arglist__18042);
      arglist__18042 = cljs.core.next(arglist__18042);
      var arg2 = cljs.core.first(arglist__18042);
      arglist__18042 = cljs.core.next(arglist__18042);
      var arg3 = cljs.core.first(arglist__18042);
      var more = cljs.core.rest(arglist__18042);
      return G__18039__delegate(f, arg1, arg2, arg3, more);
    };
    G__18039.cljs$core$IFn$_invoke$arity$variadic = G__18039__delegate;
    return G__18039;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__18043 = null;
      var G__18043__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__18043__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__18043__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__18043__4 = function() {
        var G__18044__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__18044 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18044__delegate.call(this, a, b, c, ds);
        };
        G__18044.cljs$lang$maxFixedArity = 3;
        G__18044.cljs$lang$applyTo = function(arglist__18045) {
          var a = cljs.core.first(arglist__18045);
          arglist__18045 = cljs.core.next(arglist__18045);
          var b = cljs.core.first(arglist__18045);
          arglist__18045 = cljs.core.next(arglist__18045);
          var c = cljs.core.first(arglist__18045);
          var ds = cljs.core.rest(arglist__18045);
          return G__18044__delegate(a, b, c, ds);
        };
        G__18044.cljs$core$IFn$_invoke$arity$variadic = G__18044__delegate;
        return G__18044;
      }();
      G__18043 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__18043__1.call(this, a);
          case 2:
            return G__18043__2.call(this, a, b);
          case 3:
            return G__18043__3.call(this, a, b, c);
          default:
            return G__18043__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18043.cljs$lang$maxFixedArity = 3;
      G__18043.cljs$lang$applyTo = G__18043__4.cljs$lang$applyTo;
      G__18043.cljs$core$IFn$_invoke$arity$1 = G__18043__1;
      G__18043.cljs$core$IFn$_invoke$arity$2 = G__18043__2;
      G__18043.cljs$core$IFn$_invoke$arity$3 = G__18043__3;
      G__18043.cljs$core$IFn$_invoke$arity$variadic = G__18043__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18043;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__18046 = null;
      var G__18046__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__18046__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__18046__4 = function() {
        var G__18047__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__18047 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18047__delegate.call(this, a, b, c, ds);
        };
        G__18047.cljs$lang$maxFixedArity = 3;
        G__18047.cljs$lang$applyTo = function(arglist__18048) {
          var a = cljs.core.first(arglist__18048);
          arglist__18048 = cljs.core.next(arglist__18048);
          var b = cljs.core.first(arglist__18048);
          arglist__18048 = cljs.core.next(arglist__18048);
          var c = cljs.core.first(arglist__18048);
          var ds = cljs.core.rest(arglist__18048);
          return G__18047__delegate(a, b, c, ds);
        };
        G__18047.cljs$core$IFn$_invoke$arity$variadic = G__18047__delegate;
        return G__18047;
      }();
      G__18046 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__18046__2.call(this, a, b);
          case 3:
            return G__18046__3.call(this, a, b, c);
          default:
            return G__18046__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18046.cljs$lang$maxFixedArity = 3;
      G__18046.cljs$lang$applyTo = G__18046__4.cljs$lang$applyTo;
      G__18046.cljs$core$IFn$_invoke$arity$2 = G__18046__2;
      G__18046.cljs$core$IFn$_invoke$arity$3 = G__18046__3;
      G__18046.cljs$core$IFn$_invoke$arity$variadic = G__18046__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18046;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__18049 = null;
      var G__18049__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__18049__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__18049__4 = function() {
        var G__18050__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__18050 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18050__delegate.call(this, a, b, c, ds);
        };
        G__18050.cljs$lang$maxFixedArity = 3;
        G__18050.cljs$lang$applyTo = function(arglist__18051) {
          var a = cljs.core.first(arglist__18051);
          arglist__18051 = cljs.core.next(arglist__18051);
          var b = cljs.core.first(arglist__18051);
          arglist__18051 = cljs.core.next(arglist__18051);
          var c = cljs.core.first(arglist__18051);
          var ds = cljs.core.rest(arglist__18051);
          return G__18050__delegate(a, b, c, ds);
        };
        G__18050.cljs$core$IFn$_invoke$arity$variadic = G__18050__delegate;
        return G__18050;
      }();
      G__18049 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__18049__2.call(this, a, b);
          case 3:
            return G__18049__3.call(this, a, b, c);
          default:
            return G__18049__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18049.cljs$lang$maxFixedArity = 3;
      G__18049.cljs$lang$applyTo = G__18049__4.cljs$lang$applyTo;
      G__18049.cljs$core$IFn$_invoke$arity$2 = G__18049__2;
      G__18049.cljs$core$IFn$_invoke$arity$3 = G__18049__3;
      G__18049.cljs$core$IFn$_invoke$arity$variadic = G__18049__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18049;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4643__auto___18052 = size;
          var i_18053 = 0;
          while (true) {
            if (i_18053 < n__4643__auto___18052) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_18053, cljs.core._nth.call(null, c, i_18053)));
              var G__18054 = i_18053 + 1;
              i_18053 = G__18054;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__18055 = null;
        var G__18055__0 = function() {
          return rf.call(null);
        };
        var G__18055__1 = function(result) {
          return rf.call(null, result);
        };
        var G__18055__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return rf.call(null, result, v);
          }
        };
        G__18055 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18055__0.call(this);
            case 1:
              return G__18055__1.call(this, result);
            case 2:
              return G__18055__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18055.cljs$core$IFn$_invoke$arity$0 = G__18055__0;
        G__18055.cljs$core$IFn$_invoke$arity$1 = G__18055__1;
        G__18055.cljs$core$IFn$_invoke$arity$2 = G__18055__2;
        return G__18055;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4643__auto___18056 = size;
          var i_18057 = 0;
          while (true) {
            if (i_18057 < n__4643__auto___18056) {
              var x_18058 = f.call(null, cljs.core._nth.call(null, c, i_18057));
              if (x_18058 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_18058);
              }
              var G__18059 = i_18057 + 1;
              i_18057 = G__18059;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__18060 = cljs.core.seq.call(null, self__.watches);
  var chunk__18061 = null;
  var count__18062 = 0;
  var i__18063 = 0;
  while (true) {
    if (i__18063 < count__18062) {
      var vec__18064 = cljs.core._nth.call(null, chunk__18061, i__18063);
      var key = cljs.core.nth.call(null, vec__18064, 0, null);
      var f = cljs.core.nth.call(null, vec__18064, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__18066 = seq__18060;
      var G__18067 = chunk__18061;
      var G__18068 = count__18062;
      var G__18069 = i__18063 + 1;
      seq__18060 = G__18066;
      chunk__18061 = G__18067;
      count__18062 = G__18068;
      i__18063 = G__18069;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__18060);
      if (temp__4126__auto__) {
        var seq__18060__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18060__$1)) {
          var c__4543__auto__ = cljs.core.chunk_first.call(null, seq__18060__$1);
          var G__18070 = cljs.core.chunk_rest.call(null, seq__18060__$1);
          var G__18071 = c__4543__auto__;
          var G__18072 = cljs.core.count.call(null, c__4543__auto__);
          var G__18073 = 0;
          seq__18060 = G__18070;
          chunk__18061 = G__18071;
          count__18062 = G__18072;
          i__18063 = G__18073;
          continue;
        } else {
          var vec__18065 = cljs.core.first.call(null, seq__18060__$1);
          var key = cljs.core.nth.call(null, vec__18065, 0, null);
          var f = cljs.core.nth.call(null, vec__18065, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__18074 = cljs.core.next.call(null, seq__18060__$1);
          var G__18075 = null;
          var G__18076 = 0;
          var G__18077 = 0;
          seq__18060 = G__18074;
          chunk__18061 = G__18075;
          count__18062 = G__18076;
          i__18063 = G__18077;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__18081__delegate = function(x, p__18078) {
      var map__18080 = p__18078;
      var map__18080__$1 = cljs.core.seq_QMARK_.call(null, map__18080) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18080) : map__18080;
      var validator = cljs.core.get.call(null, map__18080__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__18080__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__18081 = function(x, var_args) {
      var p__18078 = null;
      if (arguments.length > 1) {
        p__18078 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__18081__delegate.call(this, x, p__18078);
    };
    G__18081.cljs$lang$maxFixedArity = 1;
    G__18081.cljs$lang$applyTo = function(arglist__18082) {
      var x = cljs.core.first(arglist__18082);
      var p__18078 = cljs.core.rest(arglist__18082);
      return G__18081__delegate(x, p__18078);
    };
    G__18081.cljs$core$IFn$_invoke$arity$variadic = G__18081__delegate;
    return G__18081;
  }();
  atom = function(x, var_args) {
    var p__18078 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null))))].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__18083__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__18083 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__18083__delegate.call(this, a, f, x, y, more);
    };
    G__18083.cljs$lang$maxFixedArity = 4;
    G__18083.cljs$lang$applyTo = function(arglist__18084) {
      var a = cljs.core.first(arglist__18084);
      arglist__18084 = cljs.core.next(arglist__18084);
      var f = cljs.core.first(arglist__18084);
      arglist__18084 = cljs.core.next(arglist__18084);
      var x = cljs.core.first(arglist__18084);
      arglist__18084 = cljs.core.next(arglist__18084);
      var y = cljs.core.first(arglist__18084);
      var more = cljs.core.rest(arglist__18084);
      return G__18083__delegate(a, f, x, y, more);
    };
    G__18083.cljs$core$IFn$_invoke$arity$variadic = G__18083__delegate;
    return G__18083;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__18085 = null;
          var G__18085__0 = function() {
            return rf.call(null);
          };
          var G__18085__1 = function(result) {
            return rf.call(null, result);
          };
          var G__18085__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return rf.call(null, result, v);
            }
          };
          G__18085 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18085__0.call(this);
              case 1:
                return G__18085__1.call(this, result);
              case 2:
                return G__18085__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18085.cljs$core$IFn$_invoke$arity$0 = G__18085__0;
          G__18085.cljs$core$IFn$_invoke$arity$1 = G__18085__1;
          G__18085.cljs$core$IFn$_invoke$arity$2 = G__18085__2;
          return G__18085;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4643__auto___18086 = size;
            var i_18087 = 0;
            while (true) {
              if (i_18087 < n__4643__auto___18086) {
                var x_18088 = f.call(null, idx + i_18087, cljs.core._nth.call(null, c, i_18087));
                if (x_18088 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_18088);
                }
                var G__18089 = i_18087 + 1;
                i_18087 = G__18089;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3749__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3749__auto__)) {
            return p.call(null, y);
          } else {
            return and__3749__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3749__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3749__auto__)) {
            var and__3749__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3749__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3749__auto____$1;
            }
          } else {
            return and__3749__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__18096__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__18096 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18096__delegate.call(this, x, y, z, args);
        };
        G__18096.cljs$lang$maxFixedArity = 3;
        G__18096.cljs$lang$applyTo = function(arglist__18097) {
          var x = cljs.core.first(arglist__18097);
          arglist__18097 = cljs.core.next(arglist__18097);
          var y = cljs.core.first(arglist__18097);
          arglist__18097 = cljs.core.next(arglist__18097);
          var z = cljs.core.first(arglist__18097);
          var args = cljs.core.rest(arglist__18097);
          return G__18096__delegate(x, y, z, args);
        };
        G__18096.cljs$core$IFn$_invoke$arity$variadic = G__18096__delegate;
        return G__18096;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3749__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3749__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3749__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3749__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3749__auto__)) {
            var and__3749__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3749__auto____$1)) {
              var and__3749__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3749__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3749__auto____$2;
              }
            } else {
              return and__3749__auto____$1;
            }
          } else {
            return and__3749__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3749__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3749__auto__)) {
            var and__3749__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3749__auto____$1)) {
              var and__3749__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3749__auto____$2)) {
                var and__3749__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3749__auto____$3)) {
                  var and__3749__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3749__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3749__auto____$4;
                  }
                } else {
                  return and__3749__auto____$3;
                }
              } else {
                return and__3749__auto____$2;
              }
            } else {
              return and__3749__auto____$1;
            }
          } else {
            return and__3749__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__18098__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__18090_SHARP_) {
            var and__3749__auto__ = p1.call(null, p1__18090_SHARP_);
            if (cljs.core.truth_(and__3749__auto__)) {
              return p2.call(null, p1__18090_SHARP_);
            } else {
              return and__3749__auto__;
            }
          }, args));
        };
        var G__18098 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18098__delegate.call(this, x, y, z, args);
        };
        G__18098.cljs$lang$maxFixedArity = 3;
        G__18098.cljs$lang$applyTo = function(arglist__18099) {
          var x = cljs.core.first(arglist__18099);
          arglist__18099 = cljs.core.next(arglist__18099);
          var y = cljs.core.first(arglist__18099);
          arglist__18099 = cljs.core.next(arglist__18099);
          var z = cljs.core.first(arglist__18099);
          var args = cljs.core.rest(arglist__18099);
          return G__18098__delegate(x, y, z, args);
        };
        G__18098.cljs$core$IFn$_invoke$arity$variadic = G__18098__delegate;
        return G__18098;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3749__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3749__auto__)) {
            var and__3749__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3749__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3749__auto____$1;
            }
          } else {
            return and__3749__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3749__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3749__auto__)) {
            var and__3749__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3749__auto____$1)) {
              var and__3749__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3749__auto____$2)) {
                var and__3749__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3749__auto____$3)) {
                  var and__3749__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3749__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3749__auto____$4;
                  }
                } else {
                  return and__3749__auto____$3;
                }
              } else {
                return and__3749__auto____$2;
              }
            } else {
              return and__3749__auto____$1;
            }
          } else {
            return and__3749__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3749__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3749__auto__)) {
            var and__3749__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3749__auto____$1)) {
              var and__3749__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3749__auto____$2)) {
                var and__3749__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3749__auto____$3)) {
                  var and__3749__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3749__auto____$4)) {
                    var and__3749__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3749__auto____$5)) {
                      var and__3749__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3749__auto____$6)) {
                        var and__3749__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3749__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3749__auto____$7;
                        }
                      } else {
                        return and__3749__auto____$6;
                      }
                    } else {
                      return and__3749__auto____$5;
                    }
                  } else {
                    return and__3749__auto____$4;
                  }
                } else {
                  return and__3749__auto____$3;
                }
              } else {
                return and__3749__auto____$2;
              }
            } else {
              return and__3749__auto____$1;
            }
          } else {
            return and__3749__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__18100__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__18091_SHARP_) {
            var and__3749__auto__ = p1.call(null, p1__18091_SHARP_);
            if (cljs.core.truth_(and__3749__auto__)) {
              var and__3749__auto____$1 = p2.call(null, p1__18091_SHARP_);
              if (cljs.core.truth_(and__3749__auto____$1)) {
                return p3.call(null, p1__18091_SHARP_);
              } else {
                return and__3749__auto____$1;
              }
            } else {
              return and__3749__auto__;
            }
          }, args));
        };
        var G__18100 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18100__delegate.call(this, x, y, z, args);
        };
        G__18100.cljs$lang$maxFixedArity = 3;
        G__18100.cljs$lang$applyTo = function(arglist__18101) {
          var x = cljs.core.first(arglist__18101);
          arglist__18101 = cljs.core.next(arglist__18101);
          var y = cljs.core.first(arglist__18101);
          arglist__18101 = cljs.core.next(arglist__18101);
          var z = cljs.core.first(arglist__18101);
          var args = cljs.core.rest(arglist__18101);
          return G__18100__delegate(x, y, z, args);
        };
        G__18100.cljs$core$IFn$_invoke$arity$variadic = G__18100__delegate;
        return G__18100;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__18102__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__18092_SHARP_) {
                return p1__18092_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__18093_SHARP_) {
                var and__3749__auto__ = p1__18093_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3749__auto__)) {
                  return p1__18093_SHARP_.call(null, y);
                } else {
                  return and__3749__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__18094_SHARP_) {
                var and__3749__auto__ = p1__18094_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3749__auto__)) {
                  var and__3749__auto____$1 = p1__18094_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3749__auto____$1)) {
                    return p1__18094_SHARP_.call(null, z);
                  } else {
                    return and__3749__auto____$1;
                  }
                } else {
                  return and__3749__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__18103__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__18095_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__18095_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__18103 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__18103__delegate.call(this, x, y, z, args);
            };
            G__18103.cljs$lang$maxFixedArity = 3;
            G__18103.cljs$lang$applyTo = function(arglist__18104) {
              var x = cljs.core.first(arglist__18104);
              arglist__18104 = cljs.core.next(arglist__18104);
              var y = cljs.core.first(arglist__18104);
              arglist__18104 = cljs.core.next(arglist__18104);
              var z = cljs.core.first(arglist__18104);
              var args = cljs.core.rest(arglist__18104);
              return G__18103__delegate(x, y, z, args);
            };
            G__18103.cljs$core$IFn$_invoke$arity$variadic = G__18103__delegate;
            return G__18103;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__18102 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18102__delegate.call(this, p1, p2, p3, ps);
    };
    G__18102.cljs$lang$maxFixedArity = 3;
    G__18102.cljs$lang$applyTo = function(arglist__18105) {
      var p1 = cljs.core.first(arglist__18105);
      arglist__18105 = cljs.core.next(arglist__18105);
      var p2 = cljs.core.first(arglist__18105);
      arglist__18105 = cljs.core.next(arglist__18105);
      var p3 = cljs.core.first(arglist__18105);
      var ps = cljs.core.rest(arglist__18105);
      return G__18102__delegate(p1, p2, p3, ps);
    };
    G__18102.cljs$core$IFn$_invoke$arity$variadic = G__18102__delegate;
    return G__18102;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3761__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3761__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3761__auto____$1)) {
            return or__3761__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__18112__delegate = function(x, y, z, args) {
          var or__3761__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__18112 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18112__delegate.call(this, x, y, z, args);
        };
        G__18112.cljs$lang$maxFixedArity = 3;
        G__18112.cljs$lang$applyTo = function(arglist__18113) {
          var x = cljs.core.first(arglist__18113);
          arglist__18113 = cljs.core.next(arglist__18113);
          var y = cljs.core.first(arglist__18113);
          arglist__18113 = cljs.core.next(arglist__18113);
          var z = cljs.core.first(arglist__18113);
          var args = cljs.core.rest(arglist__18113);
          return G__18112__delegate(x, y, z, args);
        };
        G__18112.cljs$core$IFn$_invoke$arity$variadic = G__18112__delegate;
        return G__18112;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3761__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3761__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3761__auto____$1)) {
            return or__3761__auto____$1;
          } else {
            var or__3761__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3761__auto____$2)) {
              return or__3761__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3761__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3761__auto____$1)) {
            return or__3761__auto____$1;
          } else {
            var or__3761__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3761__auto____$2)) {
              return or__3761__auto____$2;
            } else {
              var or__3761__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3761__auto____$3)) {
                return or__3761__auto____$3;
              } else {
                var or__3761__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3761__auto____$4)) {
                  return or__3761__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__18114__delegate = function(x, y, z, args) {
          var or__3761__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3761__auto__) {
              return function(p1__18106_SHARP_) {
                var or__3761__auto____$1 = p1.call(null, p1__18106_SHARP_);
                if (cljs.core.truth_(or__3761__auto____$1)) {
                  return or__3761__auto____$1;
                } else {
                  return p2.call(null, p1__18106_SHARP_);
                }
              };
            }(or__3761__auto__), args);
          }
        };
        var G__18114 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18114__delegate.call(this, x, y, z, args);
        };
        G__18114.cljs$lang$maxFixedArity = 3;
        G__18114.cljs$lang$applyTo = function(arglist__18115) {
          var x = cljs.core.first(arglist__18115);
          arglist__18115 = cljs.core.next(arglist__18115);
          var y = cljs.core.first(arglist__18115);
          arglist__18115 = cljs.core.next(arglist__18115);
          var z = cljs.core.first(arglist__18115);
          var args = cljs.core.rest(arglist__18115);
          return G__18114__delegate(x, y, z, args);
        };
        G__18114.cljs$core$IFn$_invoke$arity$variadic = G__18114__delegate;
        return G__18114;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3761__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3761__auto____$1)) {
            return or__3761__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3761__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3761__auto____$1)) {
            return or__3761__auto____$1;
          } else {
            var or__3761__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3761__auto____$2)) {
              return or__3761__auto____$2;
            } else {
              var or__3761__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3761__auto____$3)) {
                return or__3761__auto____$3;
              } else {
                var or__3761__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3761__auto____$4)) {
                  return or__3761__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3761__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3761__auto____$1)) {
            return or__3761__auto____$1;
          } else {
            var or__3761__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3761__auto____$2)) {
              return or__3761__auto____$2;
            } else {
              var or__3761__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3761__auto____$3)) {
                return or__3761__auto____$3;
              } else {
                var or__3761__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3761__auto____$4)) {
                  return or__3761__auto____$4;
                } else {
                  var or__3761__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3761__auto____$5)) {
                    return or__3761__auto____$5;
                  } else {
                    var or__3761__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3761__auto____$6)) {
                      return or__3761__auto____$6;
                    } else {
                      var or__3761__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3761__auto____$7)) {
                        return or__3761__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__18116__delegate = function(x, y, z, args) {
          var or__3761__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3761__auto__) {
              return function(p1__18107_SHARP_) {
                var or__3761__auto____$1 = p1.call(null, p1__18107_SHARP_);
                if (cljs.core.truth_(or__3761__auto____$1)) {
                  return or__3761__auto____$1;
                } else {
                  var or__3761__auto____$2 = p2.call(null, p1__18107_SHARP_);
                  if (cljs.core.truth_(or__3761__auto____$2)) {
                    return or__3761__auto____$2;
                  } else {
                    return p3.call(null, p1__18107_SHARP_);
                  }
                }
              };
            }(or__3761__auto__), args);
          }
        };
        var G__18116 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18116__delegate.call(this, x, y, z, args);
        };
        G__18116.cljs$lang$maxFixedArity = 3;
        G__18116.cljs$lang$applyTo = function(arglist__18117) {
          var x = cljs.core.first(arglist__18117);
          arglist__18117 = cljs.core.next(arglist__18117);
          var y = cljs.core.first(arglist__18117);
          arglist__18117 = cljs.core.next(arglist__18117);
          var z = cljs.core.first(arglist__18117);
          var args = cljs.core.rest(arglist__18117);
          return G__18116__delegate(x, y, z, args);
        };
        G__18116.cljs$core$IFn$_invoke$arity$variadic = G__18116__delegate;
        return G__18116;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__18118__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__18108_SHARP_) {
                return p1__18108_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__18109_SHARP_) {
                var or__3761__auto__ = p1__18109_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3761__auto__)) {
                  return or__3761__auto__;
                } else {
                  return p1__18109_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__18110_SHARP_) {
                var or__3761__auto__ = p1__18110_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3761__auto__)) {
                  return or__3761__auto__;
                } else {
                  var or__3761__auto____$1 = p1__18110_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3761__auto____$1)) {
                    return or__3761__auto____$1;
                  } else {
                    return p1__18110_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__18119__delegate = function(x, y, z, args) {
              var or__3761__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3761__auto__)) {
                return or__3761__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3761__auto__, ps__$1) {
                  return function(p1__18111_SHARP_) {
                    return cljs.core.some.call(null, p1__18111_SHARP_, args);
                  };
                }(or__3761__auto__, ps__$1), ps__$1);
              }
            };
            var G__18119 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__18119__delegate.call(this, x, y, z, args);
            };
            G__18119.cljs$lang$maxFixedArity = 3;
            G__18119.cljs$lang$applyTo = function(arglist__18120) {
              var x = cljs.core.first(arglist__18120);
              arglist__18120 = cljs.core.next(arglist__18120);
              var y = cljs.core.first(arglist__18120);
              arglist__18120 = cljs.core.next(arglist__18120);
              var z = cljs.core.first(arglist__18120);
              var args = cljs.core.rest(arglist__18120);
              return G__18119__delegate(x, y, z, args);
            };
            G__18119.cljs$core$IFn$_invoke$arity$variadic = G__18119__delegate;
            return G__18119;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__18118 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18118__delegate.call(this, p1, p2, p3, ps);
    };
    G__18118.cljs$lang$maxFixedArity = 3;
    G__18118.cljs$lang$applyTo = function(arglist__18121) {
      var p1 = cljs.core.first(arglist__18121);
      arglist__18121 = cljs.core.next(arglist__18121);
      var p2 = cljs.core.first(arglist__18121);
      arglist__18121 = cljs.core.next(arglist__18121);
      var p3 = cljs.core.first(arglist__18121);
      var ps = cljs.core.rest(arglist__18121);
      return G__18118__delegate(p1, p2, p3, ps);
    };
    G__18118.cljs$core$IFn$_invoke$arity$variadic = G__18118__delegate;
    return G__18118;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__18123 = null;
        var G__18123__0 = function() {
          return rf.call(null);
        };
        var G__18123__1 = function(result) {
          return rf.call(null, result);
        };
        var G__18123__2 = function(result, input) {
          return rf.call(null, result, f.call(null, input));
        };
        var G__18123__3 = function() {
          var G__18124__delegate = function(result, input, inputs) {
            return rf.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__18124 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__18124__delegate.call(this, result, input, inputs);
          };
          G__18124.cljs$lang$maxFixedArity = 2;
          G__18124.cljs$lang$applyTo = function(arglist__18125) {
            var result = cljs.core.first(arglist__18125);
            arglist__18125 = cljs.core.next(arglist__18125);
            var input = cljs.core.first(arglist__18125);
            var inputs = cljs.core.rest(arglist__18125);
            return G__18124__delegate(result, input, inputs);
          };
          G__18124.cljs$core$IFn$_invoke$arity$variadic = G__18124__delegate;
          return G__18124;
        }();
        G__18123 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__18123__0.call(this);
            case 1:
              return G__18123__1.call(this, result);
            case 2:
              return G__18123__2.call(this, result, input);
            default:
              return G__18123__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18123.cljs$lang$maxFixedArity = 2;
        G__18123.cljs$lang$applyTo = G__18123__3.cljs$lang$applyTo;
        G__18123.cljs$core$IFn$_invoke$arity$0 = G__18123__0;
        G__18123.cljs$core$IFn$_invoke$arity$1 = G__18123__1;
        G__18123.cljs$core$IFn$_invoke$arity$2 = G__18123__2;
        G__18123.cljs$core$IFn$_invoke$arity$variadic = G__18123__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__18123;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4643__auto___18126 = size;
          var i_18127 = 0;
          while (true) {
            if (i_18127 < n__4643__auto___18126) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_18127)));
              var G__18128 = i_18127 + 1;
              i_18127 = G__18128;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__18129__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__18122_SHARP_) {
          return cljs.core.apply.call(null, f, p1__18122_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__18129 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__18129__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__18129.cljs$lang$maxFixedArity = 4;
    G__18129.cljs$lang$applyTo = function(arglist__18130) {
      var f = cljs.core.first(arglist__18130);
      arglist__18130 = cljs.core.next(arglist__18130);
      var c1 = cljs.core.first(arglist__18130);
      arglist__18130 = cljs.core.next(arglist__18130);
      var c2 = cljs.core.first(arglist__18130);
      arglist__18130 = cljs.core.next(arglist__18130);
      var c3 = cljs.core.first(arglist__18130);
      var colls = cljs.core.rest(arglist__18130);
      return G__18129__delegate(f, c1, c2, c3, colls);
    };
    G__18129.cljs$core$IFn$_invoke$arity$variadic = G__18129__delegate;
    return G__18129;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__18131 = null;
          var G__18131__0 = function() {
            return rf.call(null);
          };
          var G__18131__1 = function(result) {
            return rf.call(null, result);
          };
          var G__18131__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? rf.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__18131 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18131__0.call(this);
              case 1:
                return G__18131__1.call(this, result);
              case 2:
                return G__18131__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18131.cljs$core$IFn$_invoke$arity$0 = G__18131__0;
          G__18131.cljs$core$IFn$_invoke$arity$1 = G__18131__1;
          G__18131.cljs$core$IFn$_invoke$arity$2 = G__18131__2;
          return G__18131;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__18132 = null;
          var G__18132__0 = function() {
            return rf.call(null);
          };
          var G__18132__1 = function(result) {
            return rf.call(null, result);
          };
          var G__18132__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__18132 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18132__0.call(this);
              case 1:
                return G__18132__1.call(this, result);
              case 2:
                return G__18132__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18132.cljs$core$IFn$_invoke$arity$0 = G__18132__0;
          G__18132.cljs$core$IFn$_invoke$arity$1 = G__18132__1;
          G__18132.cljs$core$IFn$_invoke$arity$2 = G__18132__2;
          return G__18132;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__18133 = n__$1 - 1;
          var G__18134 = cljs.core.rest.call(null, s);
          n__$1 = G__18133;
          coll__$1 = G__18134;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__18135 = cljs.core.next.call(null, s);
      var G__18136 = cljs.core.next.call(null, lead);
      s = G__18135;
      lead = G__18136;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__18137 = null;
          var G__18137__0 = function() {
            return rf.call(null);
          };
          var G__18137__1 = function(result) {
            return rf.call(null, result);
          };
          var G__18137__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3749__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3749__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3749__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return rf.call(null, result, input);
            }
          };
          G__18137 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18137__0.call(this);
              case 1:
                return G__18137__1.call(this, result);
              case 2:
                return G__18137__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18137.cljs$core$IFn$_invoke$arity$0 = G__18137__0;
          G__18137.cljs$core$IFn$_invoke$arity$1 = G__18137__1;
          G__18137.cljs$core$IFn$_invoke$arity$2 = G__18137__2;
          return G__18137;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3749__auto__ = s;
          if (and__3749__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3749__auto__;
          }
        }())) {
          var G__18138 = pred__$1;
          var G__18139 = cljs.core.rest.call(null, s);
          pred__$1 = G__18138;
          coll__$1 = G__18139;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__18140__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__18140 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18140__delegate.call(this, c1, c2, colls);
    };
    G__18140.cljs$lang$maxFixedArity = 2;
    G__18140.cljs$lang$applyTo = function(arglist__18141) {
      var c1 = cljs.core.first(arglist__18141);
      arglist__18141 = cljs.core.next(arglist__18141);
      var c2 = cljs.core.first(arglist__18141);
      var colls = cljs.core.rest(arglist__18141);
      return G__18140__delegate(c1, c2, colls);
    };
    G__18140.cljs$core$IFn$_invoke$arity$variadic = G__18140__delegate;
    return G__18140;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__18142__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__18142 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__18142__delegate.call(this, f, colls);
    };
    G__18142.cljs$lang$maxFixedArity = 1;
    G__18142.cljs$lang$applyTo = function(arglist__18143) {
      var f = cljs.core.first(arglist__18143);
      var colls = cljs.core.rest(arglist__18143);
      return G__18142__delegate(f, colls);
    };
    G__18142.cljs$core$IFn$_invoke$arity$variadic = G__18142__delegate;
    return G__18142;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__18144 = null;
        var G__18144__0 = function() {
          return rf.call(null);
        };
        var G__18144__1 = function(result) {
          return rf.call(null, result);
        };
        var G__18144__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__18144 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18144__0.call(this);
            case 1:
              return G__18144__1.call(this, result);
            case 2:
              return G__18144__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18144.cljs$core$IFn$_invoke$arity$0 = G__18144__0;
        G__18144.cljs$core$IFn$_invoke$arity$1 = G__18144__1;
        G__18144.cljs$core$IFn$_invoke$arity$2 = G__18144__2;
        return G__18144;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4643__auto___18145 = size;
          var i_18146 = 0;
          while (true) {
            if (i_18146 < n__4643__auto___18145) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_18146)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_18146));
              } else {
              }
              var G__18147 = i_18146 + 1;
              i_18146 = G__18147;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__18148_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__18148_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__18151 = to;
        if (G__18151) {
          var bit__4430__auto__ = G__18151.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4430__auto__ || G__18151.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__18152 = to;
      if (G__18152) {
        var bit__4430__auto__ = G__18152.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4430__auto__ || G__18152.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__18153__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__18153 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__18153__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__18153.cljs$lang$maxFixedArity = 4;
    G__18153.cljs$lang$applyTo = function(arglist__18154) {
      var f = cljs.core.first(arglist__18154);
      arglist__18154 = cljs.core.next(arglist__18154);
      var c1 = cljs.core.first(arglist__18154);
      arglist__18154 = cljs.core.next(arglist__18154);
      var c2 = cljs.core.first(arglist__18154);
      arglist__18154 = cljs.core.next(arglist__18154);
      var c3 = cljs.core.first(arglist__18154);
      var colls = cljs.core.rest(arglist__18154);
      return G__18153__delegate(f, c1, c2, c3, colls);
    };
    G__18153.cljs$core$IFn$_invoke$arity$variadic = G__18153__delegate;
    return G__18153;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__18156 = m__$1;
          if (G__18156) {
            var bit__4437__auto__ = G__18156.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4437__auto__ || G__18156.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__18156.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__18156);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__18156);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__18157 = sentinel;
            var G__18158 = m__$2;
            var G__18159 = cljs.core.next.call(null, ks__$1);
            sentinel = G__18157;
            m__$1 = G__18158;
            ks__$1 = G__18159;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__18160, v) {
  var vec__18162 = p__18160;
  var k = cljs.core.nth.call(null, vec__18162, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__18162, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__18163, f) {
    var vec__18173 = p__18163;
    var k = cljs.core.nth.call(null, vec__18173, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__18173, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__18164, f, a) {
    var vec__18174 = p__18164;
    var k = cljs.core.nth.call(null, vec__18174, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__18174, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__18165, f, a, b) {
    var vec__18175 = p__18165;
    var k = cljs.core.nth.call(null, vec__18175, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__18175, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__18166, f, a, b, c) {
    var vec__18176 = p__18166;
    var k = cljs.core.nth.call(null, vec__18176, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__18176, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__18178__delegate = function(m, p__18167, f, a, b, c, args) {
      var vec__18177 = p__18167;
      var k = cljs.core.nth.call(null, vec__18177, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__18177, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__18178 = function(m, p__18167, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__18178__delegate.call(this, m, p__18167, f, a, b, c, args);
    };
    G__18178.cljs$lang$maxFixedArity = 6;
    G__18178.cljs$lang$applyTo = function(arglist__18179) {
      var m = cljs.core.first(arglist__18179);
      arglist__18179 = cljs.core.next(arglist__18179);
      var p__18167 = cljs.core.first(arglist__18179);
      arglist__18179 = cljs.core.next(arglist__18179);
      var f = cljs.core.first(arglist__18179);
      arglist__18179 = cljs.core.next(arglist__18179);
      var a = cljs.core.first(arglist__18179);
      arglist__18179 = cljs.core.next(arglist__18179);
      var b = cljs.core.first(arglist__18179);
      arglist__18179 = cljs.core.next(arglist__18179);
      var c = cljs.core.first(arglist__18179);
      var args = cljs.core.rest(arglist__18179);
      return G__18178__delegate(m, p__18167, f, a, b, c, args);
    };
    G__18178.cljs$core$IFn$_invoke$arity$variadic = G__18178__delegate;
    return G__18178;
  }();
  update_in = function(m, p__18167, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__18167, f);
      case 4:
        return update_in__4.call(this, m, p__18167, f, a);
      case 5:
        return update_in__5.call(this, m, p__18167, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__18167, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__18167, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
  };
  var update__4 = function(m, k, f, x) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), x));
  };
  var update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), x, y));
  };
  var update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), x, y, z));
  };
  var update__7 = function() {
    var G__18180__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), x, y, z, more));
    };
    var G__18180 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__18180__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__18180.cljs$lang$maxFixedArity = 6;
    G__18180.cljs$lang$applyTo = function(arglist__18181) {
      var m = cljs.core.first(arglist__18181);
      arglist__18181 = cljs.core.next(arglist__18181);
      var k = cljs.core.first(arglist__18181);
      arglist__18181 = cljs.core.next(arglist__18181);
      var f = cljs.core.first(arglist__18181);
      arglist__18181 = cljs.core.next(arglist__18181);
      var x = cljs.core.first(arglist__18181);
      arglist__18181 = cljs.core.next(arglist__18181);
      var y = cljs.core.first(arglist__18181);
      arglist__18181 = cljs.core.next(arglist__18181);
      var z = cljs.core.first(arglist__18181);
      var more = cljs.core.rest(arglist__18181);
      return G__18180__delegate(m, k, f, x, y, z, more);
    };
    G__18180.cljs$core$IFn$_invoke$arity$variadic = G__18180__delegate;
    return G__18180;
  }();
  update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x);
      case 5:
        return update__5.call(this, m, k, f, x, y);
      case 6:
        return update__6.call(this, m, k, f, x, y, z);
      default:
        return update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 6;
  update.cljs$lang$applyTo = update__7.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$6 = update__6;
  update.cljs$core$IFn$_invoke$arity$variadic = update__7.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__18182 = ll - 5;
      var G__18183 = r;
      ll = G__18182;
      ret = G__18183;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__18184 = cljs.core.pv_aget.call(null, node, 0);
      var G__18185 = level - 5;
      node = G__18184;
      level = G__18185;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__18186 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__18187 = level - 5;
        node = G__18186;
        level = G__18187;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for.call(null, self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count.call(null, v) ? cljs.core.unchecked_array_for.call(null, v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__18189 = j + 1;
              var G__18190 = init__$3;
              j = G__18189;
              init__$2 = G__18190;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__18191 = i + len;
        var G__18192 = init__$2;
        i = G__18191;
        init__$1 = G__18192;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator.call(null, this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count.call(null, other)) {
      var me_iter = cljs.core._iterator.call(null, coll__$1);
      var you_iter = cljs.core._iterator.call(null, other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.call(null, x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential.call(null, coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__18193 = j + 1;
              var G__18194 = init__$3;
              j = G__18193;
              init__$2 = G__18194;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__18195 = i + len;
        var G__18196 = init__$2;
        i = G__18195;
        init__$1 = G__18196;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4643__auto___18197 = len;
    var i_18198 = 0;
    while (true) {
      if (i_18198 < n__4643__auto___18197) {
        new_tail[i_18198] = self__.tail[i_18198];
        var G__18199 = i_18198 + 1;
        i_18198 = G__18199;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__18200 = null;
  var G__18200__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._nth.call(null, coll, k);
  };
  var G__18200__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._nth.call(null, coll, k, not_found);
  };
  G__18200 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18200__2.call(this, self__, k);
      case 3:
        return G__18200__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18200.cljs$core$IFn$_invoke$arity$2 = G__18200__2;
  G__18200.cljs$core$IFn$_invoke$arity$3 = G__18200__3;
  return G__18200;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args18188) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18188)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._nth.call(null, coll, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return cljs.core._nth.call(null, coll, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__18201 = i + 1;
        var G__18202 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__18201;
        out = G__18202;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__18203) {
    var args = cljs.core.seq(arglist__18203);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__4073__auto__ = self__.end;
    var y__4074__auto__ = v_pos + 1;
    return x__4073__auto__ > y__4074__auto__ ? x__4073__auto__ : y__4074__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__18205 = null;
  var G__18205__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._nth.call(null, coll, k);
  };
  var G__18205__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._nth.call(null, coll, k, not_found);
  };
  G__18205 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18205__2.call(this, self__, k);
      case 3:
        return G__18205__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18205.cljs$core$IFn$_invoke$arity$2 = G__18205__2;
  G__18205.cljs$core$IFn$_invoke$arity$3 = G__18205__3;
  return G__18205;
}();
cljs.core.Subvec.prototype.apply = function(self__, args18204) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18204)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._nth.call(null, coll, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return cljs.core._nth.call(null, coll, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__18206 = meta;
      var G__18207 = v.v;
      var G__18208 = v.start + start;
      var G__18209 = v.start + end;
      var G__18210 = __hash;
      meta = G__18206;
      v = G__18207;
      start = G__18208;
      end = G__18209;
      __hash = G__18210;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj18214 = {};
    return obj18214;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__18215 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__18216 = level - 5;
        node = G__18215;
        level = G__18216;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__18218 = null;
  var G__18218__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k);
  };
  var G__18218__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k, not_found);
  };
  G__18218 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18218__2.call(this, self__, k);
      case 3:
        return G__18218__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18218.cljs$core$IFn$_invoke$arity$2 = G__18218__2;
  G__18218.cljs$core$IFn$_invoke$arity$3 = G__18218__3;
  return G__18218;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args18217) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18217)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3761__auto__ = self__.front;
    if (cljs.core.truth_(or__3761__auto__)) {
      return or__3761__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3761__auto__ = self__.rear;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__18219 = i + incr;
        i = G__18219;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__18220 = i + 1;
      var G__18221 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__18220;
      out = G__18221;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj18225 = {};
    return obj18225;
  }();
  var l = ks.length;
  var i_18226 = 0;
  while (true) {
    if (i_18226 < l) {
      var k_18227 = ks[i_18226];
      new_obj[k_18227] = obj[k_18227];
      var G__18228 = i_18226 + 1;
      i_18226 = G__18228;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__18231 = cljs.core.rest.call(null, keys__$1);
        var G__18232 = init__$2;
        keys__$1 = G__18231;
        init__$1 = G__18232;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__18229_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18229_SHARP_, self__.strobj[p1__18229_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__18233 = null;
  var G__18233__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k);
  };
  var G__18233__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k, not_found);
  };
  G__18233 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18233__2.call(this, self__, k);
      case 3:
        return G__18233__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18233.cljs$core$IFn$_invoke$arity$2 = G__18233__2;
  G__18233.cljs$core$IFn$_invoke$arity$3 = G__18233__3;
  return G__18233;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args18230) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18230)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj18235 = {};
  return obj18235;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__18236 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__18236, 0, null);
    var v = cljs.core.nth.call(null, vec__18236, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__18237 = i + 2;
        i = G__18237;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__18238 = i + 2;
        i = G__18238;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__18239 = i + 2;
        i = G__18239;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__18240 = i + 2;
        i = G__18240;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__18241 = i + 2;
        i = G__18241;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_18242 = 0;
  while (true) {
    if (i_18242 < l) {
      narr[i_18242] = arr[i_18242];
      var G__18243 = i_18242 + 1;
      i_18242 = G__18243;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__18245 = cljs.core.seq.call(null, coll);
  var chunk__18246 = null;
  var count__18247 = 0;
  var i__18248 = 0;
  while (true) {
    if (i__18248 < count__18247) {
      var vec__18249 = cljs.core._nth.call(null, chunk__18246, i__18248);
      var k = cljs.core.nth.call(null, vec__18249, 0, null);
      var v = cljs.core.nth.call(null, vec__18249, 1, null);
      f.call(null, v, k);
      var G__18255 = seq__18245;
      var G__18256 = chunk__18246;
      var G__18257 = count__18247;
      var G__18258 = i__18248 + 1;
      seq__18245 = G__18255;
      chunk__18246 = G__18256;
      count__18247 = G__18257;
      i__18248 = G__18258;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__18245);
      if (temp__4126__auto__) {
        var seq__18245__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18245__$1)) {
          var c__4543__auto__ = cljs.core.chunk_first.call(null, seq__18245__$1);
          var G__18259 = cljs.core.chunk_rest.call(null, seq__18245__$1);
          var G__18260 = c__4543__auto__;
          var G__18261 = cljs.core.count.call(null, c__4543__auto__);
          var G__18262 = 0;
          seq__18245 = G__18259;
          chunk__18246 = G__18260;
          count__18247 = G__18261;
          i__18248 = G__18262;
          continue;
        } else {
          var vec__18250 = cljs.core.first.call(null, seq__18245__$1);
          var k = cljs.core.nth.call(null, vec__18250, 0, null);
          var v = cljs.core.nth.call(null, vec__18250, 1, null);
          f.call(null, v, k);
          var G__18263 = cljs.core.next.call(null, seq__18245__$1);
          var G__18264 = null;
          var G__18265 = 0;
          var G__18266 = 0;
          seq__18245 = G__18263;
          chunk__18246 = G__18264;
          count__18247 = G__18265;
          i__18248 = G__18266;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__18267 = i + 2;
        var G__18268 = init__$2;
        i = G__18267;
        init__$1 = G__18268;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__18251 = other;
    if (G__18251) {
      var bit__4430__auto__ = G__18251.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4430__auto__ || G__18251.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === cljs.core._count.call(null, other__$1)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = cljs.core._lookup.call(null, other__$1, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.call(null, self__.arr[i + 1], v)) {
              var G__18269 = i + 2;
              i = G__18269;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map.call(null, coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj18253 = {};
    return obj18253;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__18270 = s + 2;
            var G__18271 = d;
            s = G__18270;
            d = G__18271;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__18272 = s + 2;
            var G__18273 = d + 2;
            s = G__18272;
            d = G__18273;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__18254 = cljs.core.aclone.call(null, self__.arr);
        G__18254[idx + 1] = v;
        return G__18254;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__18274 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__18275 = cljs.core.next.call(null, es);
          ret = G__18274;
          es = G__18275;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__18276 = null;
  var G__18276__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k);
  };
  var G__18276__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k, not_found);
  };
  G__18276 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18276__2.call(this, self__, k);
      case 3:
        return G__18276__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18276.cljs$core$IFn$_invoke$arity$2 = G__18276__2;
  G__18276.cljs$core$IFn$_invoke$arity$3 = G__18276__3;
  return G__18276;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args18244) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18244)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__18277 = i + 2;
        var G__18278 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__18277;
        ret = G__18278;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__18279_18281 = self__.arr;
      G__18279_18281.pop();
      G__18279_18281.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__18280 = o;
      if (G__18280) {
        var bit__4437__auto__ = G__18280.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4437__auto__ || G__18280.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__18280.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__18280);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__18280);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__18282 = cljs.core.next.call(null, es);
          var G__18283 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__18282;
          tcoll__$2 = G__18283;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__18284 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__18285 = i + 2;
      out = G__18284;
      i = G__18285;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__18288 = cljs.core.aclone.call(null, arr);
    G__18288[i] = a;
    return G__18288;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__18289 = cljs.core.aclone.call(null, arr);
    G__18289[i] = a;
    G__18289[j] = b;
    return G__18289;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__18290 = i + 2;
        var G__18291 = init__$2;
        i = G__18290;
        init__$1 = G__18291;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_18292 = 0;
        var j_18293 = 0;
        while (true) {
          if (i_18292 < 32) {
            if ((self__.bitmap >>> i_18292 & 1) === 0) {
              var G__18294 = i_18292 + 1;
              var G__18295 = j_18293;
              i_18292 = G__18294;
              j_18293 = G__18295;
              continue;
            } else {
              nodes[i_18292] = !(self__.arr[j_18293] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_18293]), self__.arr[j_18293], self__.arr[j_18293 + 1], added_leaf_QMARK_) : self__.arr[j_18293 + 1];
              var G__18296 = i_18292 + 1;
              var G__18297 = j_18293 + 2;
              i_18292 = G__18296;
              j_18293 = G__18297;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_18298 = 0;
      var j_18299 = 0;
      while (true) {
        if (i_18298 < 32) {
          if ((self__.bitmap >>> i_18298 & 1) === 0) {
            var G__18300 = i_18298 + 1;
            var G__18301 = j_18299;
            i_18298 = G__18300;
            j_18299 = G__18301;
            continue;
          } else {
            nodes[i_18298] = !(self__.arr[j_18299] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_18299]), self__.arr[j_18299], self__.arr[j_18299 + 1], added_leaf_QMARK_) : self__.arr[j_18299 + 1];
            var G__18302 = i_18298 + 1;
            var G__18303 = j_18299 + 2;
            i_18298 = G__18302;
            j_18299 = G__18303;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__18304 = i + 1;
        var G__18305 = j + 2;
        var G__18306 = bitmap | 1 << i;
        i = G__18304;
        j = G__18305;
        bitmap = G__18306;
        continue;
      } else {
        var G__18307 = i + 1;
        var G__18308 = j;
        var G__18309 = bitmap;
        i = G__18307;
        j = G__18308;
        bitmap = G__18309;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__18310 = i + 1;
          var G__18311 = init__$2;
          i = G__18310;
          init__$1 = G__18311;
          continue;
        }
      } else {
        var G__18312 = i + 1;
        var G__18313 = init__$1;
        i = G__18312;
        init__$1 = G__18313;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__18314 = i + 2;
        i = G__18314;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__18315 = j + 2;
                j = G__18315;
                continue;
              }
            } else {
              var G__18316 = j + 2;
              j = G__18316;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__18317 = j + 1;
              j = G__18317;
              continue;
            }
          } else {
            var G__18318 = j + 1;
            j = G__18318;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__18320 = cljs.core.seq.call(null, coll);
  var chunk__18321 = null;
  var count__18322 = 0;
  var i__18323 = 0;
  while (true) {
    if (i__18323 < count__18322) {
      var vec__18324 = cljs.core._nth.call(null, chunk__18321, i__18323);
      var k = cljs.core.nth.call(null, vec__18324, 0, null);
      var v = cljs.core.nth.call(null, vec__18324, 1, null);
      f.call(null, v, k);
      var G__18328 = seq__18320;
      var G__18329 = chunk__18321;
      var G__18330 = count__18322;
      var G__18331 = i__18323 + 1;
      seq__18320 = G__18328;
      chunk__18321 = G__18329;
      count__18322 = G__18330;
      i__18323 = G__18331;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__18320);
      if (temp__4126__auto__) {
        var seq__18320__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18320__$1)) {
          var c__4543__auto__ = cljs.core.chunk_first.call(null, seq__18320__$1);
          var G__18332 = cljs.core.chunk_rest.call(null, seq__18320__$1);
          var G__18333 = c__4543__auto__;
          var G__18334 = cljs.core.count.call(null, c__4543__auto__);
          var G__18335 = 0;
          seq__18320 = G__18332;
          chunk__18321 = G__18333;
          count__18322 = G__18334;
          i__18323 = G__18335;
          continue;
        } else {
          var vec__18325 = cljs.core.first.call(null, seq__18320__$1);
          var k = cljs.core.nth.call(null, vec__18325, 0, null);
          var v = cljs.core.nth.call(null, vec__18325, 1, null);
          f.call(null, v, k);
          var G__18336 = cljs.core.next.call(null, seq__18320__$1);
          var G__18337 = null;
          var G__18338 = 0;
          var G__18339 = 0;
          seq__18320 = G__18336;
          chunk__18321 = G__18337;
          count__18322 = G__18338;
          i__18323 = G__18339;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj18327 = {};
    return obj18327;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__18340 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__18341 = cljs.core.next.call(null, es);
          ret = G__18340;
          es = G__18341;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__18342 = null;
  var G__18342__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k);
  };
  var G__18342__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k, not_found);
  };
  G__18342 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18342__2.call(this, self__, k);
      case 3:
        return G__18342__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18342.cljs$core$IFn$_invoke$arity$2 = G__18342__2;
  G__18342.cljs$core$IFn$_invoke$arity$3 = G__18342__3;
  return G__18342;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args18319) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18319)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__18343 = i + 1;
      var G__18344 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__18343;
      out = G__18344;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__18345 = o;
      if (G__18345) {
        var bit__4437__auto__ = G__18345.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4437__auto__ || G__18345.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__18345.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__18345);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__18345);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__18346 = cljs.core.next.call(null, es);
          var G__18347 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__18346;
          tcoll__$1 = G__18347;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__18348 = ascending_QMARK_ ? t.left : t.right;
      var G__18349 = cljs.core.conj.call(null, stack__$1, t);
      t = G__18348;
      stack__$1 = G__18349;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._assoc_n.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__18351 = null;
  var G__18351__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return cljs.core._lookup.call(null, node, k);
  };
  var G__18351__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return cljs.core._lookup.call(null, node, k, not_found);
  };
  G__18351 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18351__2.call(this, self__, k);
      case 3:
        return G__18351__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18351.cljs$core$IFn$_invoke$arity$2 = G__18351__2;
  G__18351.cljs$core$IFn$_invoke$arity$3 = G__18351__3;
  return G__18351;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args18350) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18350)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return cljs.core._lookup.call(null, node, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return cljs.core._lookup.call(null, node, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._assoc_n.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__18353 = null;
  var G__18353__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return cljs.core._lookup.call(null, node, k);
  };
  var G__18353__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return cljs.core._lookup.call(null, node, k, not_found);
  };
  G__18353 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18353__2.call(this, self__, k);
      case 3:
        return G__18353__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18353.cljs$core$IFn$_invoke$arity$2 = G__18353__2;
  G__18353.cljs$core$IFn$_invoke$arity$3 = G__18353__3;
  return G__18353;
}();
cljs.core.RedNode.prototype.apply = function(self__, args18352) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18352)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return cljs.core._lookup.call(null, node, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return cljs.core._lookup.call(null, node, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__18355 = cljs.core.seq.call(null, coll);
  var chunk__18356 = null;
  var count__18357 = 0;
  var i__18358 = 0;
  while (true) {
    if (i__18358 < count__18357) {
      var vec__18359 = cljs.core._nth.call(null, chunk__18356, i__18358);
      var k = cljs.core.nth.call(null, vec__18359, 0, null);
      var v = cljs.core.nth.call(null, vec__18359, 1, null);
      f.call(null, v, k);
      var G__18361 = seq__18355;
      var G__18362 = chunk__18356;
      var G__18363 = count__18357;
      var G__18364 = i__18358 + 1;
      seq__18355 = G__18361;
      chunk__18356 = G__18362;
      count__18357 = G__18363;
      i__18358 = G__18364;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__18355);
      if (temp__4126__auto__) {
        var seq__18355__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18355__$1)) {
          var c__4543__auto__ = cljs.core.chunk_first.call(null, seq__18355__$1);
          var G__18365 = cljs.core.chunk_rest.call(null, seq__18355__$1);
          var G__18366 = c__4543__auto__;
          var G__18367 = cljs.core.count.call(null, c__4543__auto__);
          var G__18368 = 0;
          seq__18355 = G__18365;
          chunk__18356 = G__18366;
          count__18357 = G__18367;
          i__18358 = G__18368;
          continue;
        } else {
          var vec__18360 = cljs.core.first.call(null, seq__18355__$1);
          var k = cljs.core.nth.call(null, vec__18360, 0, null);
          var v = cljs.core.nth.call(null, vec__18360, 1, null);
          f.call(null, v, k);
          var G__18369 = cljs.core.next.call(null, seq__18355__$1);
          var G__18370 = null;
          var G__18371 = 0;
          var G__18372 = 0;
          seq__18355 = G__18369;
          chunk__18356 = G__18370;
          count__18357 = G__18371;
          i__18358 = G__18372;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__18373 = t.left;
          t = G__18373;
          continue;
        } else {
          var G__18374 = t.right;
          t = G__18374;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__18375 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__18376 = cljs.core.next.call(null, es);
          ret = G__18375;
          es = G__18376;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__18377 = null;
  var G__18377__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k);
  };
  var G__18377__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k, not_found);
  };
  G__18377 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18377__2.call(this, self__, k);
      case 3:
        return G__18377__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18377.cljs$core$IFn$_invoke$arity$2 = G__18377__2;
  G__18377.cljs$core$IFn$_invoke$arity$3 = G__18377__3;
  return G__18377;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args18354) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18354)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__18378 = cljs.core.conj.call(null, stack, t);
              var G__18379 = t.left;
              stack = G__18378;
              t = G__18379;
              continue;
            } else {
              var G__18380 = stack;
              var G__18381 = t.right;
              stack = G__18380;
              t = G__18381;
              continue;
            }
          } else {
            if (c > 0) {
              var G__18382 = cljs.core.conj.call(null, stack, t);
              var G__18383 = t.right;
              stack = G__18382;
              t = G__18383;
              continue;
            } else {
              var G__18384 = stack;
              var G__18385 = t.left;
              stack = G__18384;
              t = G__18385;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__18386 = cljs.core.nnext.call(null, in$);
        var G__18387 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__18386;
        out = G__18387;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__18388) {
    var keyvals = cljs.core.seq(arglist__18388);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.call(null, cljs.core.array, keyvals), true, false);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__18389) {
    var keyvals = cljs.core.seq(arglist__18389);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj18393 = {};
      return obj18393;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__18394 = cljs.core.nnext.call(null, kvs);
        kvs = G__18394;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__18395) {
    var keyvals = cljs.core.seq(arglist__18395);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__18396 = cljs.core.nnext.call(null, in$);
        var G__18397 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__18396;
        out = G__18397;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__18398) {
    var keyvals = cljs.core.seq(arglist__18398);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__18399 = cljs.core.nnext.call(null, in$);
        var G__18400 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__18399;
        out = G__18400;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__18401) {
    var comparator = cljs.core.first(arglist__18401);
    var keyvals = cljs.core.rest(arglist__18401);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__18402 = self__.mseq;
    if (G__18402) {
      var bit__4437__auto__ = G__18402.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4437__auto__ || G__18402.cljs$core$INext$) {
        return true;
      } else {
        if (!G__18402.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18402);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18402);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__18403 = self__.mseq;
    if (G__18403) {
      var bit__4437__auto__ = G__18403.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4437__auto__ || G__18403.cljs$core$INext$) {
        return true;
      } else {
        if (!G__18403.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18403);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18403);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__18404 = self__.mseq;
    if (G__18404) {
      var bit__4437__auto__ = G__18404.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4437__auto__ || G__18404.cljs$core$INext$) {
        return true;
      } else {
        if (!G__18404.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18404);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18404);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__18405 = self__.mseq;
    if (G__18405) {
      var bit__4437__auto__ = G__18405.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4437__auto__ || G__18405.cljs$core$INext$) {
        return true;
      } else {
        if (!G__18405.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18405);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18405);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__18406_SHARP_, p2__18407_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3761__auto__ = p1__18406_SHARP_;
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__18407_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__18408) {
    var maps = cljs.core.seq(arglist__18408);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3761__auto__ = m1;
            if (cljs.core.truth_(or__3761__auto__)) {
              return or__3761__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__18409) {
    var f = cljs.core.first(arglist__18409);
    var maps = cljs.core.rest(arglist__18409);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__18410 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__18411 = cljs.core.next.call(null, keys);
      ret = G__18410;
      keys = G__18411;
      continue;
    } else {
      return cljs.core.with_meta.call(null, ret, cljs.core.meta.call(null, map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__18414 = cljs.core.seq.call(null, coll);
  var chunk__18415 = null;
  var count__18416 = 0;
  var i__18417 = 0;
  while (true) {
    if (i__18417 < count__18416) {
      var vec__18418 = cljs.core._nth.call(null, chunk__18415, i__18417);
      var k = cljs.core.nth.call(null, vec__18418, 0, null);
      var v = cljs.core.nth.call(null, vec__18418, 1, null);
      f.call(null, v, k);
      var G__18420 = seq__18414;
      var G__18421 = chunk__18415;
      var G__18422 = count__18416;
      var G__18423 = i__18417 + 1;
      seq__18414 = G__18420;
      chunk__18415 = G__18421;
      count__18416 = G__18422;
      i__18417 = G__18423;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__18414);
      if (temp__4126__auto__) {
        var seq__18414__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18414__$1)) {
          var c__4543__auto__ = cljs.core.chunk_first.call(null, seq__18414__$1);
          var G__18424 = cljs.core.chunk_rest.call(null, seq__18414__$1);
          var G__18425 = c__4543__auto__;
          var G__18426 = cljs.core.count.call(null, c__4543__auto__);
          var G__18427 = 0;
          seq__18414 = G__18424;
          chunk__18415 = G__18425;
          count__18416 = G__18426;
          i__18417 = G__18427;
          continue;
        } else {
          var vec__18419 = cljs.core.first.call(null, seq__18414__$1);
          var k = cljs.core.nth.call(null, vec__18419, 0, null);
          var v = cljs.core.nth.call(null, vec__18419, 1, null);
          f.call(null, v, k);
          var G__18428 = cljs.core.next.call(null, seq__18414__$1);
          var G__18429 = null;
          var G__18430 = 0;
          var G__18431 = 0;
          seq__18414 = G__18428;
          chunk__18415 = G__18429;
          count__18416 = G__18430;
          i__18417 = G__18431;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__18412_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__18412_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__18432 = null;
  var G__18432__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k);
  };
  var G__18432__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k, not_found);
  };
  G__18432 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18432__2.call(this, self__, k);
      case 3:
        return G__18432__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18432.cljs$core$IFn$_invoke$arity$2 = G__18432__2;
  G__18432.cljs$core$IFn$_invoke$arity$3 = G__18432__3;
  return G__18432;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args18413) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18413)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__18433 = i + 1;
        var G__18434 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__18433;
        out = G__18434;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__18435 = i + 1;
        var G__18436 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__18435;
        out = G__18436;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__18438 = null;
  var G__18438__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__18438__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__18438 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18438__2.call(this, self__, k);
      case 3:
        return G__18438__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18438.cljs$core$IFn$_invoke$arity$2 = G__18438__2;
  G__18438.cljs$core$IFn$_invoke$arity$3 = G__18438__3;
  return G__18438;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args18437) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18437)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__18441 = cljs.core.seq.call(null, coll);
  var chunk__18442 = null;
  var count__18443 = 0;
  var i__18444 = 0;
  while (true) {
    if (i__18444 < count__18443) {
      var vec__18445 = cljs.core._nth.call(null, chunk__18442, i__18444);
      var k = cljs.core.nth.call(null, vec__18445, 0, null);
      var v = cljs.core.nth.call(null, vec__18445, 1, null);
      f.call(null, v, k);
      var G__18447 = seq__18441;
      var G__18448 = chunk__18442;
      var G__18449 = count__18443;
      var G__18450 = i__18444 + 1;
      seq__18441 = G__18447;
      chunk__18442 = G__18448;
      count__18443 = G__18449;
      i__18444 = G__18450;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__18441);
      if (temp__4126__auto__) {
        var seq__18441__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18441__$1)) {
          var c__4543__auto__ = cljs.core.chunk_first.call(null, seq__18441__$1);
          var G__18451 = cljs.core.chunk_rest.call(null, seq__18441__$1);
          var G__18452 = c__4543__auto__;
          var G__18453 = cljs.core.count.call(null, c__4543__auto__);
          var G__18454 = 0;
          seq__18441 = G__18451;
          chunk__18442 = G__18452;
          count__18443 = G__18453;
          i__18444 = G__18454;
          continue;
        } else {
          var vec__18446 = cljs.core.first.call(null, seq__18441__$1);
          var k = cljs.core.nth.call(null, vec__18446, 0, null);
          var v = cljs.core.nth.call(null, vec__18446, 1, null);
          f.call(null, v, k);
          var G__18455 = cljs.core.next.call(null, seq__18441__$1);
          var G__18456 = null;
          var G__18457 = 0;
          var G__18458 = 0;
          seq__18441 = G__18455;
          chunk__18442 = G__18456;
          count__18443 = G__18457;
          i__18444 = G__18458;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__18439_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__18439_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__18459 = null;
  var G__18459__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k);
  };
  var G__18459__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return cljs.core._lookup.call(null, coll, k, not_found);
  };
  G__18459 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18459__2.call(this, self__, k);
      case 3:
        return G__18459__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18459.cljs$core$IFn$_invoke$arity$2 = G__18459__2;
  G__18459.cljs$core$IFn$_invoke$arity$3 = G__18459__3;
  return G__18459;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args18440) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18440)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return cljs.core._lookup.call(null, coll, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4637__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4637__auto__.length) {
        var G__18460 = i + 1;
        var G__18461 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__18460;
        res = G__18461;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__18462 = cljs.core._next.call(null, in$__$1);
          var G__18463 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__18462;
          out = G__18463;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__18464__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__18464 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__18464__delegate.call(this, keys);
    };
    G__18464.cljs$lang$maxFixedArity = 0;
    G__18464.cljs$lang$applyTo = function(arglist__18465) {
      var keys = cljs.core.seq(arglist__18465);
      return G__18464__delegate(keys);
    };
    G__18464.cljs$core$IFn$_invoke$arity$variadic = G__18464__delegate;
    return G__18464;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__18466) {
    var keys = cljs.core.seq(arglist__18466);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__18467) {
    var comparator = cljs.core.first(arglist__18467);
    var keys = cljs.core.rest(arglist__18467);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__18468_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__18468_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__18468_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__18469_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__18469_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__18469_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__18476, seen__$1) {
        while (true) {
          var vec__18477 = p__18476;
          var f = cljs.core.nth.call(null, vec__18477, 0, null);
          var xs__$1 = vec__18477;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__18478 = cljs.core.rest.call(null, s);
              var G__18479 = seen__$1;
              p__18476 = G__18478;
              seen__$1 = G__18479;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__18480 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__18481 = cljs.core.next.call(null, s__$1);
      ret = G__18480;
      s__$1 = G__18481;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__18483 = x;
    if (G__18483) {
      var bit__4430__auto__ = G__18483.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4430__auto__ || G__18483.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__18484 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__18485 = cljs.core.next.call(null, ks);
      var G__18486 = cljs.core.next.call(null, vs);
      map = G__18484;
      ks = G__18485;
      vs = G__18486;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__18489__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__18487_SHARP_, p2__18488_SHARP_) {
        return max_key.call(null, k, p1__18487_SHARP_, p2__18488_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__18489 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18489__delegate.call(this, k, x, y, more);
    };
    G__18489.cljs$lang$maxFixedArity = 3;
    G__18489.cljs$lang$applyTo = function(arglist__18490) {
      var k = cljs.core.first(arglist__18490);
      arglist__18490 = cljs.core.next(arglist__18490);
      var x = cljs.core.first(arglist__18490);
      arglist__18490 = cljs.core.next(arglist__18490);
      var y = cljs.core.first(arglist__18490);
      var more = cljs.core.rest(arglist__18490);
      return G__18489__delegate(k, x, y, more);
    };
    G__18489.cljs$core$IFn$_invoke$arity$variadic = G__18489__delegate;
    return G__18489;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__18493__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__18491_SHARP_, p2__18492_SHARP_) {
        return min_key.call(null, k, p1__18491_SHARP_, p2__18492_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__18493 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18493__delegate.call(this, k, x, y, more);
    };
    G__18493.cljs$lang$maxFixedArity = 3;
    G__18493.cljs$lang$applyTo = function(arglist__18494) {
      var k = cljs.core.first(arglist__18494);
      arglist__18494 = cljs.core.next(arglist__18494);
      var x = cljs.core.first(arglist__18494);
      arglist__18494 = cljs.core.next(arglist__18494);
      var y = cljs.core.first(arglist__18494);
      var more = cljs.core.rest(arglist__18494);
      return G__18493__delegate(k, x, y, more);
    };
    G__18493.cljs$core$IFn$_invoke$arity$variadic = G__18493__delegate;
    return G__18493;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__18495 = null;
          var G__18495__0 = function() {
            return rf.call(null);
          };
          var G__18495__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return cljs.core.unreduced.call(null, rf.call(null, result, v));
            }();
            return rf.call(null, result__$1);
          };
          var G__18495__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            } else {
              return result;
            }
          };
          G__18495 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18495__0.call(this);
              case 1:
                return G__18495__1.call(this, result);
              case 2:
                return G__18495__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18495.cljs$core$IFn$_invoke$arity$0 = G__18495__0;
          G__18495.cljs$core$IFn$_invoke$arity$1 = G__18495__1;
          G__18495.cljs$core$IFn$_invoke$arity$2 = G__18495__2;
          return G__18495;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__18496 = null;
        var G__18496__0 = function() {
          return rf.call(null);
        };
        var G__18496__1 = function(result) {
          return rf.call(null, result);
        };
        var G__18496__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__18496 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18496__0.call(this);
            case 1:
              return G__18496__1.call(this, result);
            case 2:
              return G__18496__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18496.cljs$core$IFn$_invoke$arity$0 = G__18496__0;
        G__18496.cljs$core$IFn$_invoke$arity$1 = G__18496__1;
        G__18496.cljs$core$IFn$_invoke$arity$2 = G__18496__2;
        return G__18496;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__18499 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__18499, 0, null);
        var s = vec__18499;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__18500 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__18500, 0, null);
      var s = vec__18500;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__18503 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__18503, 0, null);
        var s = vec__18503;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__18504 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__18504, 0, null);
      var s = vec__18504;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_.call(null, ret__$1)) {
        return cljs.core.deref.call(null, ret__$1);
      } else {
        var G__18505 = i + self__.step;
        var G__18506 = ret__$1;
        i = G__18505;
        ret = G__18506;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__18507 = null;
          var G__18507__0 = function() {
            return rf.call(null);
          };
          var G__18507__1 = function(result) {
            return rf.call(null, result);
          };
          var G__18507__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return rf.call(null, result, input);
            } else {
              return result;
            }
          };
          G__18507 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18507__0.call(this);
              case 1:
                return G__18507__1.call(this, result);
              case 2:
                return G__18507__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18507.cljs$core$IFn$_invoke$arity$0 = G__18507__0;
          G__18507.cljs$core$IFn$_invoke$arity$1 = G__18507__1;
          G__18507.cljs$core$IFn$_invoke$arity$2 = G__18507__2;
          return G__18507;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__18509 = null;
          var G__18509__0 = function() {
            return rf.call(null);
          };
          var G__18509__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return cljs.core.unreduced.call(null, rf.call(null, result, v));
            }();
            return rf.call(null, result__$1);
          };
          var G__18509__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = rf.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__18509 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18509__0.call(this);
              case 1:
                return G__18509__1.call(this, result);
              case 2:
                return G__18509__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18509.cljs$core$IFn$_invoke$arity$0 = G__18509__0;
          G__18509.cljs$core$IFn$_invoke$arity$1 = G__18509__1;
          G__18509.cljs$core$IFn$_invoke$arity$2 = G__18509__2;
          return G__18509;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__18508_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__18508_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__18520 = null;
      var G__18520__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__18520__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__18520__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__18520__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__18520__4 = function() {
        var G__18521__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__18521 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18521__delegate.call(this, x, y, z, args);
        };
        G__18521.cljs$lang$maxFixedArity = 3;
        G__18521.cljs$lang$applyTo = function(arglist__18522) {
          var x = cljs.core.first(arglist__18522);
          arglist__18522 = cljs.core.next(arglist__18522);
          var y = cljs.core.first(arglist__18522);
          arglist__18522 = cljs.core.next(arglist__18522);
          var z = cljs.core.first(arglist__18522);
          var args = cljs.core.rest(arglist__18522);
          return G__18521__delegate(x, y, z, args);
        };
        G__18521.cljs$core$IFn$_invoke$arity$variadic = G__18521__delegate;
        return G__18521;
      }();
      G__18520 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18520__0.call(this);
          case 1:
            return G__18520__1.call(this, x);
          case 2:
            return G__18520__2.call(this, x, y);
          case 3:
            return G__18520__3.call(this, x, y, z);
          default:
            return G__18520__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18520.cljs$lang$maxFixedArity = 3;
      G__18520.cljs$lang$applyTo = G__18520__4.cljs$lang$applyTo;
      G__18520.cljs$core$IFn$_invoke$arity$0 = G__18520__0;
      G__18520.cljs$core$IFn$_invoke$arity$1 = G__18520__1;
      G__18520.cljs$core$IFn$_invoke$arity$2 = G__18520__2;
      G__18520.cljs$core$IFn$_invoke$arity$3 = G__18520__3;
      G__18520.cljs$core$IFn$_invoke$arity$variadic = G__18520__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18520;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__18523 = null;
      var G__18523__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__18523__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__18523__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__18523__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__18523__4 = function() {
        var G__18524__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__18524 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18524__delegate.call(this, x, y, z, args);
        };
        G__18524.cljs$lang$maxFixedArity = 3;
        G__18524.cljs$lang$applyTo = function(arglist__18525) {
          var x = cljs.core.first(arglist__18525);
          arglist__18525 = cljs.core.next(arglist__18525);
          var y = cljs.core.first(arglist__18525);
          arglist__18525 = cljs.core.next(arglist__18525);
          var z = cljs.core.first(arglist__18525);
          var args = cljs.core.rest(arglist__18525);
          return G__18524__delegate(x, y, z, args);
        };
        G__18524.cljs$core$IFn$_invoke$arity$variadic = G__18524__delegate;
        return G__18524;
      }();
      G__18523 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18523__0.call(this);
          case 1:
            return G__18523__1.call(this, x);
          case 2:
            return G__18523__2.call(this, x, y);
          case 3:
            return G__18523__3.call(this, x, y, z);
          default:
            return G__18523__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18523.cljs$lang$maxFixedArity = 3;
      G__18523.cljs$lang$applyTo = G__18523__4.cljs$lang$applyTo;
      G__18523.cljs$core$IFn$_invoke$arity$0 = G__18523__0;
      G__18523.cljs$core$IFn$_invoke$arity$1 = G__18523__1;
      G__18523.cljs$core$IFn$_invoke$arity$2 = G__18523__2;
      G__18523.cljs$core$IFn$_invoke$arity$3 = G__18523__3;
      G__18523.cljs$core$IFn$_invoke$arity$variadic = G__18523__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18523;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__18526 = null;
      var G__18526__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__18526__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__18526__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__18526__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__18526__4 = function() {
        var G__18527__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__18527 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18527__delegate.call(this, x, y, z, args);
        };
        G__18527.cljs$lang$maxFixedArity = 3;
        G__18527.cljs$lang$applyTo = function(arglist__18528) {
          var x = cljs.core.first(arglist__18528);
          arglist__18528 = cljs.core.next(arglist__18528);
          var y = cljs.core.first(arglist__18528);
          arglist__18528 = cljs.core.next(arglist__18528);
          var z = cljs.core.first(arglist__18528);
          var args = cljs.core.rest(arglist__18528);
          return G__18527__delegate(x, y, z, args);
        };
        G__18527.cljs$core$IFn$_invoke$arity$variadic = G__18527__delegate;
        return G__18527;
      }();
      G__18526 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18526__0.call(this);
          case 1:
            return G__18526__1.call(this, x);
          case 2:
            return G__18526__2.call(this, x, y);
          case 3:
            return G__18526__3.call(this, x, y, z);
          default:
            return G__18526__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18526.cljs$lang$maxFixedArity = 3;
      G__18526.cljs$lang$applyTo = G__18526__4.cljs$lang$applyTo;
      G__18526.cljs$core$IFn$_invoke$arity$0 = G__18526__0;
      G__18526.cljs$core$IFn$_invoke$arity$1 = G__18526__1;
      G__18526.cljs$core$IFn$_invoke$arity$2 = G__18526__2;
      G__18526.cljs$core$IFn$_invoke$arity$3 = G__18526__3;
      G__18526.cljs$core$IFn$_invoke$arity$variadic = G__18526__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__18526;
    }();
  };
  var juxt__4 = function() {
    var G__18529__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__18530 = null;
          var G__18530__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__18510_SHARP_, p2__18511_SHARP_) {
                return cljs.core.conj.call(null, p1__18510_SHARP_, p2__18511_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__18530__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__18512_SHARP_, p2__18513_SHARP_) {
                return cljs.core.conj.call(null, p1__18512_SHARP_, p2__18513_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__18530__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__18514_SHARP_, p2__18515_SHARP_) {
                return cljs.core.conj.call(null, p1__18514_SHARP_, p2__18515_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__18530__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__18516_SHARP_, p2__18517_SHARP_) {
                return cljs.core.conj.call(null, p1__18516_SHARP_, p2__18517_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__18530__4 = function() {
            var G__18531__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__18518_SHARP_, p2__18519_SHARP_) {
                  return cljs.core.conj.call(null, p1__18518_SHARP_, cljs.core.apply.call(null, p2__18519_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__18531 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__18531__delegate.call(this, x, y, z, args);
            };
            G__18531.cljs$lang$maxFixedArity = 3;
            G__18531.cljs$lang$applyTo = function(arglist__18532) {
              var x = cljs.core.first(arglist__18532);
              arglist__18532 = cljs.core.next(arglist__18532);
              var y = cljs.core.first(arglist__18532);
              arglist__18532 = cljs.core.next(arglist__18532);
              var z = cljs.core.first(arglist__18532);
              var args = cljs.core.rest(arglist__18532);
              return G__18531__delegate(x, y, z, args);
            };
            G__18531.cljs$core$IFn$_invoke$arity$variadic = G__18531__delegate;
            return G__18531;
          }();
          G__18530 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__18530__0.call(this);
              case 1:
                return G__18530__1.call(this, x);
              case 2:
                return G__18530__2.call(this, x, y);
              case 3:
                return G__18530__3.call(this, x, y, z);
              default:
                return G__18530__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18530.cljs$lang$maxFixedArity = 3;
          G__18530.cljs$lang$applyTo = G__18530__4.cljs$lang$applyTo;
          G__18530.cljs$core$IFn$_invoke$arity$0 = G__18530__0;
          G__18530.cljs$core$IFn$_invoke$arity$1 = G__18530__1;
          G__18530.cljs$core$IFn$_invoke$arity$2 = G__18530__2;
          G__18530.cljs$core$IFn$_invoke$arity$3 = G__18530__3;
          G__18530.cljs$core$IFn$_invoke$arity$variadic = G__18530__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__18530;
        }();
      }(fs__$1);
    };
    var G__18529 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18529__delegate.call(this, f, g, h, fs);
    };
    G__18529.cljs$lang$maxFixedArity = 3;
    G__18529.cljs$lang$applyTo = function(arglist__18533) {
      var f = cljs.core.first(arglist__18533);
      arglist__18533 = cljs.core.next(arglist__18533);
      var g = cljs.core.first(arglist__18533);
      arglist__18533 = cljs.core.next(arglist__18533);
      var h = cljs.core.first(arglist__18533);
      var fs = cljs.core.rest(arglist__18533);
      return G__18529__delegate(f, g, h, fs);
    };
    G__18529.cljs$core$IFn$_invoke$arity$variadic = G__18529__delegate;
    return G__18529;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__18534 = cljs.core.next.call(null, coll);
        coll = G__18534;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__18535 = n - 1;
        var G__18536 = cljs.core.next.call(null, coll);
        n = G__18535;
        coll = G__18536;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__18538 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.call(null, vec__18538, 0, null);
    var flags = cljs.core.nth.call(null, vec__18538, 1, null);
    var pattern = cljs.core.nth.call(null, vec__18538, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_18540 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_18541__$1 = cljs.core.next.call(null, coll);
      var n_18542 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_18541__$1 && (n_18542 == null || !(n_18542 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_18541__$1), writer, opts);
          var G__18543 = cljs.core.next.call(null, coll_18541__$1);
          var G__18544 = n_18542 - 1;
          coll_18541__$1 = G__18543;
          n_18542 = G__18544;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_18541__$1) && n_18542 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_18540;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__18549 = cljs.core.seq.call(null, ss);
    var chunk__18550 = null;
    var count__18551 = 0;
    var i__18552 = 0;
    while (true) {
      if (i__18552 < count__18551) {
        var s = cljs.core._nth.call(null, chunk__18550, i__18552);
        cljs.core._write.call(null, writer, s);
        var G__18553 = seq__18549;
        var G__18554 = chunk__18550;
        var G__18555 = count__18551;
        var G__18556 = i__18552 + 1;
        seq__18549 = G__18553;
        chunk__18550 = G__18554;
        count__18551 = G__18555;
        i__18552 = G__18556;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__18549);
        if (temp__4126__auto__) {
          var seq__18549__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18549__$1)) {
            var c__4543__auto__ = cljs.core.chunk_first.call(null, seq__18549__$1);
            var G__18557 = cljs.core.chunk_rest.call(null, seq__18549__$1);
            var G__18558 = c__4543__auto__;
            var G__18559 = cljs.core.count.call(null, c__4543__auto__);
            var G__18560 = 0;
            seq__18549 = G__18557;
            chunk__18550 = G__18558;
            count__18551 = G__18559;
            i__18552 = G__18560;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__18549__$1);
            cljs.core._write.call(null, writer, s);
            var G__18561 = cljs.core.next.call(null, seq__18549__$1);
            var G__18562 = null;
            var G__18563 = 0;
            var G__18564 = 0;
            seq__18549 = G__18561;
            chunk__18550 = G__18562;
            count__18551 = G__18563;
            i__18552 = G__18564;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__18565) {
    var writer = cljs.core.first(arglist__18565);
    var ss = cljs.core.rest(arglist__18565);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj18567 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj18567;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3749__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3749__auto__)) {
          var and__3749__auto____$1 = function() {
            var G__18573 = obj;
            if (G__18573) {
              var bit__4437__auto__ = G__18573.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4437__auto__ || G__18573.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__18573.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__18573);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__18573);
            }
          }();
          if (and__3749__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3749__auto____$1;
          }
        } else {
          return and__3749__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__18574 = obj;
            if (G__18574) {
              var bit__4430__auto__ = G__18574.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4430__auto__ || G__18574.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__18576 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__18576;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__18575 = obj;
                            if (G__18575) {
                              var bit__4437__auto__ = G__18575.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4437__auto__ || G__18575.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__18575.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__18575);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__18575);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__18581 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__18582 = null;
  var count__18583 = 0;
  var i__18584 = 0;
  while (true) {
    if (i__18584 < count__18583) {
      var obj = cljs.core._nth.call(null, chunk__18582, i__18584);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__18585 = seq__18581;
      var G__18586 = chunk__18582;
      var G__18587 = count__18583;
      var G__18588 = i__18584 + 1;
      seq__18581 = G__18585;
      chunk__18582 = G__18586;
      count__18583 = G__18587;
      i__18584 = G__18588;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__18581);
      if (temp__4126__auto__) {
        var seq__18581__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18581__$1)) {
          var c__4543__auto__ = cljs.core.chunk_first.call(null, seq__18581__$1);
          var G__18589 = cljs.core.chunk_rest.call(null, seq__18581__$1);
          var G__18590 = c__4543__auto__;
          var G__18591 = cljs.core.count.call(null, c__4543__auto__);
          var G__18592 = 0;
          seq__18581 = G__18589;
          chunk__18582 = G__18590;
          count__18583 = G__18591;
          i__18584 = G__18592;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__18581__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__18593 = cljs.core.next.call(null, seq__18581__$1);
          var G__18594 = null;
          var G__18595 = 0;
          var G__18596 = 0;
          seq__18581 = G__18593;
          chunk__18582 = G__18594;
          count__18583 = G__18595;
          i__18584 = G__18596;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__18597) {
    var objs = cljs.core.seq(arglist__18597);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__18598) {
    var objs = cljs.core.seq(arglist__18598);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__18599) {
    var objs = cljs.core.seq(arglist__18599);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__18600) {
    var objs = cljs.core.seq(arglist__18600);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__18601) {
    var objs = cljs.core.seq(arglist__18601);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__18602) {
    var objs = cljs.core.seq(arglist__18602);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__18603) {
    var objs = cljs.core.seq(arglist__18603);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__18604) {
    var objs = cljs.core.seq(arglist__18604);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__18605) {
    var iref = cljs.core.first(arglist__18605);
    arglist__18605 = cljs.core.next(arglist__18605);
    var f = cljs.core.first(arglist__18605);
    var args = cljs.core.rest(arglist__18605);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__18606_SHARP_, p2__18607_SHARP_) {
    var ret = rf.call(null, p1__18606_SHARP_, p2__18607_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced.call(null, rf);
  return function(rf1) {
    return function() {
      var G__18608 = null;
      var G__18608__0 = function() {
        return rf.call(null);
      };
      var G__18608__1 = function(result) {
        return rf.call(null, result);
      };
      var G__18608__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__18608 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__18608__0.call(this);
          case 1:
            return G__18608__1.call(this, result);
          case 2:
            return G__18608__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18608.cljs$core$IFn$_invoke$arity$0 = G__18608__0;
      G__18608.cljs$core$IFn$_invoke$arity$1 = G__18608__1;
      G__18608.cljs$core$IFn$_invoke$arity$2 = G__18608__2;
      return G__18608;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__18609 = null;
          var G__18609__0 = function() {
            return rf.call(null);
          };
          var G__18609__1 = function(result) {
            return rf.call(null, result);
          };
          var G__18609__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__18609 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__18609__0.call(this);
              case 1:
                return G__18609__1.call(this, result);
              case 2:
                return G__18609__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18609.cljs$core$IFn$_invoke$arity$0 = G__18609__0;
          G__18609.cljs$core$IFn$_invoke$arity$1 = G__18609__1;
          G__18609.cljs$core$IFn$_invoke$arity$2 = G__18609__2;
          return G__18609;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4734__auto__ = this;
  return cljs.core.es6_iterator.call(null, this__4734__auto__);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__18611_SHARP_, p2__18610_SHARP_) {
    return proc.call(null, p2__18610_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj18613 = {};
  return obj18613;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3749__auto__ = x;
    if (and__3749__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4400__auto__ = x == null ? null : x;
    return function() {
      var or__3761__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3749__auto__ = x;
    if (and__3749__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4400__auto__ = x == null ? null : x;
    return function() {
      var or__3761__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__18615 = k;
    if (G__18615) {
      var bit__4437__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3761__auto__ = bit__4437__auto__;
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          return G__18615.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__18615.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__18615);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__18615);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__18629 = x;
      if (G__18629) {
        var bit__4437__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3761__auto__ = bit__4437__auto__;
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return G__18629.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__18629.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__18629);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__18629);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj18631 = {};
              return obj18631;
            }();
            var seq__18632_18642 = cljs.core.seq.call(null, x);
            var chunk__18633_18643 = null;
            var count__18634_18644 = 0;
            var i__18635_18645 = 0;
            while (true) {
              if (i__18635_18645 < count__18634_18644) {
                var vec__18636_18646 = cljs.core._nth.call(null, chunk__18633_18643, i__18635_18645);
                var k_18647 = cljs.core.nth.call(null, vec__18636_18646, 0, null);
                var v_18648 = cljs.core.nth.call(null, vec__18636_18646, 1, null);
                m[cljs.core.key__GT_js.call(null, k_18647)] = clj__GT_js.call(null, v_18648);
                var G__18649 = seq__18632_18642;
                var G__18650 = chunk__18633_18643;
                var G__18651 = count__18634_18644;
                var G__18652 = i__18635_18645 + 1;
                seq__18632_18642 = G__18649;
                chunk__18633_18643 = G__18650;
                count__18634_18644 = G__18651;
                i__18635_18645 = G__18652;
                continue;
              } else {
                var temp__4126__auto___18653 = cljs.core.seq.call(null, seq__18632_18642);
                if (temp__4126__auto___18653) {
                  var seq__18632_18654__$1 = temp__4126__auto___18653;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__18632_18654__$1)) {
                    var c__4543__auto___18655 = cljs.core.chunk_first.call(null, seq__18632_18654__$1);
                    var G__18656 = cljs.core.chunk_rest.call(null, seq__18632_18654__$1);
                    var G__18657 = c__4543__auto___18655;
                    var G__18658 = cljs.core.count.call(null, c__4543__auto___18655);
                    var G__18659 = 0;
                    seq__18632_18642 = G__18656;
                    chunk__18633_18643 = G__18657;
                    count__18634_18644 = G__18658;
                    i__18635_18645 = G__18659;
                    continue;
                  } else {
                    var vec__18637_18660 = cljs.core.first.call(null, seq__18632_18654__$1);
                    var k_18661 = cljs.core.nth.call(null, vec__18637_18660, 0, null);
                    var v_18662 = cljs.core.nth.call(null, vec__18637_18660, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_18661)] = clj__GT_js.call(null, v_18662);
                    var G__18663 = cljs.core.next.call(null, seq__18632_18654__$1);
                    var G__18664 = null;
                    var G__18665 = 0;
                    var G__18666 = 0;
                    seq__18632_18642 = G__18663;
                    chunk__18633_18643 = G__18664;
                    count__18634_18644 = G__18665;
                    i__18635_18645 = G__18666;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__18638_18667 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__18639_18668 = null;
              var count__18640_18669 = 0;
              var i__18641_18670 = 0;
              while (true) {
                if (i__18641_18670 < count__18640_18669) {
                  var x_18671__$1 = cljs.core._nth.call(null, chunk__18639_18668, i__18641_18670);
                  arr.push(x_18671__$1);
                  var G__18672 = seq__18638_18667;
                  var G__18673 = chunk__18639_18668;
                  var G__18674 = count__18640_18669;
                  var G__18675 = i__18641_18670 + 1;
                  seq__18638_18667 = G__18672;
                  chunk__18639_18668 = G__18673;
                  count__18640_18669 = G__18674;
                  i__18641_18670 = G__18675;
                  continue;
                } else {
                  var temp__4126__auto___18676 = cljs.core.seq.call(null, seq__18638_18667);
                  if (temp__4126__auto___18676) {
                    var seq__18638_18677__$1 = temp__4126__auto___18676;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__18638_18677__$1)) {
                      var c__4543__auto___18678 = cljs.core.chunk_first.call(null, seq__18638_18677__$1);
                      var G__18679 = cljs.core.chunk_rest.call(null, seq__18638_18677__$1);
                      var G__18680 = c__4543__auto___18678;
                      var G__18681 = cljs.core.count.call(null, c__4543__auto___18678);
                      var G__18682 = 0;
                      seq__18638_18667 = G__18679;
                      chunk__18639_18668 = G__18680;
                      count__18640_18669 = G__18681;
                      i__18641_18670 = G__18682;
                      continue;
                    } else {
                      var x_18683__$1 = cljs.core.first.call(null, seq__18638_18677__$1);
                      arr.push(x_18683__$1);
                      var G__18684 = cljs.core.next.call(null, seq__18638_18677__$1);
                      var G__18685 = null;
                      var G__18686 = 0;
                      var G__18687 = 0;
                      seq__18638_18667 = G__18684;
                      chunk__18639_18668 = G__18685;
                      count__18640_18669 = G__18686;
                      i__18641_18670 = G__18687;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj18689 = {};
  return obj18689;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3749__auto__ = x;
    if (and__3749__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4400__auto__ = x == null ? null : x;
    return function() {
      var or__3761__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__18712__delegate = function(x, opts) {
      var map__18701 = opts;
      var map__18701__$1 = cljs.core.seq_QMARK_.call(null, map__18701) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18701) : map__18701;
      var keywordize_keys = cljs.core.get.call(null, map__18701__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__18701, map__18701__$1, keywordize_keys, keyfn) {
        return function thisfn(x__$1) {
          if (function() {
            var G__18707 = x__$1;
            if (G__18707) {
              var bit__4437__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__3761__auto__ = bit__4437__auto__;
                if (cljs.core.truth_(or__3761__auto__)) {
                  return or__3761__auto__;
                } else {
                  return G__18707.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__18707.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__18707);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__18707);
            }
          }()) {
            return cljs.core._js__GT_clj.call(null, x__$1, cljs.core.apply.call(null, cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_.call(null, x__$1)) {
              return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (x__$1 instanceof Array) {
                  return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (cljs.core.type.call(null, x__$1) === Object) {
                    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4512__auto__ = function(map__18701, map__18701__$1, keywordize_keys, keyfn) {
                        return function iter__18708(s__18709) {
                          return new cljs.core.LazySeq(null, function(map__18701, map__18701__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__18709__$1 = s__18709;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq.call(null, s__18709__$1);
                                if (temp__4126__auto__) {
                                  var s__18709__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__18709__$2)) {
                                    var c__4510__auto__ = cljs.core.chunk_first.call(null, s__18709__$2);
                                    var size__4511__auto__ = cljs.core.count.call(null, c__4510__auto__);
                                    var b__18711 = cljs.core.chunk_buffer.call(null, size__4511__auto__);
                                    if (function() {
                                      var i__18710 = 0;
                                      while (true) {
                                        if (i__18710 < size__4511__auto__) {
                                          var k = cljs.core._nth.call(null, c__4510__auto__, i__18710);
                                          cljs.core.chunk_append.call(null, b__18711, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                          var G__18713 = i__18710 + 1;
                                          i__18710 = G__18713;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18711), iter__18708.call(null, cljs.core.chunk_rest.call(null, s__18709__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18711), null);
                                    }
                                  } else {
                                    var k = cljs.core.first.call(null, s__18709__$2);
                                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__18708.call(null, cljs.core.rest.call(null, s__18709__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__18701, map__18701__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__18701, map__18701__$1, keywordize_keys, keyfn);
                      return iter__4512__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__18701, map__18701__$1, keywordize_keys, keyfn);
      return f.call(null, x);
    };
    var G__18712 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__18712__delegate.call(this, x, opts);
    };
    G__18712.cljs$lang$maxFixedArity = 1;
    G__18712.cljs$lang$applyTo = function(arglist__18714) {
      var x = cljs.core.first(arglist__18714);
      var opts = cljs.core.rest(arglist__18714);
      return G__18712__delegate(x, opts);
    };
    G__18712.cljs$core$IFn$_invoke$arity$variadic = G__18712__delegate;
    return G__18712;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__18715__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__18715 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__18715__delegate.call(this, args);
      };
      G__18715.cljs$lang$maxFixedArity = 0;
      G__18715.cljs$lang$applyTo = function(arglist__18716) {
        var args = cljs.core.seq(arglist__18716);
        return G__18715__delegate(args);
      };
      G__18715.cljs$core$IFn$_invoke$arity$variadic = G__18715__delegate;
      return G__18715;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__18717 = ret;
        f = G__18717;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__18718__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__18718 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__18718__delegate.call(this, f, args);
    };
    G__18718.cljs$lang$maxFixedArity = 1;
    G__18718.cljs$lang$applyTo = function(arglist__18719) {
      var f = cljs.core.first(arglist__18719);
      var args = cljs.core.rest(arglist__18719);
      return G__18718__delegate(f, args);
    };
    G__18718.cljs$core$IFn$_invoke$arity$variadic = G__18718__delegate;
    return G__18718;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__18720) {
    var f = cljs.core.first(arglist__18720);
    var args = cljs.core.rest(arglist__18720);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3761__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3761__auto__) {
      return or__3761__auto__;
    } else {
      var or__3761__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3761__auto____$1) {
        return or__3761__auto____$1;
      } else {
        var and__3749__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3749__auto__) {
          var and__3749__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3749__auto____$1) {
            var and__3749__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3749__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__18721 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__18722 = i + 1;
                  ret = G__18721;
                  i = G__18722;
                  continue;
                }
                break;
              }
            } else {
              return and__3749__auto____$2;
            }
          } else {
            return and__3749__auto____$1;
          }
        } else {
          return and__3749__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3761__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3761__auto__)) {
      return or__3761__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__18723_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__18723_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__18723_SHARP_), cljs.core.second.call(null, p1__18723_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__18724_SHARP_, p2__18725_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__18724_SHARP_, p2__18725_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3761__auto__ = cljs.core.truth_(function() {
    var and__3749__auto__ = xprefs;
    if (cljs.core.truth_(and__3749__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3749__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3761__auto__)) {
    return or__3761__auto__;
  } else {
    var or__3761__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__18726 = cljs.core.rest.call(null, ps);
          ps = G__18726;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3761__auto____$1)) {
      return or__3761__auto____$1;
    } else {
      var or__3761__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__18727 = cljs.core.rest.call(null, ps);
            ps = G__18727;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3761__auto____$2)) {
        return or__3761__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3761__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3761__auto__)) {
    return or__3761__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__18730) {
    var vec__18731 = p__18730;
    var k = cljs.core.nth.call(null, vec__18731, 0, null);
    var _ = cljs.core.nth.call(null, vec__18731, 1, null);
    var e = vec__18731;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3761__auto__ = be == null;
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj18733 = {};
  return obj18733;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3749__auto__ = mf;
    if (and__3749__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4400__auto__ = mf == null ? null : mf;
    return function() {
      var or__3761__auto__ = cljs.core._reset[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._reset["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3749__auto__ = mf;
    if (and__3749__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4400__auto__ = mf == null ? null : mf;
    return function() {
      var or__3761__auto__ = cljs.core._add_method[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._add_method["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3749__auto__ = mf;
    if (and__3749__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4400__auto__ = mf == null ? null : mf;
    return function() {
      var or__3761__auto__ = cljs.core._remove_method[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._remove_method["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3749__auto__ = mf;
    if (and__3749__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4400__auto__ = mf == null ? null : mf;
    return function() {
      var or__3761__auto__ = cljs.core._prefer_method[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3749__auto__ = mf;
    if (and__3749__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4400__auto__ = mf == null ? null : mf;
    return function() {
      var or__3761__auto__ = cljs.core._get_method[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._get_method["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3749__auto__ = mf;
    if (and__3749__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4400__auto__ = mf == null ? null : mf;
    return function() {
      var or__3761__auto__ = cljs.core._methods[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._methods["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3749__auto__ = mf;
    if (and__3749__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4400__auto__ = mf == null ? null : mf;
    return function() {
      var or__3761__auto__ = cljs.core._prefers[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core._prefers["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name.call(null, self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace.call(null, self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__18735 = null;
  var G__18735__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null);
  };
  var G__18735__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__18735__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__18735__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__18735__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__18735__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__18735__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__18735__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__18735__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__18735__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__18735__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__18735__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__18735__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__18735__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__18735__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__18735__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__18735__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__18735__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__18735__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__18735__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__18735__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__18735__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__18735 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__18735__1.call(this, self__);
      case 2:
        return G__18735__2.call(this, self__, a);
      case 3:
        return G__18735__3.call(this, self__, a, b);
      case 4:
        return G__18735__4.call(this, self__, a, b, c);
      case 5:
        return G__18735__5.call(this, self__, a, b, c, d);
      case 6:
        return G__18735__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__18735__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__18735__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__18735__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__18735__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__18735__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__18735__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__18735__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__18735__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__18735__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__18735__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__18735__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__18735__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__18735__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__18735__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__18735__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__18735__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18735.cljs$core$IFn$_invoke$arity$1 = G__18735__1;
  G__18735.cljs$core$IFn$_invoke$arity$2 = G__18735__2;
  G__18735.cljs$core$IFn$_invoke$arity$3 = G__18735__3;
  G__18735.cljs$core$IFn$_invoke$arity$4 = G__18735__4;
  G__18735.cljs$core$IFn$_invoke$arity$5 = G__18735__5;
  G__18735.cljs$core$IFn$_invoke$arity$6 = G__18735__6;
  G__18735.cljs$core$IFn$_invoke$arity$7 = G__18735__7;
  G__18735.cljs$core$IFn$_invoke$arity$8 = G__18735__8;
  G__18735.cljs$core$IFn$_invoke$arity$9 = G__18735__9;
  G__18735.cljs$core$IFn$_invoke$arity$10 = G__18735__10;
  G__18735.cljs$core$IFn$_invoke$arity$11 = G__18735__11;
  G__18735.cljs$core$IFn$_invoke$arity$12 = G__18735__12;
  G__18735.cljs$core$IFn$_invoke$arity$13 = G__18735__13;
  G__18735.cljs$core$IFn$_invoke$arity$14 = G__18735__14;
  G__18735.cljs$core$IFn$_invoke$arity$15 = G__18735__15;
  G__18735.cljs$core$IFn$_invoke$arity$16 = G__18735__16;
  G__18735.cljs$core$IFn$_invoke$arity$17 = G__18735__17;
  G__18735.cljs$core$IFn$_invoke$arity$18 = G__18735__18;
  G__18735.cljs$core$IFn$_invoke$arity$19 = G__18735__19;
  G__18735.cljs$core$IFn$_invoke$arity$20 = G__18735__20;
  G__18735.cljs$core$IFn$_invoke$arity$21 = G__18735__21;
  G__18735.cljs$core$IFn$_invoke$arity$22 = G__18735__22;
  return G__18735;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args18734) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18734)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return cljs.core._equiv.call(null, this$, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("goog.history.EventType");
goog.history.EventType = {NAVIGATE:"navigate"};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.history.Event");
goog.require("goog.events.Event");
goog.require("goog.history.EventType");
goog.history.Event = function(token, isNavigation) {
  goog.events.Event.call(this, goog.history.EventType.NAVIGATE);
  this.token = token;
  this.isNavigation = isNavigation;
};
goog.inherits(goog.history.Event, goog.events.Event);
goog.provide("goog.labs.userAgent.device");
goog.require("goog.labs.userAgent.util");
goog.labs.userAgent.device.isMobile = function() {
  return!goog.labs.userAgent.device.isTablet() && (goog.labs.userAgent.util.matchUserAgent("iPod") || goog.labs.userAgent.util.matchUserAgent("iPhone") || goog.labs.userAgent.util.matchUserAgent("Android") || goog.labs.userAgent.util.matchUserAgent("IEMobile"));
};
goog.labs.userAgent.device.isTablet = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Mobile") || goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.device.isDesktop = function() {
  return!goog.labs.userAgent.device.isMobile() && !goog.labs.userAgent.device.isTablet();
};
goog.provide("goog.memoize");
goog.memoize = function(f, opt_serializer) {
  var serializer = opt_serializer || goog.memoize.simpleSerializer;
  return function() {
    if (goog.memoize.ENABLE_MEMOIZE) {
      var thisOrGlobal = this || goog.global;
      var cache = thisOrGlobal[goog.memoize.CACHE_PROPERTY_] || (thisOrGlobal[goog.memoize.CACHE_PROPERTY_] = {});
      var key = serializer(goog.getUid(f), arguments);
      return cache.hasOwnProperty(key) ? cache[key] : cache[key] = f.apply(this, arguments);
    } else {
      return f.apply(this, arguments);
    }
  };
};
goog.define("goog.memoize.ENABLE_MEMOIZE", true);
goog.memoize.clearCache = function(cacheOwner) {
  cacheOwner[goog.memoize.CACHE_PROPERTY_] = {};
};
goog.memoize.CACHE_PROPERTY_ = "closure_memoize_cache_";
goog.memoize.simpleSerializer = function(functionUid, args) {
  var context = [functionUid];
  for (var i = args.length - 1;i >= 0;--i) {
    context.push(typeof args[i], args[i]);
  }
  return context.join("\x0B");
};
goog.provide("goog.History");
goog.provide("goog.History.Event");
goog.provide("goog.History.EventType");
goog.require("goog.Timer");
goog.require("goog.dom");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.history.Event");
goog.require("goog.history.EventType");
goog.require("goog.labs.userAgent.device");
goog.require("goog.memoize");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.History = function(opt_invisible, opt_blankPageUrl, opt_input, opt_iframe) {
  goog.events.EventTarget.call(this);
  if (opt_invisible && !opt_blankPageUrl) {
    throw Error("Can't use invisible history without providing a blank page.");
  }
  var input;
  if (opt_input) {
    input = opt_input;
  } else {
    var inputId = "history_state" + goog.History.historyCount_;
    document.write(goog.string.subs(goog.History.INPUT_TEMPLATE_, inputId, inputId));
    input = goog.dom.getElement(inputId);
  }
  this.hiddenInput_ = (input);
  this.window_ = opt_input ? goog.dom.getWindow(goog.dom.getOwnerDocument(opt_input)) : window;
  this.iframeSrc_ = opt_blankPageUrl;
  if (goog.userAgent.IE && !opt_blankPageUrl) {
    this.iframeSrc_ = window.location.protocol == "https" ? "https:///" : 'javascript:""';
  }
  this.timer_ = new goog.Timer(goog.History.PollingType.NORMAL);
  this.registerDisposable(this.timer_);
  this.userVisible_ = !opt_invisible;
  this.eventHandler_ = new goog.events.EventHandler(this);
  if (opt_invisible || goog.History.LEGACY_IE) {
    var iframe;
    if (opt_iframe) {
      iframe = opt_iframe;
    } else {
      var iframeId = "history_iframe" + goog.History.historyCount_;
      var srcAttribute = this.iframeSrc_ ? 'src\x3d"' + goog.string.htmlEscape(this.iframeSrc_) + '"' : "";
      document.write(goog.string.subs(goog.History.IFRAME_TEMPLATE_, iframeId, srcAttribute));
      iframe = goog.dom.getElement(iframeId);
    }
    this.iframe_ = (iframe);
    this.unsetIframe_ = true;
  }
  if (goog.History.LEGACY_IE) {
    this.eventHandler_.listen(this.window_, goog.events.EventType.LOAD, this.onDocumentLoaded);
    this.documentLoaded = false;
    this.shouldEnable_ = false;
  }
  if (this.userVisible_) {
    this.setHash_(this.getToken(), true);
  } else {
    this.setIframeToken_(this.hiddenInput_.value);
  }
  goog.History.historyCount_++;
};
goog.inherits(goog.History, goog.events.EventTarget);
goog.History.prototype.enabled_ = false;
goog.History.prototype.longerPolling_ = false;
goog.History.prototype.lastToken_ = null;
goog.History.isOnHashChangeSupported = goog.memoize(function() {
  return goog.userAgent.IE ? document.documentMode >= 8 : "onhashchange" in goog.global;
});
goog.History.LEGACY_IE = goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8);
goog.History.HASH_ALWAYS_REQUIRED = goog.History.LEGACY_IE;
goog.History.prototype.lockedToken_ = null;
goog.History.prototype.disposeInternal = function() {
  goog.History.superClass_.disposeInternal.call(this);
  this.eventHandler_.dispose();
  this.setEnabled(false);
};
goog.History.prototype.setEnabled = function(enable) {
  if (enable == this.enabled_) {
    return;
  }
  if (goog.History.LEGACY_IE && !this.documentLoaded) {
    this.shouldEnable_ = enable;
    return;
  }
  if (enable) {
    if (goog.userAgent.OPERA) {
      this.eventHandler_.listen(this.window_.document, goog.History.INPUT_EVENTS_, this.operaDefibrillator_);
    } else {
      if (goog.userAgent.GECKO) {
        this.eventHandler_.listen(this.window_, "pageshow", this.onShow_);
      }
    }
    if (goog.History.isOnHashChangeSupported() && this.userVisible_) {
      this.eventHandler_.listen(this.window_, goog.events.EventType.HASHCHANGE, this.onHashChange_);
      this.enabled_ = true;
      this.dispatchEvent(new goog.history.Event(this.getToken(), false));
    } else {
      if (!(goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) || this.documentLoaded) {
        this.eventHandler_.listen(this.timer_, goog.Timer.TICK, goog.bind(this.check_, this, true));
        this.enabled_ = true;
        if (!goog.History.LEGACY_IE) {
          this.lastToken_ = this.getToken();
          this.dispatchEvent(new goog.history.Event(this.getToken(), false));
        }
        this.timer_.start();
      }
    }
  } else {
    this.enabled_ = false;
    this.eventHandler_.removeAll();
    this.timer_.stop();
  }
};
goog.History.prototype.onDocumentLoaded = function() {
  this.documentLoaded = true;
  if (this.hiddenInput_.value) {
    this.setIframeToken_(this.hiddenInput_.value, true);
  }
  this.setEnabled(this.shouldEnable_);
};
goog.History.prototype.onShow_ = function(e) {
  if (e.getBrowserEvent()["persisted"]) {
    this.setEnabled(false);
    this.setEnabled(true);
  }
};
goog.History.prototype.onHashChange_ = function(e) {
  var hash = this.getLocationFragment_(this.window_);
  if (hash != this.lastToken_) {
    this.update_(hash, true);
  }
};
goog.History.prototype.getToken = function() {
  if (this.lockedToken_ != null) {
    return this.lockedToken_;
  } else {
    if (this.userVisible_) {
      return this.getLocationFragment_(this.window_);
    } else {
      return this.getIframeToken_() || "";
    }
  }
};
goog.History.prototype.setToken = function(token, opt_title) {
  this.setHistoryState_(token, false, opt_title);
};
goog.History.prototype.replaceToken = function(token, opt_title) {
  this.setHistoryState_(token, true, opt_title);
};
goog.History.prototype.getLocationFragment_ = function(win) {
  var href = win.location.href;
  var index = href.indexOf("#");
  return index < 0 ? "" : href.substring(index + 1);
};
goog.History.prototype.setHistoryState_ = function(token, replace, opt_title) {
  if (this.getToken() != token) {
    if (this.userVisible_) {
      this.setHash_(token, replace);
      if (!goog.History.isOnHashChangeSupported()) {
        if (goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) {
          this.setIframeToken_(token, replace, opt_title);
        }
      }
      if (this.enabled_) {
        this.check_(false);
      }
    } else {
      this.setIframeToken_(token, replace);
      this.lockedToken_ = this.lastToken_ = this.hiddenInput_.value = token;
      this.dispatchEvent(new goog.history.Event(token, false));
    }
  }
};
goog.History.prototype.setHash_ = function(token, opt_replace) {
  var loc = this.window_.location;
  var url = loc.href.split("#")[0];
  var hasHash = goog.string.contains(loc.href, "#");
  if (goog.History.HASH_ALWAYS_REQUIRED || hasHash || token) {
    url += "#" + token;
  }
  if (url != loc.href) {
    if (opt_replace) {
      loc.replace(url);
    } else {
      loc.href = url;
    }
  }
};
goog.History.prototype.setIframeToken_ = function(token, opt_replace, opt_title) {
  if (this.unsetIframe_ || token != this.getIframeToken_()) {
    this.unsetIframe_ = false;
    token = goog.string.urlEncode(token);
    if (goog.userAgent.IE) {
      var doc = goog.dom.getFrameContentDocument(this.iframe_);
      doc.open("text/html", opt_replace ? "replace" : undefined);
      doc.write(goog.string.subs(goog.History.IFRAME_SOURCE_TEMPLATE_, goog.string.htmlEscape((opt_title || this.window_.document.title)), token));
      doc.close();
    } else {
      var url = this.iframeSrc_ + "#" + token;
      var contentWindow = this.iframe_.contentWindow;
      if (contentWindow) {
        if (opt_replace) {
          contentWindow.location.replace(url);
        } else {
          contentWindow.location.href = url;
        }
      }
    }
  }
};
goog.History.prototype.getIframeToken_ = function() {
  if (goog.userAgent.IE) {
    var doc = goog.dom.getFrameContentDocument(this.iframe_);
    return doc.body ? goog.string.urlDecode(doc.body.innerHTML) : null;
  } else {
    var contentWindow = this.iframe_.contentWindow;
    if (contentWindow) {
      var hash;
      try {
        hash = goog.string.urlDecode(this.getLocationFragment_(contentWindow));
      } catch (e) {
        if (!this.longerPolling_) {
          this.setLongerPolling_(true);
        }
        return null;
      }
      if (this.longerPolling_) {
        this.setLongerPolling_(false);
      }
      return hash || null;
    } else {
      return null;
    }
  }
};
goog.History.prototype.check_ = function(isNavigation) {
  if (this.userVisible_) {
    var hash = this.getLocationFragment_(this.window_);
    if (hash != this.lastToken_) {
      this.update_(hash, isNavigation);
    }
  }
  if (!this.userVisible_ || goog.History.LEGACY_IE) {
    var token = this.getIframeToken_() || "";
    if (this.lockedToken_ == null || token == this.lockedToken_) {
      this.lockedToken_ = null;
      if (token != this.lastToken_) {
        this.update_(token, isNavigation);
      }
    }
  }
};
goog.History.prototype.update_ = function(token, isNavigation) {
  this.lastToken_ = this.hiddenInput_.value = token;
  if (this.userVisible_) {
    if (goog.History.LEGACY_IE) {
      this.setIframeToken_(token);
    }
    this.setHash_(token);
  } else {
    this.setIframeToken_(token);
  }
  this.dispatchEvent(new goog.history.Event(this.getToken(), isNavigation));
};
goog.History.prototype.setLongerPolling_ = function(longerPolling) {
  if (this.longerPolling_ != longerPolling) {
    this.timer_.setInterval(longerPolling ? goog.History.PollingType.LONG : goog.History.PollingType.NORMAL);
  }
  this.longerPolling_ = longerPolling;
};
goog.History.prototype.operaDefibrillator_ = function() {
  this.timer_.stop();
  this.timer_.start();
};
goog.History.INPUT_EVENTS_ = [goog.events.EventType.MOUSEDOWN, goog.events.EventType.KEYDOWN, goog.events.EventType.MOUSEMOVE];
goog.History.IFRAME_SOURCE_TEMPLATE_ = "\x3ctitle\x3e%s\x3c/title\x3e\x3cbody\x3e%s\x3c/body\x3e";
goog.History.IFRAME_TEMPLATE_ = '\x3ciframe id\x3d"%s" style\x3d"display:none" %s\x3e\x3c/iframe\x3e';
goog.History.INPUT_TEMPLATE_ = '\x3cinput type\x3d"text" name\x3d"%s" id\x3d"%s" style\x3d"display:none"\x3e';
goog.History.historyCount_ = 0;
goog.History.PollingType = {NORMAL:150, LONG:1E4};
goog.History.EventType = goog.history.EventType;
goog.History.Event = goog.history.Event;
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__22321 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__22321;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__22325 = cljs.core._EQ_;
    var expr__22326 = limit;
    if (cljs.core.truth_(pred__22325.call(null, 1, expr__22326))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__22325.call(null, 2, expr__22326))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__22328 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__22329 = limit__$1 - 1;
            var G__22330 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__22328;
            limit__$1 = G__22329;
            parts = G__22330;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__22331 = index - 1;
        index = G__22331;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___22332 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___22332)) {
        var replacement_22333 = temp__4124__auto___22332;
        buffer.append([cljs.core.str(replacement_22333)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__22334 = index + 1;
      index = G__22334;
      continue;
    }
    break;
  }
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      return outer.call(null, form);
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__23013) {
    var vec__23014 = p__23013;
    var k = cljs.core.nth.call(null, vec__23014, 0, null);
    var v = cljs.core.nth.call(null, vec__23014, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__23017) {
    var vec__23018 = p__23017;
    var k = cljs.core.nth.call(null, vec__23018, 0, null);
    var v = cljs.core.nth.call(null, vec__23018, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("secretary.core");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("clojure.string");
goog.require("clojure.string");
secretary.core.IRouteMatches = function() {
  var obj22932 = {};
  return obj22932;
}();
secretary.core.route_matches = function route_matches(this$, route) {
  if (function() {
    var and__3749__auto__ = this$;
    if (and__3749__auto__) {
      return this$.secretary$core$IRouteMatches$route_matches$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return this$.secretary$core$IRouteMatches$route_matches$arity$2(this$, route);
  } else {
    var x__4400__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3761__auto__ = secretary.core.route_matches[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = secretary.core.route_matches["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRouteMatches.route-matches", this$);
        }
      }
    }().call(null, this$, route);
  }
};
secretary.core.IRouteValue = function() {
  var obj22934 = {};
  return obj22934;
}();
secretary.core.route_value = function route_value(this$) {
  if (function() {
    var and__3749__auto__ = this$;
    if (and__3749__auto__) {
      return this$.secretary$core$IRouteValue$route_value$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return this$.secretary$core$IRouteValue$route_value$arity$1(this$);
  } else {
    var x__4400__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3761__auto__ = secretary.core.route_value[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = secretary.core.route_value["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRouteValue.route-value", this$);
        }
      }
    }().call(null, this$);
  }
};
secretary.core.IRenderRoute = function() {
  var obj22936 = {};
  return obj22936;
}();
secretary.core.render_route = function() {
  var render_route = null;
  var render_route__1 = function(this$) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.secretary$core$IRenderRoute$render_route$arity$1;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.secretary$core$IRenderRoute$render_route$arity$1(this$);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = secretary.core.render_route[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = secretary.core.render_route["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IRenderRoute.render-route", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var render_route__2 = function(this$, params) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.secretary$core$IRenderRoute$render_route$arity$2;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.secretary$core$IRenderRoute$render_route$arity$2(this$, params);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = secretary.core.render_route[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = secretary.core.render_route["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IRenderRoute.render-route", this$);
          }
        }
      }().call(null, this$, params);
    }
  };
  render_route = function(this$, params) {
    switch(arguments.length) {
      case 1:
        return render_route__1.call(this, this$);
      case 2:
        return render_route__2.call(this, this$, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  render_route.cljs$core$IFn$_invoke$arity$1 = render_route__1;
  render_route.cljs$core$IFn$_invoke$arity$2 = render_route__2;
  return render_route;
}();
secretary.core._STAR_config_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), ""], null));
secretary.core.get_config = function get_config(path) {
  var path__$1 = cljs.core.sequential_QMARK_.call(null, path) ? path : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null);
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, secretary.core._STAR_config_STAR_), path__$1);
};
secretary.core.set_config_BANG_ = function set_config_BANG_(path, val) {
  var path__$1 = cljs.core.sequential_QMARK_.call(null, path) ? path : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null);
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_config_STAR_, cljs.core.assoc_in, path__$1, val);
};
secretary.core.encode = encodeURIComponent;
secretary.core.encode_pair = function() {
  var method_table__4653__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4654__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4655__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4656__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4657__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn(cljs.core.symbol.call(null, "secretary.core", "encode-pair"), function(method_table__4653__auto__, prefer_table__4654__auto__, method_cache__4655__auto__, cached_hierarchy__4656__auto__, hierarchy__4657__auto__) {
    return function(p__22937) {
      var vec__22938 = p__22937;
      var k = cljs.core.nth.call(null, vec__22938, 0, null);
      var v = cljs.core.nth.call(null, vec__22938, 1, null);
      if (cljs.core.sequential_QMARK_.call(null, v) || cljs.core.set_QMARK_.call(null, v)) {
        return new cljs.core.Keyword("secretary.core", "sequential", "secretary.core/sequential", -347187207);
      } else {
        if (function() {
          var or__3761__auto__ = cljs.core.map_QMARK_.call(null, v);
          if (or__3761__auto__) {
            return or__3761__auto__;
          } else {
            var G__22940 = v;
            if (G__22940) {
              var bit__4437__auto__ = G__22940.cljs$lang$protocol_mask$partition0$ & 67108864;
              if (bit__4437__auto__ || G__22940.cljs$core$IRecord$) {
                return true;
              } else {
                if (!G__22940.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__22940);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__22940);
            }
          }
        }()) {
          return new cljs.core.Keyword("secretary.core", "map", "secretary.core/map", -31086646);
        } else {
          return null;
        }
      }
    };
  }(method_table__4653__auto__, prefer_table__4654__auto__, method_cache__4655__auto__, cached_hierarchy__4656__auto__, hierarchy__4657__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4657__auto__, method_table__4653__auto__, prefer_table__4654__auto__, method_cache__4655__auto__, cached_hierarchy__4656__auto__);
}();
secretary.core.key_index = function() {
  var key_index = null;
  var key_index__1 = function(k) {
    return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("[]")].join("");
  };
  var key_index__2 = function(k, index) {
    return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("["), cljs.core.str(index), cljs.core.str("]")].join("");
  };
  key_index = function(k, index) {
    switch(arguments.length) {
      case 1:
        return key_index__1.call(this, k);
      case 2:
        return key_index__2.call(this, k, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  key_index.cljs$core$IFn$_invoke$arity$1 = key_index__1;
  key_index.cljs$core$IFn$_invoke$arity$2 = key_index__2;
  return key_index;
}();
cljs.core._add_method.call(null, secretary.core.encode_pair, new cljs.core.Keyword("secretary.core", "sequential", "secretary.core/sequential", -347187207), function(p__22941) {
  var vec__22942 = p__22941;
  var k = cljs.core.nth.call(null, vec__22942, 0, null);
  var v = cljs.core.nth.call(null, vec__22942, 1, null);
  var encoded = cljs.core.map_indexed.call(null, function(vec__22942, k, v) {
    return function(i, x) {
      var pair = cljs.core.coll_QMARK_.call(null, x) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [secretary.core.key_index.call(null, k, i), x], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [secretary.core.key_index.call(null, k), x], null);
      return secretary.core.encode_pair.call(null, pair);
    };
  }(vec__22942, k, v), v);
  return clojure.string.join.call(null, "\x26", encoded);
});
cljs.core._add_method.call(null, secretary.core.encode_pair, new cljs.core.Keyword("secretary.core", "map", "secretary.core/map", -31086646), function(p__22943) {
  var vec__22944 = p__22943;
  var k = cljs.core.nth.call(null, vec__22944, 0, null);
  var v = cljs.core.nth.call(null, vec__22944, 1, null);
  var encoded = cljs.core.map.call(null, function(vec__22944, k, v) {
    return function(p__22945) {
      var vec__22946 = p__22945;
      var ik = cljs.core.nth.call(null, vec__22946, 0, null);
      var iv = cljs.core.nth.call(null, vec__22946, 1, null);
      return secretary.core.encode_pair.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [secretary.core.key_index.call(null, k, cljs.core.name.call(null, ik)), iv], null));
    };
  }(vec__22944, k, v), v);
  return clojure.string.join.call(null, "\x26", encoded);
});
cljs.core._add_method.call(null, secretary.core.encode_pair, new cljs.core.Keyword(null, "default", "default", -1987822328), function(p__22947) {
  var vec__22948 = p__22947;
  var k = cljs.core.nth.call(null, vec__22948, 0, null);
  var v = cljs.core.nth.call(null, vec__22948, 1, null);
  return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("\x3d"), cljs.core.str(secretary.core.encode.call(null, [cljs.core.str(v)].join("")))].join("");
});
secretary.core.encode_query_params = function encode_query_params(query_params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, secretary.core.encode_pair, query_params));
};
secretary.core.encode_uri = function encode_uri(uri) {
  return clojure.string.join.call(null, "/", cljs.core.map.call(null, secretary.core.encode, clojure.string.split.call(null, uri, /\//)));
};
secretary.core.decode = decodeURIComponent;
secretary.core.parse_path = function parse_path(path) {
  var index_re = /\[([^\]]*)\]*/;
  var parts = cljs.core.re_seq.call(null, index_re, path);
  return cljs.core.map.call(null, function(index_re, parts) {
    return function(p__22951) {
      var vec__22952 = p__22951;
      var _ = cljs.core.nth.call(null, vec__22952, 0, null);
      var part = cljs.core.nth.call(null, vec__22952, 1, null);
      if (cljs.core.empty_QMARK_.call(null, part)) {
        return 0;
      } else {
        if (cljs.core.truth_(cljs.core.re_matches.call(null, /\d+/, part))) {
          return parseInt(part);
        } else {
          return part;
        }
      }
    };
  }(index_re, parts), parts);
};
secretary.core.key_parse = function key_parse(k) {
  var re = /([^\[\]]+)((?:\[[^\]]*\])*)?/;
  var vec__22954 = cljs.core.re_matches.call(null, re, k);
  var _ = cljs.core.nth.call(null, vec__22954, 0, null);
  var key = cljs.core.nth.call(null, vec__22954, 1, null);
  var path = cljs.core.nth.call(null, vec__22954, 2, null);
  var parsed_path = cljs.core.truth_(path) ? secretary.core.parse_path.call(null, path) : null;
  return cljs.core.cons.call(null, key, parsed_path);
};
secretary.core.assoc_in_query_params = function assoc_in_query_params(m, path, v) {
  var heads = function(xs) {
    return cljs.core.map_indexed.call(null, function(i, _) {
      return cljs.core.take.call(null, i + 1, xs);
    }, xs);
  };
  var hs = heads.call(null, path);
  var m__$1 = cljs.core.reduce.call(null, function(heads, hs) {
    return function(m__$1, h) {
      if (typeof cljs.core.last.call(null, h) === "number" && !cljs.core.vector_QMARK_.call(null, cljs.core.get_in.call(null, m__$1, cljs.core.butlast.call(null, h)))) {
        return cljs.core.assoc_in.call(null, m__$1, cljs.core.butlast.call(null, h), cljs.core.PersistentVector.EMPTY);
      } else {
        return m__$1;
      }
    };
  }(heads, hs), m, hs);
  if (cljs.core.last.call(null, path) === 0) {
    return cljs.core.update_in.call(null, m__$1, cljs.core.butlast.call(null, path), cljs.core.conj, v);
  } else {
    return cljs.core.assoc_in.call(null, m__$1, path, v);
  }
};
secretary.core.decode_query_params = function decode_query_params(query_string) {
  var parts = clojure.string.split.call(null, query_string, /&/);
  var params = cljs.core.reduce.call(null, function(parts) {
    return function(m, part) {
      var vec__22956 = clojure.string.split.call(null, part, /=/, 2);
      var k = cljs.core.nth.call(null, vec__22956, 0, null);
      var v = cljs.core.nth.call(null, vec__22956, 1, null);
      return secretary.core.assoc_in_query_params.call(null, m, secretary.core.key_parse.call(null, k), secretary.core.decode.call(null, v));
    };
  }(parts), cljs.core.PersistentArrayMap.EMPTY, parts);
  var params__$1 = clojure.walk.keywordize_keys.call(null, params);
  return params__$1;
};
secretary.core.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var ms = cljs.core.re_matches.call(null, re, s);
  if (cljs.core.truth_(ms)) {
    if (cljs.core.sequential_QMARK_.call(null, ms)) {
      return ms;
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ms, ms], null);
    }
  } else {
    return null;
  }
};
secretary.core.re_escape_chars = cljs.core.set.call(null, "\\.*+|?()[]{}$^");
secretary.core.re_escape = function re_escape(s) {
  return cljs.core.reduce.call(null, function(s__$1, c) {
    if (cljs.core.truth_(secretary.core.re_escape_chars.call(null, c))) {
      return[cljs.core.str(s__$1), cljs.core.str("\\"), cljs.core.str(c)].join("");
    } else {
      return[cljs.core.str(s__$1), cljs.core.str(c)].join("");
    }
  }, "", s);
};
secretary.core.lex_STAR_ = function lex_STAR_(s, clauses) {
  return cljs.core.some.call(null, function(p__22960) {
    var vec__22961 = p__22960;
    var re = cljs.core.nth.call(null, vec__22961, 0, null);
    var action = cljs.core.nth.call(null, vec__22961, 1, null);
    var temp__4126__auto__ = cljs.core.re_find.call(null, re, s);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__22962 = temp__4126__auto__;
      var m = cljs.core.nth.call(null, vec__22962, 0, null);
      var c = cljs.core.nth.call(null, vec__22962, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, s, cljs.core.count.call(null, m)), action.call(null, c)], null);
    } else {
      return null;
    }
  }, clauses);
};
secretary.core.lex_route = function lex_route(s, clauses) {
  var s__$1 = s;
  var pattern = "";
  var params = cljs.core.PersistentVector.EMPTY;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      var vec__22965 = secretary.core.lex_STAR_.call(null, s__$1, clauses);
      var s__$2 = cljs.core.nth.call(null, vec__22965, 0, null);
      var vec__22966 = cljs.core.nth.call(null, vec__22965, 1, null);
      var r = cljs.core.nth.call(null, vec__22966, 0, null);
      var p = cljs.core.nth.call(null, vec__22966, 1, null);
      var G__22967 = s__$2;
      var G__22968 = [cljs.core.str(pattern), cljs.core.str(r)].join("");
      var G__22969 = cljs.core.conj.call(null, params, p);
      s__$1 = G__22967;
      pattern = G__22968;
      params = G__22969;
      continue;
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(pattern), cljs.core.str("$")].join("")), cljs.core.remove.call(null, cljs.core.nil_QMARK_, params)], null);
    }
    break;
  }
};
secretary.core.compile_route = function compile_route(orig_route) {
  var clauses = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/^\*([^\s.:*\/]*)/, function(v) {
    var r = "(.*?)";
    var p = cljs.core.seq.call(null, v) ? cljs.core.keyword.call(null, v) : new cljs.core.Keyword(null, "*", "*", -1294732318);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, p], null);
  }], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/^\:([^\s.:*\/]+)/, function(v) {
    var r = "([^,;?/]+)";
    var p = cljs.core.keyword.call(null, v);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, p], null);
  }], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/^([^:*]+)/, function(v) {
    var r = secretary.core.re_escape.call(null, v);
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [r], null);
  }], null)], null);
  var vec__22975 = secretary.core.lex_route.call(null, orig_route, clauses);
  var re = cljs.core.nth.call(null, vec__22975, 0, null);
  var params = cljs.core.nth.call(null, vec__22975, 1, null);
  if (typeof secretary.core.t22976 !== "undefined") {
  } else {
    secretary.core.t22976 = function(params, re, vec__22975, clauses, orig_route, compile_route, meta22977) {
      this.params = params;
      this.re = re;
      this.vec__22975 = vec__22975;
      this.clauses = clauses;
      this.orig_route = orig_route;
      this.compile_route = compile_route;
      this.meta22977 = meta22977;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    secretary.core.t22976.prototype.secretary$core$IRouteMatches$ = true;
    secretary.core.t22976.prototype.secretary$core$IRouteMatches$route_matches$arity$2 = function(clauses, vec__22975, re, params) {
      return function(_, route) {
        var self__ = this;
        var ___$1 = this;
        var temp__4126__auto__ = secretary.core.re_matches_STAR_.call(null, self__.re, route);
        if (cljs.core.truth_(temp__4126__auto__)) {
          var vec__22979 = temp__4126__auto__;
          var ___$2 = cljs.core.nth.call(null, vec__22979, 0, null);
          var ms = cljs.core.nthnext.call(null, vec__22979, 1);
          return cljs.core.merge_with.call(null, cljs.core.vector, cljs.core.PersistentArrayMap.EMPTY, cljs.core.partition.call(null, 2, cljs.core.interleave.call(null, self__.params, cljs.core.map.call(null, secretary.core.decode, ms))));
        } else {
          return null;
        }
      };
    }(clauses, vec__22975, re, params);
    secretary.core.t22976.prototype.secretary$core$IRouteValue$ = true;
    secretary.core.t22976.prototype.secretary$core$IRouteValue$route_value$arity$1 = function(clauses, vec__22975, re, params) {
      return function(this$) {
        var self__ = this;
        var this$__$1 = this;
        return self__.orig_route;
      };
    }(clauses, vec__22975, re, params);
    secretary.core.t22976.prototype.cljs$core$IMeta$_meta$arity$1 = function(clauses, vec__22975, re, params) {
      return function(_22978) {
        var self__ = this;
        var _22978__$1 = this;
        return self__.meta22977;
      };
    }(clauses, vec__22975, re, params);
    secretary.core.t22976.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(clauses, vec__22975, re, params) {
      return function(_22978, meta22977__$1) {
        var self__ = this;
        var _22978__$1 = this;
        return new secretary.core.t22976(self__.params, self__.re, self__.vec__22975, self__.clauses, self__.orig_route, self__.compile_route, meta22977__$1);
      };
    }(clauses, vec__22975, re, params);
    secretary.core.t22976.cljs$lang$type = true;
    secretary.core.t22976.cljs$lang$ctorStr = "secretary.core/t22976";
    secretary.core.t22976.cljs$lang$ctorPrWriter = function(clauses, vec__22975, re, params) {
      return function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
        return cljs.core._write.call(null, writer__4344__auto__, "secretary.core/t22976");
      };
    }(clauses, vec__22975, re, params);
    secretary.core.__GT_t22976 = function(clauses, vec__22975, re, params) {
      return function __GT_t22976(params__$1, re__$1, vec__22975__$1, clauses__$1, orig_route__$1, compile_route__$1, meta22977) {
        return new secretary.core.t22976(params__$1, re__$1, vec__22975__$1, clauses__$1, orig_route__$1, compile_route__$1, meta22977);
      };
    }(clauses, vec__22975, re, params);
  }
  return new secretary.core.t22976(params, re, vec__22975, clauses, orig_route, compile_route, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 41, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 252, new cljs.core.Keyword(null, "column", "column", 2078222095), 4, new cljs.core.Keyword(null, "line", "line", 212345235), 243, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/secretary/core.cljs"], 
  null));
};
secretary.core.render_route_STAR_ = function() {
  var render_route_STAR___delegate = function(obj, args) {
    if (function() {
      var G__22981 = obj;
      if (G__22981) {
        var bit__4437__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3761__auto__ = bit__4437__auto__;
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return G__22981.secretary$core$IRenderRoute$;
          }
        }())) {
          return true;
        } else {
          if (!G__22981.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, secretary.core.IRenderRoute, G__22981);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, secretary.core.IRenderRoute, G__22981);
      }
    }()) {
      return cljs.core.apply.call(null, secretary.core.render_route, obj, args);
    } else {
      return null;
    }
  };
  var render_route_STAR_ = function(obj, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return render_route_STAR___delegate.call(this, obj, args);
  };
  render_route_STAR_.cljs$lang$maxFixedArity = 1;
  render_route_STAR_.cljs$lang$applyTo = function(arglist__22982) {
    var obj = cljs.core.first(arglist__22982);
    var args = cljs.core.rest(arglist__22982);
    return render_route_STAR___delegate(obj, args);
  };
  render_route_STAR_.cljs$core$IFn$_invoke$arity$variadic = render_route_STAR___delegate;
  return render_route_STAR_;
}();
secretary.core._STAR_routes_STAR_ = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
secretary.core.add_route_BANG_ = function add_route_BANG_(obj, action) {
  var obj__$1 = typeof obj === "string" ? secretary.core.compile_route.call(null, obj) : obj;
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_routes_STAR_, cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [obj__$1, action], null));
};
secretary.core.remove_route_BANG_ = function remove_route_BANG_(obj) {
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_routes_STAR_, function(rs) {
    return cljs.core.filterv.call(null, function(p__22985) {
      var vec__22986 = p__22985;
      var x = cljs.core.nth.call(null, vec__22986, 0, null);
      var _ = cljs.core.nth.call(null, vec__22986, 1, null);
      return cljs.core.not_EQ_.call(null, x, obj);
    }, rs);
  });
};
secretary.core.reset_routes_BANG_ = function reset_routes_BANG_() {
  return cljs.core.reset_BANG_.call(null, secretary.core._STAR_routes_STAR_, cljs.core.PersistentVector.EMPTY);
};
secretary.core.locate_route = function locate_route(route) {
  return cljs.core.some.call(null, function(p__22989) {
    var vec__22990 = p__22989;
    var compiled_route = cljs.core.nth.call(null, vec__22990, 0, null);
    var action = cljs.core.nth.call(null, vec__22990, 1, null);
    var temp__4126__auto__ = secretary.core.route_matches.call(null, compiled_route, route);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var params = temp__4126__auto__;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "action", "action", -811238024), action, new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "route", "route", 329891309), compiled_route], null);
    } else {
      return null;
    }
  }, cljs.core.deref.call(null, secretary.core._STAR_routes_STAR_));
};
secretary.core.locate_route_value = function locate_route_value(uri) {
  return secretary.core.route_value.call(null, (new cljs.core.Keyword(null, "route", "route", 329891309)).cljs$core$IFn$_invoke$arity$1(secretary.core.locate_route.call(null, uri)));
};
secretary.core.prefix = function prefix() {
  return[cljs.core.str(secretary.core.get_config.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465)], null)))].join("");
};
secretary.core.uri_without_prefix = function uri_without_prefix(uri) {
  return clojure.string.replace.call(null, uri, cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(secretary.core.prefix.call(null))].join("")), "");
};
secretary.core.uri_with_leading_slash = function uri_with_leading_slash(uri) {
  if (cljs.core._EQ_.call(null, "/", cljs.core.first.call(null, uri))) {
    return uri;
  } else {
    return[cljs.core.str("/"), cljs.core.str(uri)].join("");
  }
};
secretary.core.dispatch_BANG_ = function dispatch_BANG_(uri) {
  var vec__22993 = clojure.string.split.call(null, secretary.core.uri_without_prefix.call(null, uri), /\?/);
  var uri_path = cljs.core.nth.call(null, vec__22993, 0, null);
  var query_string = cljs.core.nth.call(null, vec__22993, 1, null);
  var uri_path__$1 = secretary.core.uri_with_leading_slash.call(null, uri_path);
  var query_params = cljs.core.truth_(query_string) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534), secretary.core.decode_query_params.call(null, query_string)], null) : null;
  var map__22994 = secretary.core.locate_route.call(null, uri_path__$1);
  var map__22994__$1 = cljs.core.seq_QMARK_.call(null, map__22994) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22994) : map__22994;
  var params = cljs.core.get.call(null, map__22994__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var action = cljs.core.get.call(null, map__22994__$1, new cljs.core.Keyword(null, "action", "action", -811238024));
  var action__$1 = function() {
    var or__3761__auto__ = action;
    if (cljs.core.truth_(or__3761__auto__)) {
      return or__3761__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  var params__$1 = cljs.core.merge.call(null, params, query_params);
  return action__$1.call(null, params__$1);
};
secretary.core.invalid_params = function invalid_params(params, validations) {
  return cljs.core.reduce.call(null, function(m, p__22997) {
    var vec__22998 = p__22997;
    var key = cljs.core.nth.call(null, vec__22998, 0, null);
    var validation = cljs.core.nth.call(null, vec__22998, 1, null);
    var value = cljs.core.get.call(null, params, key);
    if (cljs.core.truth_(cljs.core.re_matches.call(null, validation, value))) {
      return m;
    } else {
      return cljs.core.assoc.call(null, m, key, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [value, validation], null));
    }
  }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.partition.call(null, 2, validations));
};
secretary.core.params_valid_QMARK_ = function params_valid_QMARK_(params, validations) {
  return cljs.core.empty_QMARK_.call(null, secretary.core.invalid_params.call(null, params, validations));
};
cljs.core.PersistentVector.prototype.secretary$core$IRouteMatches$ = true;
cljs.core.PersistentVector.prototype.secretary$core$IRouteMatches$route_matches$arity$2 = function(p__22999, route) {
  var vec__23000 = p__22999;
  var route_string = cljs.core.nth.call(null, vec__23000, 0, null);
  var validations = cljs.core.nthnext.call(null, vec__23000, 1);
  var vec__23001 = this;
  var route_string__$1 = cljs.core.nth.call(null, vec__23001, 0, null);
  var validations__$1 = cljs.core.nthnext.call(null, vec__23001, 1);
  var params = secretary.core.route_matches.call(null, secretary.core.compile_route.call(null, route_string__$1), route);
  if (secretary.core.params_valid_QMARK_.call(null, params, validations__$1)) {
    return params;
  } else {
    return null;
  }
};
RegExp.prototype.secretary$core$IRouteMatches$ = true;
RegExp.prototype.secretary$core$IRouteMatches$route_matches$arity$2 = function(this$, route) {
  var this$__$1 = this;
  var temp__4126__auto__ = secretary.core.re_matches_STAR_.call(null, this$__$1, route);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var vec__23002 = temp__4126__auto__;
    var _ = cljs.core.nth.call(null, vec__23002, 0, null);
    var ms = cljs.core.nthnext.call(null, vec__23002, 1);
    return cljs.core.vec.call(null, ms);
  } else {
    return null;
  }
};
secretary.core.IRouteMatches["string"] = true;
secretary.core.route_matches["string"] = function(this$, route) {
  return secretary.core.route_matches.call(null, secretary.core.compile_route.call(null, this$), route);
};
cljs.core.PersistentVector.prototype.secretary$core$IRouteValue$ = true;
cljs.core.PersistentVector.prototype.secretary$core$IRouteValue$route_value$arity$1 = function(p__23003) {
  var vec__23004 = p__23003;
  var route_string = cljs.core.nth.call(null, vec__23004, 0, null);
  var validations = cljs.core.nthnext.call(null, vec__23004, 1);
  var vec__23005 = this;
  var route_string__$1 = cljs.core.nth.call(null, vec__23005, 0, null);
  var validations__$1 = cljs.core.nthnext.call(null, vec__23005, 1);
  return cljs.core.vec.call(null, cljs.core.cons.call(null, secretary.core.route_value.call(null, route_string__$1), validations__$1));
};
RegExp.prototype.secretary$core$IRouteValue$ = true;
RegExp.prototype.secretary$core$IRouteValue$route_value$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
secretary.core.IRouteValue["string"] = true;
secretary.core.route_value["string"] = function(this$) {
  return secretary.core.route_value.call(null, secretary.core.compile_route.call(null, this$));
};
cljs.core.PersistentVector.prototype.secretary$core$IRenderRoute$ = true;
cljs.core.PersistentVector.prototype.secretary$core$IRenderRoute$render_route$arity$1 = function(this$) {
  var this$__$1 = this;
  return secretary.core.render_route.call(null, this$__$1, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.PersistentVector.prototype.secretary$core$IRenderRoute$render_route$arity$2 = function(p__23006, params) {
  var vec__23007 = p__23006;
  var route_string = cljs.core.nth.call(null, vec__23007, 0, null);
  var validations = cljs.core.nthnext.call(null, vec__23007, 1);
  var vec__23008 = this;
  var route_string__$1 = cljs.core.nth.call(null, vec__23008, 0, null);
  var validations__$1 = cljs.core.nthnext.call(null, vec__23008, 1);
  var invalid = secretary.core.invalid_params.call(null, params, validations__$1);
  if (cljs.core.empty_QMARK_.call(null, invalid)) {
    return secretary.core.render_route.call(null, route_string__$1, params);
  } else {
    throw cljs.core.ex_info.call(null, "Could not build route: invalid params", invalid);
  }
};
secretary.core.IRenderRoute["string"] = true;
secretary.core.render_route["string"] = function() {
  var G__23010 = null;
  var G__23010__1 = function(this$) {
    return secretary.core.render_route.call(null, this$, cljs.core.PersistentArrayMap.EMPTY);
  };
  var G__23010__2 = function(this$, params) {
    var map__23009 = params;
    var map__23009__$1 = cljs.core.seq_QMARK_.call(null, map__23009) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23009) : map__23009;
    var m = map__23009__$1;
    var query_params = cljs.core.get.call(null, map__23009__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    var a = cljs.core.atom.call(null, m);
    var path = this$.replace(new RegExp(":[^\\s.:*/]+|\\*[^\\s.:*/]*", "g"), function(map__23009, map__23009__$1, m, query_params, a) {
      return function($1) {
        var lookup = cljs.core.keyword.call(null, cljs.core._EQ_.call(null, $1, "*") ? $1 : cljs.core.subs.call(null, $1, 1));
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, a), lookup);
        var replacement = cljs.core.sequential_QMARK_.call(null, v) ? function() {
          cljs.core.swap_BANG_.call(null, a, cljs.core.assoc, lookup, cljs.core.next.call(null, v));
          return secretary.core.encode_uri.call(null, cljs.core.first.call(null, v));
        }() : cljs.core.truth_(v) ? secretary.core.encode_uri.call(null, v) : $1;
        return replacement;
      };
    }(map__23009, map__23009__$1, m, query_params, a));
    var path__$1 = [cljs.core.str(secretary.core.get_config.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465)], null))), cljs.core.str(path)].join("");
    var temp__4124__auto__ = function() {
      var and__3749__auto__ = query_params;
      if (cljs.core.truth_(and__3749__auto__)) {
        return secretary.core.encode_query_params.call(null, query_params);
      } else {
        return and__3749__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var query_string = temp__4124__auto__;
      return[cljs.core.str(path__$1), cljs.core.str("?"), cljs.core.str(query_string)].join("");
    } else {
      return path__$1;
    }
  };
  G__23010 = function(this$, params) {
    switch(arguments.length) {
      case 1:
        return G__23010__1.call(this, this$);
      case 2:
        return G__23010__2.call(this, this$, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23010.cljs$core$IFn$_invoke$arity$1 = G__23010__1;
  G__23010.cljs$core$IFn$_invoke$arity$2 = G__23010__2;
  return G__23010;
}();
goog.provide("logging_dashboard.routes");
goog.require("cljs.core");
goog.require("goog.History");
goog.require("secretary.core");
goog.require("secretary.core");
goog.require("goog.history.EventType");
goog.require("goog.history.EventType");
goog.require("goog.events");
goog.require("goog.events");
logging_dashboard.routes.application = document.getElementById("application");
logging_dashboard.routes.set_html_BANG_ = function set_html_BANG_(el, content) {
  return el["innerHTML"] = content;
};
secretary.core.set_config_BANG_.call(null, new cljs.core.Keyword(null, "prefix", "prefix", -265908465), "#");
var action__6542__auto___17466 = function(params__6543__auto__) {
  if (cljs.core.map_QMARK_.call(null, params__6543__auto__)) {
    var map__17464 = params__6543__auto__;
    var map__17464__$1 = cljs.core.seq_QMARK_.call(null, map__17464) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17464) : map__17464;
    return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, "\x3ch1\x3eOMG! YOU'RE HOME!\x3c/h1\x3e");
  } else {
    if (cljs.core.vector_QMARK_.call(null, params__6543__auto__)) {
      var vec__17465 = params__6543__auto__;
      return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, "\x3ch1\x3eOMG! YOU'RE HOME!\x3c/h1\x3e");
    } else {
      return null;
    }
  }
};
secretary.core.add_route_BANG_.call(null, "/", action__6542__auto___17466);
logging_dashboard.routes.home_path = function(action__6542__auto___17466) {
  return function() {
    var home_path__delegate = function(args__6541__auto__) {
      return cljs.core.apply.call(null, secretary.core.render_route_STAR_, "/", args__6541__auto__);
    };
    var home_path = function(var_args) {
      var args__6541__auto__ = null;
      if (arguments.length > 0) {
        args__6541__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return home_path__delegate.call(this, args__6541__auto__);
    };
    home_path.cljs$lang$maxFixedArity = 0;
    home_path.cljs$lang$applyTo = function(arglist__17467) {
      var args__6541__auto__ = cljs.core.seq(arglist__17467);
      return home_path__delegate(args__6541__auto__);
    };
    home_path.cljs$core$IFn$_invoke$arity$variadic = home_path__delegate;
    return home_path;
  }();
}(action__6542__auto___17466);
var action__6542__auto___17470 = function(params__6543__auto__) {
  if (cljs.core.map_QMARK_.call(null, params__6543__auto__)) {
    var map__17468 = params__6543__auto__;
    var map__17468__$1 = cljs.core.seq_QMARK_.call(null, map__17468) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17468) : map__17468;
    return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, "\x3ch1\x3eUSERS!\x3c/h1\x3e");
  } else {
    if (cljs.core.vector_QMARK_.call(null, params__6543__auto__)) {
      var vec__17469 = params__6543__auto__;
      return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, "\x3ch1\x3eUSERS!\x3c/h1\x3e");
    } else {
      return null;
    }
  }
};
secretary.core.add_route_BANG_.call(null, "/users", action__6542__auto___17470);
logging_dashboard.routes.users_path = function(action__6542__auto___17470) {
  return function() {
    var users_path__delegate = function(args__6541__auto__) {
      return cljs.core.apply.call(null, secretary.core.render_route_STAR_, "/users", args__6541__auto__);
    };
    var users_path = function(var_args) {
      var args__6541__auto__ = null;
      if (arguments.length > 0) {
        args__6541__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return users_path__delegate.call(this, args__6541__auto__);
    };
    users_path.cljs$lang$maxFixedArity = 0;
    users_path.cljs$lang$applyTo = function(arglist__17471) {
      var args__6541__auto__ = cljs.core.seq(arglist__17471);
      return users_path__delegate(args__6541__auto__);
    };
    users_path.cljs$core$IFn$_invoke$arity$variadic = users_path__delegate;
    return users_path;
  }();
}(action__6542__auto___17470);
var action__6542__auto___17474 = function(params__6543__auto__) {
  if (cljs.core.map_QMARK_.call(null, params__6543__auto__)) {
    var map__17472 = params__6543__auto__;
    var map__17472__$1 = cljs.core.seq_QMARK_.call(null, map__17472) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17472) : map__17472;
    var id = cljs.core.get.call(null, map__17472__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
    var message = [cljs.core.str("\x3ch1\x3eHELLO USER \x3csmall\x3e"), cljs.core.str(id), cljs.core.str("\x3c/small\x3e!\x3c/h1\x3e")].join("");
    return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, message);
  } else {
    if (cljs.core.vector_QMARK_.call(null, params__6543__auto__)) {
      var vec__17473 = params__6543__auto__;
      var id = cljs.core.nth.call(null, vec__17473, 0, null);
      var message = [cljs.core.str("\x3ch1\x3eHELLO USER \x3csmall\x3e"), cljs.core.str(id), cljs.core.str("\x3c/small\x3e!\x3c/h1\x3e")].join("");
      return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, message);
    } else {
      return null;
    }
  }
};
secretary.core.add_route_BANG_.call(null, "/users/:id", action__6542__auto___17474);
logging_dashboard.routes.user_path = function(action__6542__auto___17474) {
  return function() {
    var user_path__delegate = function(args__6541__auto__) {
      return cljs.core.apply.call(null, secretary.core.render_route_STAR_, "/users/:id", args__6541__auto__);
    };
    var user_path = function(var_args) {
      var args__6541__auto__ = null;
      if (arguments.length > 0) {
        args__6541__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return user_path__delegate.call(this, args__6541__auto__);
    };
    user_path.cljs$lang$maxFixedArity = 0;
    user_path.cljs$lang$applyTo = function(arglist__17475) {
      var args__6541__auto__ = cljs.core.seq(arglist__17475);
      return user_path__delegate(args__6541__auto__);
    };
    user_path.cljs$core$IFn$_invoke$arity$variadic = user_path__delegate;
    return user_path;
  }();
}(action__6542__auto___17474);
var action__6542__auto___17478 = function(params__6543__auto__) {
  if (cljs.core.map_QMARK_.call(null, params__6543__auto__)) {
    var map__17476 = params__6543__auto__;
    var map__17476__$1 = cljs.core.seq_QMARK_.call(null, map__17476) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17476) : map__17476;
    return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, "\x3ch1\x3eYOU HIT THE JACKPOT!\x3c/h1\x3e");
  } else {
    if (cljs.core.vector_QMARK_.call(null, params__6543__auto__)) {
      var vec__17477 = params__6543__auto__;
      return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, "\x3ch1\x3eYOU HIT THE JACKPOT!\x3c/h1\x3e");
    } else {
      return null;
    }
  }
};
secretary.core.add_route_BANG_.call(null, "/777", action__6542__auto___17478);
logging_dashboard.routes.jackpot_path = function(action__6542__auto___17478) {
  return function() {
    var jackpot_path__delegate = function(args__6541__auto__) {
      return cljs.core.apply.call(null, secretary.core.render_route_STAR_, "/777", args__6541__auto__);
    };
    var jackpot_path = function(var_args) {
      var args__6541__auto__ = null;
      if (arguments.length > 0) {
        args__6541__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return jackpot_path__delegate.call(this, args__6541__auto__);
    };
    jackpot_path.cljs$lang$maxFixedArity = 0;
    jackpot_path.cljs$lang$applyTo = function(arglist__17479) {
      var args__6541__auto__ = cljs.core.seq(arglist__17479);
      return jackpot_path__delegate(args__6541__auto__);
    };
    jackpot_path.cljs$core$IFn$_invoke$arity$variadic = jackpot_path__delegate;
    return jackpot_path;
  }();
}(action__6542__auto___17478);
var action__6542__auto___17482 = function(params__6543__auto__) {
  if (cljs.core.map_QMARK_.call(null, params__6543__auto__)) {
    var map__17480 = params__6543__auto__;
    var map__17480__$1 = cljs.core.seq_QMARK_.call(null, map__17480) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17480) : map__17480;
    return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, "\x3ch1\x3eLOL! YOU LOST!\x3c/h1\x3e");
  } else {
    if (cljs.core.vector_QMARK_.call(null, params__6543__auto__)) {
      var vec__17481 = params__6543__auto__;
      return logging_dashboard.routes.set_html_BANG_.call(null, logging_dashboard.routes.application, "\x3ch1\x3eLOL! YOU LOST!\x3c/h1\x3e");
    } else {
      return null;
    }
  }
};
secretary.core.add_route_BANG_.call(null, "*", action__6542__auto___17482);
logging_dashboard.routes.init = function init() {
  var h = new goog.History;
  goog.events.listen(h, goog.history.EventType.NAVIGATE, function(h) {
    return function(p1__17483_SHARP_) {
      return secretary.core.dispatch_BANG_.call(null, p1__17483_SHARP_.token);
    };
  }(h));
  var G__17485 = h;
  G__17485.setEnabled(true);
  return G__17485;
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.log");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6, DIRECT:7};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport", 7:"DirectTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion", DIRECT_TRANSPORT_SYNC_MODE:"directSyncMode"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.log.getLogger("goog.net.xpc");
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc.TransportNames");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[this.transportType] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframePollingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return!this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.log.fine(goog.net.xpc.logger, "error retrieving peer frames");
  }
  return{};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.log.fine(goog.net.xpc.logger, "transport connect called");
  if (!this.initialized_) {
    goog.log.fine(goog.net.xpc.logger, "initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "constructing sender frame: " + id);
  var ifr = goog.dom.createElement("iframe");
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "Inner peer reconnect triggered.");
  this.channel_.updateChannelNameAndCatalog(goog.net.xpc.getRandomString(10));
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect") {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.log.fine(goog.net.xpc.logger, "foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.log.fine(goog.net.xpc.logger, "local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.log.fine(goog.net.xpc.logger, "local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.log.fine(goog.net.xpc.logger, "SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.log.fine(goog.net.xpc.logger, "delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.log.warning(goog.net.xpc.logger, "got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.log.warning(goog.net.xpc.logger, "got ack with wrong sequence");
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframePollingTransport.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.log.info(goog.net.xpc.logger, "receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.log.fine(goog.net.xpc.logger, "starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  this.sendUri_ = url;
  this.sendFrame_ = windowObj;
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return!!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return!!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("goog.testing.watchers");
goog.testing.watchers.resetWatchers_ = [];
goog.testing.watchers.signalClockReset = function() {
  var watchers = goog.testing.watchers.resetWatchers_;
  for (var i = 0;i < watchers.length;i++) {
    goog.testing.watchers.resetWatchers_[i]();
  }
};
goog.testing.watchers.watchClockReset = function(fn) {
  goog.testing.watchers.resetWatchers_.push(fn);
};
goog.provide("goog.async.run");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.require("goog.testing.watchers");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.push(new goog.async.run.WorkItem_(callback, opt_context));
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve();
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function() {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = [];
if (goog.DEBUG) {
  goog.async.run.resetQueue_ = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = [];
  };
  goog.testing.watchers.watchClockReset(goog.async.run.resetQueue_);
}
goog.async.run.processWorkQueue = function() {
  while (goog.async.run.workQueue_.length) {
    var workItems = goog.async.run.workQueue_;
    goog.async.run.workQueue_ = [];
    for (var i = 0;i < workItems.length;i++) {
      var workItem = workItems[i];
      try {
        workItem.fn.call(workItem.scope);
      } catch (e) {
        goog.async.throwException(e);
      }
    }
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.async.run.WorkItem_ = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  try {
    var self = this;
    resolver.call(opt_context, function(value) {
      self.resolve_(goog.Promise.State_.FULFILLED, value);
    }, function(reason) {
      self.resolve_(goog.Promise.State_.REJECTED, reason);
    });
  } catch (e) {
    this.resolve_(goog.Promise.State_.REJECTED, e);
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_;
goog.Promise.resolve = function(opt_value) {
  return new goog.Promise(function(resolve, reject) {
    resolve(opt_value);
  });
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenAlways = function(onResolved, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var callback = function() {
    try {
      onResolved.call(opt_context);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  };
  this.addCallbackEntry_({child:null, onRejected:callback, onFulfilled:callback});
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childIndex = -1;
  for (var i = 0, entry;entry = this.callbackEntries_[i];i++) {
    var child = entry.child;
    if (child) {
      childCount++;
      if (child == childPromise) {
        childIndex = i;
      }
      if (childIndex >= 0 && childCount > 1) {
        break;
      }
    }
  }
  if (childIndex >= 0) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];
      this.executeCallback_(callbackEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if ((!this.callbackEntries_ || !this.callbackEntries_.length) && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  if (!this.callbackEntries_) {
    this.callbackEntries_ = [];
  }
  this.callbackEntries_.push(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = {child:null, onFulfilled:null, onRejected:null};
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_((callbackEntry));
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  } else {
    if (goog.Thenable.isImplementedBy(x)) {
      x = (x);
      this.state_ = goog.Promise.State_.BLOCKED;
      x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);
      return;
    } else {
      if (goog.isObject(x)) {
        try {
          var then = x["then"];
          if (goog.isFunction(then)) {
            this.tryThen_(x, then);
            return;
          }
        } catch (e) {
          state = goog.Promise.State_.REJECTED;
          x = e;
        }
      }
    }
  }
  this.result_ = x;
  this.state_ = state;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.prototype.tryThen_ = function(thenable, then) {
  this.state_ = goog.Promise.State_.BLOCKED;
  var promise = this;
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      promise.unblockAndFulfill_(value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      promise.unblockAndReject_(reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.executeCallbacks_ = function() {
  while (this.callbackEntries_ && this.callbackEntries_.length) {
    var entries = this.callbackEntries_;
    this.callbackEntries_ = [];
    for (var i = 0;i < entries.length;i++) {
      if (goog.Promise.LONG_STACK_TRACES) {
        this.currentStep_++;
      }
      this.executeCallback_(entries[i], this.state_, this.result_);
    }
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled(result);
  } else {
    this.removeUnhandledRejection_();
    callbackEntry.onRejected(result);
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res)) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.net.xpc.DirectTransport");
goog.require("goog.Timer");
goog.require("goog.async.Deferred");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.object");
goog.scope(function() {
  var CfgFields = goog.net.xpc.CfgFields;
  var CrossPageChannelRole = goog.net.xpc.CrossPageChannelRole;
  var Deferred = goog.async.Deferred;
  var EventHandler = goog.events.EventHandler;
  var Timer = goog.Timer;
  var Transport = goog.net.xpc.Transport;
  goog.net.xpc.DirectTransport = function(channel, opt_domHelper) {
    goog.net.xpc.DirectTransport.base(this, "constructor", opt_domHelper);
    this.channel_ = channel;
    this.eventHandler_ = new EventHandler(this);
    this.registerDisposable(this.eventHandler_);
    this.maybeAttemptToConnectTimer_ = new Timer(DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_, this.getWindow());
    this.registerDisposable(this.maybeAttemptToConnectTimer_);
    this.setupAckReceived_ = new Deferred;
    this.setupAckSent_ = new Deferred;
    this.connected_ = new Deferred;
    this.endpointId_ = goog.net.xpc.getRandomString(10);
    this.peerEndpointId_ = null;
    this.asyncSendsMap_ = {};
    this.originalChannelName_ = this.channel_.name;
    this.channel_.updateChannelNameAndCatalog(DirectTransport.getRoledChannelName_(this.channel_.name, this.channel_.getRole()));
    this.initialized_ = false;
    this.connected_.awaitDeferred(this.setupAckReceived_);
    this.connected_.awaitDeferred(this.setupAckSent_);
    this.connected_.addCallback(this.notifyConnected_, this);
    this.connected_.callback(true);
    this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, Timer.TICK, this.maybeAttemptToConnect_);
    goog.log.info(goog.net.xpc.logger, "DirectTransport created. role\x3d" + this.channel_.getRole());
  };
  goog.inherits(goog.net.xpc.DirectTransport, Transport);
  var DirectTransport = goog.net.xpc.DirectTransport;
  DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_ = 100;
  DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ = 0;
  DirectTransport.isSupported = function(peerWindow) {
    try {
      return window.document.domain == peerWindow.document.domain;
    } catch (e) {
      return false;
    }
  };
  DirectTransport.activeCount_ = {};
  DirectTransport.GLOBAL_TRANPORT_PATH_ = "crosswindowmessaging.channel";
  DirectTransport.MESSAGE_DELIMITER_ = ",";
  DirectTransport.initialize_ = function(listenWindow) {
    var uid = goog.getUid(listenWindow);
    var value = DirectTransport.activeCount_[uid] || 0;
    if (value == 0) {
      var globalProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, listenWindow);
      if (globalProxy == null) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, DirectTransport.messageReceivedHandler_, listenWindow);
      }
    }
    DirectTransport.activeCount_[uid]++;
  };
  DirectTransport.getRoledChannelName_ = function(channelName, role) {
    return channelName + "_" + role;
  };
  DirectTransport.messageReceivedHandler_ = function(literal) {
    var msg = DirectTransport.Message_.fromLiteral(literal);
    var channelName = msg.channelName;
    var service = msg.service;
    var payload = msg.payload;
    goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
    var channel = goog.net.xpc.channels[channelName];
    if (channel) {
      channel.xpcDeliver(service, payload);
      return true;
    }
    var transportMessageType = DirectTransport.parseTransportPayload_(payload)[0];
    for (var staleChannelName in goog.net.xpc.channels) {
      var staleChannel = goog.net.xpc.channels[staleChannelName];
      if (staleChannel.getRole() == CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && transportMessageType == goog.net.xpc.SETUP) {
        staleChannel.updateChannelNameAndCatalog(channelName);
        staleChannel.xpcDeliver(service, payload);
        return true;
      }
    }
    goog.log.info(goog.net.xpc.logger, "channel name mismatch; message ignored.");
    return false;
  };
  DirectTransport.prototype.transportType = goog.net.xpc.TransportTypes.DIRECT;
  DirectTransport.prototype.transportServiceHandler = function(payload) {
    var transportParts = DirectTransport.parseTransportPayload_(payload);
    var transportMessageType = transportParts[0];
    var peerEndpointId = transportParts[1];
    switch(transportMessageType) {
      case goog.net.xpc.SETUP_ACK_:
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
        break;
      case goog.net.xpc.SETUP:
        this.sendSetupAckMessage_();
        if (this.peerEndpointId_ != null && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
        break;
    }
  };
  DirectTransport.prototype.sendSetupMessage_ = function() {
    var payload = goog.net.xpc.SETUP;
    payload += DirectTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  };
  DirectTransport.prototype.sendSetupAckMessage_ = function() {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    if (!this.setupAckSent_.hasFired()) {
      this.setupAckSent_.callback(true);
    }
  };
  DirectTransport.prototype.connect = function() {
    var win = this.getWindow();
    if (win) {
      DirectTransport.initialize_(win);
      this.initialized_ = true;
      this.maybeAttemptToConnect_();
    } else {
      goog.log.fine(goog.net.xpc.logger, "connect(): no window to initialize.");
    }
  };
  DirectTransport.prototype.maybeAttemptToConnect_ = function() {
    var outerRole = this.channel_.getRole() == CrossPageChannelRole.OUTER;
    if (this.channel_.isConnected()) {
      this.maybeAttemptToConnectTimer_.stop();
      return;
    }
    this.maybeAttemptToConnectTimer_.start();
    this.sendSetupMessage_();
  };
  DirectTransport.prototype.send = function(service, payload) {
    if (!this.channel_.getPeerWindowObject()) {
      goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
      return;
    }
    var channelName = DirectTransport.getRoledChannelName_(this.originalChannelName_, this.getPeerRole_());
    var message = new DirectTransport.Message_(channelName, service, payload);
    if (this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE]) {
      this.executeScheduledSend_(message);
    } else {
      this.asyncSendsMap_[goog.getUid(message)] = Timer.callOnce(goog.bind(this.executeScheduledSend_, this, message), 0);
    }
  };
  DirectTransport.prototype.executeScheduledSend_ = function(message) {
    var messageId = goog.getUid(message);
    if (this.asyncSendsMap_[messageId]) {
      delete this.asyncSendsMap_[messageId];
    }
    try {
      var peerProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, this.channel_.getPeerWindowObject());
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Can't access other window, ignoring.", error);
      return;
    }
    if (goog.isNull(peerProxy)) {
      goog.log.warning(goog.net.xpc.logger, "Peer window had no global function.");
      return;
    }
    try {
      peerProxy(message.toLiteral());
      goog.log.info(goog.net.xpc.logger, "send(): channelName\x3d" + message.channelName + " service\x3d" + message.service + " payload\x3d" + message.payload);
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Error performing call, ignoring.", error);
    }
  };
  DirectTransport.prototype.getPeerRole_ = function() {
    var role = this.channel_.getRole();
    return role == goog.net.xpc.CrossPageChannelRole.OUTER ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  };
  DirectTransport.prototype.notifyConnected_ = function() {
    this.channel_.notifyConnected(this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE] ? DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ : 0);
  };
  DirectTransport.prototype.disposeInternal = function() {
    if (this.initialized_) {
      var listenWindow = this.getWindow();
      var uid = goog.getUid(listenWindow);
      var value = --DirectTransport.activeCount_[uid];
      if (value == 1) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, null, listenWindow);
      }
    }
    if (this.asyncSendsMap_) {
      goog.object.forEach(this.asyncSendsMap_, function(timerId) {
        Timer.clear(timerId);
      });
      this.asyncSendsMap_ = null;
    }
    if (this.setupAckReceived_) {
      this.setupAckReceived_.cancel();
      delete this.setupAckReceived_;
    }
    if (this.setupAckSent_) {
      this.setupAckSent_.cancel();
      delete this.setupAckSent_;
    }
    if (this.connected_) {
      this.connected_.cancel();
      delete this.connected_;
    }
    DirectTransport.base(this, "disposeInternal");
  };
  DirectTransport.parseTransportPayload_ = function(payload) {
    var transportParts = (payload.split(DirectTransport.MESSAGE_DELIMITER_));
    transportParts[1] = transportParts[1] || null;
    return transportParts;
  };
  DirectTransport.Message_ = function(channelName, service, payload) {
    this.channelName = channelName;
    this.service = service;
    this.payload = payload;
  };
  DirectTransport.Message_.prototype.toLiteral = function() {
    return{"channelName":this.channelName, "service":this.service, "payload":this.payload};
  };
  DirectTransport.Message_.fromLiteral = function(literal) {
    return new DirectTransport.Message_(literal["channelName"], literal["service"], literal["payload"]);
  };
});
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj22340 = {};
  return obj22340;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3749__auto__ = reader;
    if (and__3749__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4400__auto__ = reader == null ? null : reader;
    return function() {
      var or__3761__auto__ = cljs.reader.read_char[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.reader.read_char["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3749__auto__ = reader;
    if (and__3749__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4400__auto__ = reader == null ? null : reader;
    return function() {
      var or__3761__auto__ = cljs.reader.unread[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.reader.unread["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3761__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3761__auto__)) {
    return or__3761__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__22341) {
    var rdr = cljs.core.first(arglist__22341);
    var msg = cljs.core.rest(arglist__22341);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3749__auto__ = !(ch === "#");
  if (and__3749__auto__) {
    var and__3749__auto____$1 = !(ch === "'");
    if (and__3749__auto____$1) {
      var and__3749__auto____$2 = !(ch === ":");
      if (and__3749__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3749__auto____$2;
      }
    } else {
      return and__3749__auto____$1;
    }
  } else {
    return and__3749__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__22342 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__22343 = cljs.reader.read_char.call(null, rdr);
      sb = G__22342;
      ch = G__22343;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__22344 = cljs.reader.read_char.call(null, rdr);
      ch = G__22344;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__22345 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__22345;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__22346 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__22346;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3761__auto__ = ch == null;
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3761__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__22347 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__22348 = cljs.reader.read_char.call(null, reader);
      buffer = G__22347;
      ch = G__22348;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__22349 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__22350 = cljs.reader.read_char.call(null, reader);
        buffer = G__22349;
        ch = G__22350;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__22351 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__22352 = cljs.reader.read_char.call(null, reader);
          buffer = G__22351;
          ch = G__22352;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__22357 = function() {
            var G__22355 = buffer;
            G__22355.append(nch);
            return G__22355;
          }();
          var G__22358 = cljs.reader.read_char.call(null, reader);
          buffer = G__22357;
          ch = G__22358;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__22359 = function() {
            var G__22356 = buffer;
            G__22356.append(ch);
            return G__22356;
          }();
          var G__22360 = cljs.reader.read_char.call(null, reader);
          buffer = G__22359;
          ch = G__22360;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        return not_found;
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__22362 = o;
    if (G__22362) {
      var bit__4437__auto__ = G__22362.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4437__auto__ || G__22362.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__22362.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__22362);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__22362);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__22363 = reader;
        var G__22364 = eof_is_error;
        var G__22365 = sentinel;
        var G__22366 = is_recursive;
        reader = G__22363;
        eof_is_error = G__22364;
        sentinel = G__22365;
        is_recursive = G__22366;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__22367 = cljs.reader.read_comment.call(null, reader, ch);
          var G__22368 = eof_is_error;
          var G__22369 = sentinel;
          var G__22370 = is_recursive;
          reader = G__22367;
          eof_is_error = G__22368;
          sentinel = G__22369;
          is_recursive = G__22370;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__22371 = reader;
            var G__22372 = eof_is_error;
            var G__22373 = sentinel;
            var G__22374 = is_recursive;
            reader = G__22371;
            eof_is_error = G__22372;
            sentinel = G__22373;
            is_recursive = G__22374;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__22375 = b.append("0");
          b = G__22375;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__22377 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__22377, 0, null);
  var years = cljs.core.nth.call(null, vec__22377, 1, null);
  var months = cljs.core.nth.call(null, vec__22377, 2, null);
  var days = cljs.core.nth.call(null, vec__22377, 3, null);
  var hours = cljs.core.nth.call(null, vec__22377, 4, null);
  var minutes = cljs.core.nth.call(null, vec__22377, 5, null);
  var seconds = cljs.core.nth.call(null, vec__22377, 6, null);
  var fraction = cljs.core.nth.call(null, vec__22377, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__22377, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__22377, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__22377, 10, null);
  var v = vec__22377;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3761__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3761__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3761__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3761__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3761__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3761__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3761__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3761__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__22379 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__22379, 0, null);
    var months = cljs.core.nth.call(null, vec__22379, 1, null);
    var days = cljs.core.nth.call(null, vec__22379, 2, null);
    var hours = cljs.core.nth.call(null, vec__22379, 3, null);
    var minutes = cljs.core.nth.call(null, vec__22379, 4, null);
    var seconds = cljs.core.nth.call(null, vec__22379, 5, null);
    var ms = cljs.core.nth.call(null, vec__22379, 6, null);
    var offset = cljs.core.nth.call(null, vec__22379, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__22392_22404 = cljs.core.seq.call(null, form);
    var chunk__22393_22405 = null;
    var count__22394_22406 = 0;
    var i__22395_22407 = 0;
    while (true) {
      if (i__22395_22407 < count__22394_22406) {
        var x_22408 = cljs.core._nth.call(null, chunk__22393_22405, i__22395_22407);
        arr.push(x_22408);
        var G__22409 = seq__22392_22404;
        var G__22410 = chunk__22393_22405;
        var G__22411 = count__22394_22406;
        var G__22412 = i__22395_22407 + 1;
        seq__22392_22404 = G__22409;
        chunk__22393_22405 = G__22410;
        count__22394_22406 = G__22411;
        i__22395_22407 = G__22412;
        continue;
      } else {
        var temp__4126__auto___22413 = cljs.core.seq.call(null, seq__22392_22404);
        if (temp__4126__auto___22413) {
          var seq__22392_22414__$1 = temp__4126__auto___22413;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22392_22414__$1)) {
            var c__4543__auto___22415 = cljs.core.chunk_first.call(null, seq__22392_22414__$1);
            var G__22416 = cljs.core.chunk_rest.call(null, seq__22392_22414__$1);
            var G__22417 = c__4543__auto___22415;
            var G__22418 = cljs.core.count.call(null, c__4543__auto___22415);
            var G__22419 = 0;
            seq__22392_22404 = G__22416;
            chunk__22393_22405 = G__22417;
            count__22394_22406 = G__22418;
            i__22395_22407 = G__22419;
            continue;
          } else {
            var x_22420 = cljs.core.first.call(null, seq__22392_22414__$1);
            arr.push(x_22420);
            var G__22421 = cljs.core.next.call(null, seq__22392_22414__$1);
            var G__22422 = null;
            var G__22423 = 0;
            var G__22424 = 0;
            seq__22392_22404 = G__22421;
            chunk__22393_22405 = G__22422;
            count__22394_22406 = G__22423;
            i__22395_22407 = G__22424;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj22397 = {};
        return obj22397;
      }();
      var seq__22398_22425 = cljs.core.seq.call(null, form);
      var chunk__22399_22426 = null;
      var count__22400_22427 = 0;
      var i__22401_22428 = 0;
      while (true) {
        if (i__22401_22428 < count__22400_22427) {
          var vec__22402_22429 = cljs.core._nth.call(null, chunk__22399_22426, i__22401_22428);
          var k_22430 = cljs.core.nth.call(null, vec__22402_22429, 0, null);
          var v_22431 = cljs.core.nth.call(null, vec__22402_22429, 1, null);
          obj[cljs.core.name.call(null, k_22430)] = v_22431;
          var G__22432 = seq__22398_22425;
          var G__22433 = chunk__22399_22426;
          var G__22434 = count__22400_22427;
          var G__22435 = i__22401_22428 + 1;
          seq__22398_22425 = G__22432;
          chunk__22399_22426 = G__22433;
          count__22400_22427 = G__22434;
          i__22401_22428 = G__22435;
          continue;
        } else {
          var temp__4126__auto___22436 = cljs.core.seq.call(null, seq__22398_22425);
          if (temp__4126__auto___22436) {
            var seq__22398_22437__$1 = temp__4126__auto___22436;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22398_22437__$1)) {
              var c__4543__auto___22438 = cljs.core.chunk_first.call(null, seq__22398_22437__$1);
              var G__22439 = cljs.core.chunk_rest.call(null, seq__22398_22437__$1);
              var G__22440 = c__4543__auto___22438;
              var G__22441 = cljs.core.count.call(null, c__4543__auto___22438);
              var G__22442 = 0;
              seq__22398_22425 = G__22439;
              chunk__22399_22426 = G__22440;
              count__22400_22427 = G__22441;
              i__22401_22428 = G__22442;
              continue;
            } else {
              var vec__22403_22443 = cljs.core.first.call(null, seq__22398_22437__$1);
              var k_22444 = cljs.core.nth.call(null, vec__22403_22443, 0, null);
              var v_22445 = cljs.core.nth.call(null, vec__22403_22443, 1, null);
              obj[cljs.core.name.call(null, k_22444)] = v_22445;
              var G__22446 = cljs.core.next.call(null, seq__22398_22437__$1);
              var G__22447 = null;
              var G__22448 = 0;
              var G__22449 = 0;
              seq__22398_22425 = G__22446;
              chunk__22399_22426 = G__22447;
              count__22400_22427 = G__22448;
              i__22401_22428 = G__22449;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("taoensso.sente.interfaces");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.reader");
taoensso.sente.interfaces.IPacker = function() {
  var obj22336 = {};
  return obj22336;
}();
taoensso.sente.interfaces.pack = function pack(_, x) {
  if (function() {
    var and__3749__auto__ = _;
    if (and__3749__auto__) {
      return _.taoensso$sente$interfaces$IPacker$pack$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return _.taoensso$sente$interfaces$IPacker$pack$arity$2(_, x);
  } else {
    var x__4400__auto__ = _ == null ? null : _;
    return function() {
      var or__3761__auto__ = taoensso.sente.interfaces.pack[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = taoensso.sente.interfaces.pack["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPacker.pack", _);
        }
      }
    }().call(null, _, x);
  }
};
taoensso.sente.interfaces.unpack = function unpack(_, x) {
  if (function() {
    var and__3749__auto__ = _;
    if (and__3749__auto__) {
      return _.taoensso$sente$interfaces$IPacker$unpack$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return _.taoensso$sente$interfaces$IPacker$unpack$arity$2(_, x);
  } else {
    var x__4400__auto__ = _ == null ? null : _;
    return function() {
      var or__3761__auto__ = taoensso.sente.interfaces.unpack[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = taoensso.sente.interfaces.unpack["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPacker.unpack", _);
        }
      }
    }().call(null, _, x);
  }
};
taoensso.sente.interfaces.EdnPacker = function() {
};
taoensso.sente.interfaces.EdnPacker.prototype.taoensso$sente$interfaces$IPacker$ = true;
taoensso.sente.interfaces.EdnPacker.prototype.taoensso$sente$interfaces$IPacker$pack$arity$2 = function(_, x) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.pr_str.call(null, x);
};
taoensso.sente.interfaces.EdnPacker.prototype.taoensso$sente$interfaces$IPacker$unpack$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return cljs.reader.read_string.call(null, s);
};
taoensso.sente.interfaces.EdnPacker.cljs$lang$type = true;
taoensso.sente.interfaces.EdnPacker.cljs$lang$ctorStr = "taoensso.sente.interfaces/EdnPacker";
taoensso.sente.interfaces.EdnPacker.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "taoensso.sente.interfaces/EdnPacker");
};
taoensso.sente.interfaces.__GT_EdnPacker = function __GT_EdnPacker() {
  return new taoensso.sente.interfaces.EdnPacker;
};
taoensso.sente.interfaces.edn_packer = taoensso.sente.interfaces.__GT_EdnPacker.call(null);
taoensso.sente.interfaces.coerce_packer = function coerce_packer(x) {
  if (cljs.core._EQ_.call(null, x, new cljs.core.Keyword(null, "edn", "edn", 1317840885))) {
    return taoensso.sente.interfaces.edn_packer;
  } else {
    if (function() {
      var G__22338 = x;
      if (G__22338) {
        var bit__4437__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3761__auto__ = bit__4437__auto__;
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return G__22338.taoensso$sente$interfaces$IPacker$;
          }
        }())) {
          return true;
        } else {
          if (!G__22338.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, taoensso.sente.interfaces.IPacker, G__22338);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, taoensso.sente.interfaces.IPacker, G__22338);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IPacker", "IPacker", 266151414, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
    }
    return x;
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj21891 = {};
  return obj21891;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3749__auto__ = port;
    if (and__3749__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4400__auto__ = port == null ? null : port;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj21893 = {};
  return obj21893;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3749__auto__ = port;
    if (and__3749__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4400__auto__ = port == null ? null : port;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj21895 = {};
  return obj21895;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3749__auto__ = chan;
    if (and__3749__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4400__auto__ = chan == null ? null : chan;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3749__auto__ = chan;
    if (and__3749__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4400__auto__ = chan == null ? null : chan;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj21897 = {};
  return obj21897;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3749__auto__ = h;
    if (and__3749__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4400__auto__ = h == null ? null : h;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3749__auto__ = h;
    if (and__3749__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4400__auto__ = h == null ? null : h;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj21899 = {};
  return obj21899;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3749__auto__ = b;
    if (and__3749__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4400__auto__ = b == null ? null : b;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3749__auto__ = b;
    if (and__3749__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4400__auto__ = b == null ? null : b;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function add_BANG__STAR_(b, itm) {
  if (function() {
    var and__3749__auto__ = b;
    if (and__3749__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4400__auto__ = b == null ? null : b;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function() {
  var add_BANG_ = null;
  var add_BANG___1 = function(b) {
    return b;
  };
  var add_BANG___2 = function(b, itm) {
    if (!(itm == null)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
    }
    return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
  };
  add_BANG_ = function(b, itm) {
    switch(arguments.length) {
      case 1:
        return add_BANG___1.call(this, b);
      case 2:
        return add_BANG___2.call(this, b, itm);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_BANG_.cljs$core$IFn$_invoke$arity$1 = add_BANG___1;
  add_BANG_.cljs$core$IFn$_invoke$arity$2 = add_BANG___2;
  return add_BANG_;
}();
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj21901 = {};
  return obj21901;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__21902 = cnt + 1;
      cnt = G__21902;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4643__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4643__auto__) {
      var v_21903 = this$.pop();
      if (keep_QMARK_.call(null, v_21903)) {
        this$.unshift(v_21903);
      } else {
      }
      var G__21904 = x + 1;
      x = G__21904;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_21905 = 0;
  while (true) {
    var m_21906 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_21906 == null) {
    } else {
      m_21906.call(null);
      if (count_21905 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__21907 = count_21905 + 1;
        count_21905 = G__21907;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3749__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__3749__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3749__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t21911 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t21911 = function(val, box, meta21912) {
      this.val = val;
      this.box = box;
      this.meta21912 = meta21912;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t21911.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t21911.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21913) {
      var self__ = this;
      var _21913__$1 = this;
      return self__.meta21912;
    };
    cljs.core.async.impl.channels.t21911.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21913, meta21912__$1) {
      var self__ = this;
      var _21913__$1 = this;
      return new cljs.core.async.impl.channels.t21911(self__.val, self__.box, meta21912__$1);
    };
    cljs.core.async.impl.channels.t21911.cljs$lang$type = true;
    cljs.core.async.impl.channels.t21911.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t21911";
    cljs.core.async.impl.channels.t21911.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
      return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.channels/t21911");
    };
    cljs.core.async.impl.channels.__GT_t21911 = function __GT_t21911(val__$1, box__$1, meta21912) {
      return new cljs.core.async.impl.channels.t21911(val__$1, box__$1, meta21912);
    };
  }
  return new cljs.core.async.impl.channels.t21911(val, box, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 22, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 18, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 17, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async/impl/channels.cljs"], 
  null));
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj21915 = {};
  return obj21915;
}();
cljs.core.async.impl.channels.abort = function abort(this$) {
  if (function() {
    var and__3749__auto__ = this$;
    if (and__3749__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4400__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3761__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__3749__auto__ = self__.buf;
      if (cljs.core.truth_(and__3749__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__3749__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_21916 = self__.takes.pop();
      if (taker_21916 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_21916)) {
          var take_cb_21917 = cljs.core.async.impl.protocols.commit.call(null, taker_21916);
          var val_21918 = cljs.core.truth_(function() {
            var and__3749__auto__ = self__.buf;
            if (cljs.core.truth_(and__3749__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__3749__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_21917, val_21918, taker_21916, this$__$1) {
            return function() {
              return take_cb_21917.call(null, val_21918);
            };
          }(take_cb_21917, val_21918, taker_21916, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_21919 = self__.puts.pop();
          if (putter_21919 == null) {
          } else {
            var put_handler_21920 = putter_21919.handler;
            var val_21921 = putter_21919.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_21920)) {
              var put_cb_21922 = cljs.core.async.impl.protocols.commit.call(null, put_handler_21920);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_21922, put_handler_21920, val_21921, putter_21919, _, retval, this$__$1) {
                return function() {
                  return put_cb_21922.call(null, true);
                };
              }(put_cb_21922, put_handler_21920, val_21921, putter_21919, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_21921))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__3749__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__3749__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__3749__auto__;
            }
          }())) {
            var has_val = function() {
              var and__3749__auto__ = self__.buf;
              if (cljs.core.truth_(and__3749__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__3749__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__3749__auto__ = self__.buf;
      if (cljs.core.truth_(and__3749__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__3749__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_21923 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_21923)) {
            var take_cb_21924 = cljs.core.async.impl.protocols.commit.call(null, taker_21923);
            var val_21925__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_21924, val_21925__$1, taker_21923, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_21924.call(null, val_21925__$1);
              };
            }(take_cb_21924, val_21925__$1, taker_21923, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_21926 = self__.puts.pop();
    if (putter_21926 == null) {
    } else {
      var put_handler_21927 = putter_21926.handler;
      var val_21928 = putter_21926.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_21927)) {
        var put_cb_21929 = cljs.core.async.impl.protocols.commit.call(null, put_handler_21927);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_21929, put_handler_21927, val_21928, putter_21926, this$__$1) {
          return function() {
            return put_cb_21929.call(null, true);
          };
        }(put_cb_21929, put_handler_21927, val_21928, putter_21926, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function handle(buf, exh, t) {
  var else$ = function() {
    var or__3761__auto__ = exh;
    if (cljs.core.truth_(or__3761__auto__)) {
      return or__3761__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function() {
  var chan = null;
  var chan__1 = function(buf) {
    return chan.call(null, buf, null);
  };
  var chan__2 = function(buf, xform) {
    return chan.call(null, buf, xform, null);
  };
  var chan__3 = function(buf, xform, exh) {
    return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
      var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
      return function(add_BANG_) {
        return function() {
          var G__21934 = null;
          var G__21934__1 = function(buf__$1) {
            try {
              return add_BANG_.call(null, buf__$1);
            } catch (e21932) {
              var t = e21932;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          var G__21934__2 = function(buf__$1, val) {
            try {
              return add_BANG_.call(null, buf__$1, val);
            } catch (e21933) {
              var t = e21933;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          G__21934 = function(buf__$1, val) {
            switch(arguments.length) {
              case 1:
                return G__21934__1.call(this, buf__$1);
              case 2:
                return G__21934__2.call(this, buf__$1, val);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21934.cljs$core$IFn$_invoke$arity$1 = G__21934__1;
          G__21934.cljs$core$IFn$_invoke$arity$2 = G__21934__2;
          return G__21934;
        }();
      }(add_BANG_);
    }());
  };
  chan = function(buf, xform, exh) {
    switch(arguments.length) {
      case 1:
        return chan__1.call(this, buf);
      case 2:
        return chan__2.call(this, buf, xform);
      case 3:
        return chan__3.call(this, buf, xform, exh);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t21851 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t21851 = function(f, fn_handler, meta21852) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta21852 = meta21852;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t21851.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t21851.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t21851.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t21851.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21853) {
      var self__ = this;
      var _21853__$1 = this;
      return self__.meta21852;
    };
    cljs.core.async.impl.ioc_helpers.t21851.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21853, meta21852__$1) {
      var self__ = this;
      var _21853__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t21851(self__.f, self__.fn_handler, meta21852__$1);
    };
    cljs.core.async.impl.ioc_helpers.t21851.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t21851.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t21851";
    cljs.core.async.impl.ioc_helpers.t21851.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
      return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.ioc-helpers/t21851");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t21851 = function __GT_t21851(f__$1, fn_handler__$1, meta21852) {
      return new cljs.core.async.impl.ioc_helpers.t21851(f__$1, fn_handler__$1, meta21852);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t21851(f, fn_handler, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 19, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 30, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 27, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async/impl/ioc_helpers.cljs"], 
  null));
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e21855) {
    if (e21855 instanceof Object) {
      var ex = e21855;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e21855;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_21858_21860 = state;
    statearr_21858_21860[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_21858_21860[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_21859_21861 = state;
    statearr_21859_21861[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_21859_21861[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_21864_21866 = state;
    statearr_21864_21866[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_21864_21866[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_21865_21867 = state;
    statearr_21865_21867[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_21865_21867[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4359__auto__, k__4360__auto__) {
  var self__ = this;
  var this__4359__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4359__auto____$1, k__4360__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4361__auto__, k21869, else__4362__auto__) {
  var self__ = this;
  var this__4361__auto____$1 = this;
  var G__21871 = k21869 instanceof cljs.core.Keyword ? k21869.fqn : null;
  switch(G__21871) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k21869, else__4362__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4373__auto__, writer__4374__auto__, opts__4375__auto__) {
  var self__ = this;
  var this__4373__auto____$1 = this;
  var pr_pair__4376__auto__ = function(this__4373__auto____$1) {
    return function(keyval__4377__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4374__auto__, cljs.core.pr_writer, "", " ", "", opts__4375__auto__, keyval__4377__auto__);
    };
  }(this__4373__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4374__auto__, pr_pair__4376__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4375__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4357__auto__) {
  var self__ = this;
  var this__4357__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4353__auto__) {
  var self__ = this;
  var this__4353__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4363__auto__) {
  var self__ = this;
  var this__4363__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4354__auto__) {
  var self__ = this;
  var this__4354__auto____$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_imap.call(null, this__4354__auto____$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4355__auto__, other__4356__auto__) {
  var self__ = this;
  var this__4355__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3749__auto__ = other__4356__auto__;
    if (cljs.core.truth_(and__3749__auto__)) {
      return this__4355__auto____$1.constructor === other__4356__auto__.constructor && cljs.core.equiv_map.call(null, this__4355__auto____$1, other__4356__auto__);
    } else {
      return and__3749__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4368__auto__, k__4369__auto__) {
  var self__ = this;
  var this__4368__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4369__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4368__auto____$1), self__.__meta), k__4369__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4369__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4366__auto__, k__4367__auto__, G__21868) {
  var self__ = this;
  var this__4366__auto____$1 = this;
  var pred__21872 = cljs.core.keyword_identical_QMARK_;
  var expr__21873 = k__4367__auto__;
  if (cljs.core.truth_(pred__21872.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__21873))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__21868, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__21872.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__21873))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__21868, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__21872.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__21873))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__21868, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__21872.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__21873))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__21868, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__21872.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__21873))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__21868, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4367__auto__, G__21868), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4371__auto__) {
  var self__ = this;
  var this__4371__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4358__auto__, G__21868) {
  var self__ = this;
  var this__4358__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__21868, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4364__auto__, entry__4365__auto__) {
  var self__ = this;
  var this__4364__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4365__auto__)) {
    return cljs.core._assoc.call(null, this__4364__auto____$1, cljs.core._nth.call(null, entry__4365__auto__, 0), cljs.core._nth.call(null, entry__4365__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4364__auto____$1, entry__4365__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4393__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4393__auto__, writer__4394__auto__) {
  return cljs.core._write.call(null, writer__4394__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__21870) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__21870), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__21870), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__21870), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__21870), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__21870), null, cljs.core.dissoc.call(null, G__21870, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_21877 = state;
  statearr_21877[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_21877;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3749__auto__ = exception;
      if (cljs.core.truth_(and__3749__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3749__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3749__auto__ = exception;
        if (cljs.core.truth_(and__3749__auto__)) {
          var and__3749__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3749__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3749__auto____$1;
          }
        } else {
          return and__3749__auto__;
        }
      }())) {
        var statearr_21883 = state;
        statearr_21883[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_21883[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_21883[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_21883[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_21883;
      } else {
        if (cljs.core.truth_(function() {
          var and__3749__auto__ = exception;
          if (cljs.core.truth_(and__3749__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3749__auto__;
          }
        }())) {
          var statearr_21884_21888 = state;
          statearr_21884_21888[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__21889 = state;
          state = G__21889;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3749__auto__ = exception;
            if (cljs.core.truth_(and__3749__auto__)) {
              var and__3749__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3749__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3749__auto____$1;
              }
            } else {
              return and__3749__auto__;
            }
          }())) {
            var statearr_21885 = state;
            statearr_21885[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_21885[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_21885;
          } else {
            if (cljs.core.truth_(function() {
              var and__3749__auto__ = cljs.core.not.call(null, exception);
              if (and__3749__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3749__auto__;
              }
            }())) {
              var statearr_21886 = state;
              statearr_21886[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_21886[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_21886;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_21887 = state;
                statearr_21887[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_21887[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_21887;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__21824 = level + 1;
        level = G__21824;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_21825 = 0;
    while (true) {
      if (i_21825 < arr.length) {
        arr[i_21825] = null;
        var G__21826 = i_21825 + 1;
        i_21825 = G__21826;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__21827 = x_SINGLEQUOTE_;
                x__$1 = G__21827;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__21828 = x__$1;
        var G__21829 = k;
        var G__21830 = level - 1;
        var G__21831 = update;
        x = G__21828;
        k = G__21829;
        level = G__21830;
        update = G__21831;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_21832 = self__.level + 1;
      while (true) {
        if (i_21832 <= new_level + 1) {
          update[i_21832] = self__.header;
          var G__21833 = i_21832 + 1;
          i_21832 = G__21833;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_21834 = 0;
    while (true) {
      if (i_21834 <= self__.level) {
        var links_21835 = update[i_21834].forward;
        if (links_21835[i_21834] === x__$1) {
          links_21835[i_21834] = x__$1.forward[i_21834];
          var G__21836 = i_21834 + 1;
          i_21834 = G__21836;
          continue;
        } else {
          var G__21837 = i_21834 + 1;
          i_21834 = G__21837;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__21838 = x_SINGLEQUOTE_;
              x__$1 = G__21838;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__21839 = nx;
        var G__21840 = level__$1 - 1;
        x = G__21839;
        level__$1 = G__21840;
        continue;
      } else {
        var G__21841 = x;
        var G__21842 = level__$1 - 1;
        x = G__21841;
        level__$1 = G__21842;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__21843 = x_SINGLEQUOTE_;
              x__$1 = G__21843;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__21844 = nx;
        var G__21845 = level__$1 - 1;
        x = G__21844;
        level__$1 = G__21845;
        continue;
      } else {
        var G__21846 = x;
        var G__21847 = level__$1 - 1;
        x = G__21846;
        level__$1 = G__21847;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
  return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3761__auto__ = cljs.core.truth_(function() {
    var and__3749__auto__ = me;
    if (cljs.core.truth_(and__3749__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3749__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3761__auto__)) {
    return or__3761__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3761__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3761__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t18739 !== "undefined") {
  } else {
    cljs.core.async.t18739 = function(f, fn_handler, meta18740) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta18740 = meta18740;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t18739.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t18739.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t18739.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t18739.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18741) {
      var self__ = this;
      var _18741__$1 = this;
      return self__.meta18740;
    };
    cljs.core.async.t18739.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18741, meta18740__$1) {
      var self__ = this;
      var _18741__$1 = this;
      return new cljs.core.async.t18739(self__.f, self__.fn_handler, meta18740__$1);
    };
    cljs.core.async.t18739.cljs$lang$type = true;
    cljs.core.async.t18739.cljs$lang$ctorStr = "cljs.core.async/t18739";
    cljs.core.async.t18739.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
      return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t18739");
    };
    cljs.core.async.__GT_t18739 = function __GT_t18739(f__$1, fn_handler__$1, meta18740) {
      return new cljs.core.async.t18739(f__$1, fn_handler__$1, meta18740);
    };
  }
  return new cljs.core.async.t18739(f, fn_handler, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 20, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 16, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 13, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], null));
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__18743 = buff;
  if (G__18743) {
    var bit__4437__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3761__auto__ = bit__4437__auto__;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return G__18743.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__18743.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__18743);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__18743);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    return chan.call(null, buf_or_n, null, null);
  };
  var chan__2 = function(buf_or_n, xform) {
    return chan.call(null, buf_or_n, xform, null);
  };
  var chan__3 = function(buf_or_n, xform, ex_handler) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    if (cljs.core.truth_(xform)) {
      if (cljs.core.truth_(buf_or_n__$1)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
      }
    } else {
    }
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
  };
  chan = function(buf_or_n, xform, ex_handler) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
      case 2:
        return chan__2.call(this, buf_or_n, xform);
      case 3:
        return chan__3.call(this, buf_or_n, xform, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_18744 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_18744);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_18744, ret) {
          return function() {
            return fn1.call(null, val_18744);
          };
        }(val_18744, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4643__auto___18745 = n;
  var x_18746 = 0;
  while (true) {
    if (x_18746 < n__4643__auto___18745) {
      a[x_18746] = 0;
      var G__18747 = x_18746 + 1;
      x_18746 = G__18747;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__18748 = i + 1;
      i = G__18748;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t18752 !== "undefined") {
  } else {
    cljs.core.async.t18752 = function(flag, alt_flag, meta18753) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta18753 = meta18753;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t18752.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t18752.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t18752.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t18752.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_18754) {
        var self__ = this;
        var _18754__$1 = this;
        return self__.meta18753;
      };
    }(flag);
    cljs.core.async.t18752.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_18754, meta18753__$1) {
        var self__ = this;
        var _18754__$1 = this;
        return new cljs.core.async.t18752(self__.flag, self__.alt_flag, meta18753__$1);
      };
    }(flag);
    cljs.core.async.t18752.cljs$lang$type = true;
    cljs.core.async.t18752.cljs$lang$ctorStr = "cljs.core.async/t18752";
    cljs.core.async.t18752.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
        return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t18752");
      };
    }(flag);
    cljs.core.async.__GT_t18752 = function(flag) {
      return function __GT_t18752(flag__$1, alt_flag__$1, meta18753) {
        return new cljs.core.async.t18752(flag__$1, alt_flag__$1, meta18753);
      };
    }(flag);
  }
  return new cljs.core.async.t18752(flag, alt_flag, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 15, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 146, new cljs.core.Keyword(null, "column", "column", 2078222095), 5, new cljs.core.Keyword(null, "line", "line", 212345235), 141, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t18758 !== "undefined") {
  } else {
    cljs.core.async.t18758 = function(cb, flag, alt_handler, meta18759) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta18759 = meta18759;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t18758.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t18758.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t18758.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t18758.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18760) {
      var self__ = this;
      var _18760__$1 = this;
      return self__.meta18759;
    };
    cljs.core.async.t18758.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18760, meta18759__$1) {
      var self__ = this;
      var _18760__$1 = this;
      return new cljs.core.async.t18758(self__.cb, self__.flag, self__.alt_handler, meta18759__$1);
    };
    cljs.core.async.t18758.cljs$lang$type = true;
    cljs.core.async.t18758.cljs$lang$ctorStr = "cljs.core.async/t18758";
    cljs.core.async.t18758.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
      return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t18758");
    };
    cljs.core.async.__GT_t18758 = function __GT_t18758(cb__$1, flag__$1, alt_handler__$1, meta18759) {
      return new cljs.core.async.t18758(cb__$1, flag__$1, alt_handler__$1, meta18759);
    };
  }
  return new cljs.core.async.t18758(cb, flag, alt_handler, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 11, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 154, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 149, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__18761_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18761_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__18762_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18762_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3761__auto__ = wport;
            if (cljs.core.truth_(or__3761__auto__)) {
              return or__3761__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__18763 = i + 1;
          i = G__18763;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3761__auto__ = ret;
  if (cljs.core.truth_(or__3761__auto__)) {
    return or__3761__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3749__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3749__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3749__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__18764) {
    var map__18766 = p__18764;
    var map__18766__$1 = cljs.core.seq_QMARK_.call(null, map__18766) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18766) : map__18766;
    var opts = map__18766__$1;
    throw new Error("alts! used not in (go ...) block");
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__18764 = null;
    if (arguments.length > 1) {
      p__18764 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__18764);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__18767) {
    var ports = cljs.core.first(arglist__18767);
    var p__18764 = cljs.core.rest(arglist__18767);
    return alts_BANG___delegate(ports, p__18764);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__6474__auto___18862 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___18862) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___18862) {
            return function(state_18838) {
              var state_val_18839 = state_18838[1];
              if (state_val_18839 === 7) {
                var inst_18834 = state_18838[2];
                var state_18838__$1 = state_18838;
                var statearr_18840_18863 = state_18838__$1;
                statearr_18840_18863[2] = inst_18834;
                statearr_18840_18863[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18839 === 1) {
                  var state_18838__$1 = state_18838;
                  var statearr_18841_18864 = state_18838__$1;
                  statearr_18841_18864[2] = null;
                  statearr_18841_18864[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18839 === 4) {
                    var inst_18817 = state_18838[7];
                    var inst_18817__$1 = state_18838[2];
                    var inst_18818 = inst_18817__$1 == null;
                    var state_18838__$1 = function() {
                      var statearr_18842 = state_18838;
                      statearr_18842[7] = inst_18817__$1;
                      return statearr_18842;
                    }();
                    if (cljs.core.truth_(inst_18818)) {
                      var statearr_18843_18865 = state_18838__$1;
                      statearr_18843_18865[1] = 5;
                    } else {
                      var statearr_18844_18866 = state_18838__$1;
                      statearr_18844_18866[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18839 === 13) {
                      var state_18838__$1 = state_18838;
                      var statearr_18845_18867 = state_18838__$1;
                      statearr_18845_18867[2] = null;
                      statearr_18845_18867[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18839 === 6) {
                        var inst_18817 = state_18838[7];
                        var state_18838__$1 = state_18838;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18838__$1, 11, to, inst_18817);
                      } else {
                        if (state_val_18839 === 3) {
                          var inst_18836 = state_18838[2];
                          var state_18838__$1 = state_18838;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18838__$1, inst_18836);
                        } else {
                          if (state_val_18839 === 12) {
                            var state_18838__$1 = state_18838;
                            var statearr_18846_18868 = state_18838__$1;
                            statearr_18846_18868[2] = null;
                            statearr_18846_18868[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18839 === 2) {
                              var state_18838__$1 = state_18838;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18838__$1, 4, from);
                            } else {
                              if (state_val_18839 === 11) {
                                var inst_18827 = state_18838[2];
                                var state_18838__$1 = state_18838;
                                if (cljs.core.truth_(inst_18827)) {
                                  var statearr_18847_18869 = state_18838__$1;
                                  statearr_18847_18869[1] = 12;
                                } else {
                                  var statearr_18848_18870 = state_18838__$1;
                                  statearr_18848_18870[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18839 === 9) {
                                  var state_18838__$1 = state_18838;
                                  var statearr_18849_18871 = state_18838__$1;
                                  statearr_18849_18871[2] = null;
                                  statearr_18849_18871[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18839 === 5) {
                                    var state_18838__$1 = state_18838;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_18850_18872 = state_18838__$1;
                                      statearr_18850_18872[1] = 8;
                                    } else {
                                      var statearr_18851_18873 = state_18838__$1;
                                      statearr_18851_18873[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18839 === 14) {
                                      var inst_18832 = state_18838[2];
                                      var state_18838__$1 = state_18838;
                                      var statearr_18852_18874 = state_18838__$1;
                                      statearr_18852_18874[2] = inst_18832;
                                      statearr_18852_18874[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18839 === 10) {
                                        var inst_18824 = state_18838[2];
                                        var state_18838__$1 = state_18838;
                                        var statearr_18853_18875 = state_18838__$1;
                                        statearr_18853_18875[2] = inst_18824;
                                        statearr_18853_18875[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18839 === 8) {
                                          var inst_18821 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_18838__$1 = state_18838;
                                          var statearr_18854_18876 = state_18838__$1;
                                          statearr_18854_18876[2] = inst_18821;
                                          statearr_18854_18876[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___18862);
          return function(switch__6459__auto__, c__6474__auto___18862) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_18858 = [null, null, null, null, null, null, null, null];
                statearr_18858[0] = state_machine__6460__auto__;
                statearr_18858[1] = 1;
                return statearr_18858;
              };
              var state_machine__6460__auto____1 = function(state_18838) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_18838);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e18859) {
                      if (e18859 instanceof Object) {
                        var ex__6463__auto__ = e18859;
                        var statearr_18860_18877 = state_18838;
                        statearr_18860_18877[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18838);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e18859;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__18878 = state_18838;
                    state_18838 = G__18878;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_18838) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_18838);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___18862);
        }();
        var state__6476__auto__ = function() {
          var statearr_18861 = f__6475__auto__.call(null);
          statearr_18861[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___18862;
          return statearr_18861;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___18862));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.pipeline_STAR_ = function pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__19062) {
      var vec__19063 = p__19062;
      var v = cljs.core.nth.call(null, vec__19063, 0, null);
      var p = cljs.core.nth.call(null, vec__19063, 1, null);
      var job = vec__19063;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__6474__auto___19245 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___19245, res, vec__19063, v, p, job, jobs, results) {
          return function() {
            var f__6475__auto__ = function() {
              var switch__6459__auto__ = function(c__6474__auto___19245, res, vec__19063, v, p, job, jobs, results) {
                return function(state_19068) {
                  var state_val_19069 = state_19068[1];
                  if (state_val_19069 === 2) {
                    var inst_19065 = state_19068[2];
                    var inst_19066 = cljs.core.async.close_BANG_.call(null, res);
                    var state_19068__$1 = function() {
                      var statearr_19070 = state_19068;
                      statearr_19070[7] = inst_19065;
                      return statearr_19070;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19068__$1, inst_19066);
                  } else {
                    if (state_val_19069 === 1) {
                      var state_19068__$1 = state_19068;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19068__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__6474__auto___19245, res, vec__19063, v, p, job, jobs, results);
              return function(switch__6459__auto__, c__6474__auto___19245, res, vec__19063, v, p, job, jobs, results) {
                return function() {
                  var state_machine__6460__auto__ = null;
                  var state_machine__6460__auto____0 = function() {
                    var statearr_19074 = [null, null, null, null, null, null, null, null];
                    statearr_19074[0] = state_machine__6460__auto__;
                    statearr_19074[1] = 1;
                    return statearr_19074;
                  };
                  var state_machine__6460__auto____1 = function(state_19068) {
                    while (true) {
                      var ret_value__6461__auto__ = function() {
                        try {
                          while (true) {
                            var result__6462__auto__ = switch__6459__auto__.call(null, state_19068);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__6462__auto__;
                            }
                            break;
                          }
                        } catch (e19075) {
                          if (e19075 instanceof Object) {
                            var ex__6463__auto__ = e19075;
                            var statearr_19076_19246 = state_19068;
                            statearr_19076_19246[5] = ex__6463__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19068);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e19075;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__19247 = state_19068;
                        state_19068 = G__19247;
                        continue;
                      } else {
                        return ret_value__6461__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__6460__auto__ = function(state_19068) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__6460__auto____0.call(this);
                      case 1:
                        return state_machine__6460__auto____1.call(this, state_19068);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
                  state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
                  return state_machine__6460__auto__;
                }();
              }(switch__6459__auto__, c__6474__auto___19245, res, vec__19063, v, p, job, jobs, results);
            }();
            var state__6476__auto__ = function() {
              var statearr_19077 = f__6475__auto__.call(null);
              statearr_19077[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___19245;
              return statearr_19077;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
          };
        }(c__6474__auto___19245, res, vec__19063, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__19078) {
      var vec__19079 = p__19078;
      var v = cljs.core.nth.call(null, vec__19079, 0, null);
      var p = cljs.core.nth.call(null, vec__19079, 1, null);
      var job = vec__19079;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__4643__auto___19248 = n;
  var __19249 = 0;
  while (true) {
    if (__19249 < n__4643__auto___19248) {
      var G__19080_19250 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__19080_19250) {
        case "async":
          var c__6474__auto___19252 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__19249, c__6474__auto___19252, G__19080_19250, n__4643__auto___19248, jobs, results, process, async) {
            return function() {
              var f__6475__auto__ = function() {
                var switch__6459__auto__ = function(__19249, c__6474__auto___19252, G__19080_19250, n__4643__auto___19248, jobs, results, process, async) {
                  return function(state_19093) {
                    var state_val_19094 = state_19093[1];
                    if (state_val_19094 === 7) {
                      var inst_19089 = state_19093[2];
                      var state_19093__$1 = state_19093;
                      var statearr_19095_19253 = state_19093__$1;
                      statearr_19095_19253[2] = inst_19089;
                      statearr_19095_19253[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19094 === 6) {
                        var state_19093__$1 = state_19093;
                        var statearr_19096_19254 = state_19093__$1;
                        statearr_19096_19254[2] = null;
                        statearr_19096_19254[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19094 === 5) {
                          var state_19093__$1 = state_19093;
                          var statearr_19097_19255 = state_19093__$1;
                          statearr_19097_19255[2] = null;
                          statearr_19097_19255[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19094 === 4) {
                            var inst_19083 = state_19093[2];
                            var inst_19084 = async.call(null, inst_19083);
                            var state_19093__$1 = state_19093;
                            if (cljs.core.truth_(inst_19084)) {
                              var statearr_19098_19256 = state_19093__$1;
                              statearr_19098_19256[1] = 5;
                            } else {
                              var statearr_19099_19257 = state_19093__$1;
                              statearr_19099_19257[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19094 === 3) {
                              var inst_19091 = state_19093[2];
                              var state_19093__$1 = state_19093;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19093__$1, inst_19091);
                            } else {
                              if (state_val_19094 === 2) {
                                var state_19093__$1 = state_19093;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19093__$1, 4, jobs);
                              } else {
                                if (state_val_19094 === 1) {
                                  var state_19093__$1 = state_19093;
                                  var statearr_19100_19258 = state_19093__$1;
                                  statearr_19100_19258[2] = null;
                                  statearr_19100_19258[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__19249, c__6474__auto___19252, G__19080_19250, n__4643__auto___19248, jobs, results, process, async);
                return function(__19249, switch__6459__auto__, c__6474__auto___19252, G__19080_19250, n__4643__auto___19248, jobs, results, process, async) {
                  return function() {
                    var state_machine__6460__auto__ = null;
                    var state_machine__6460__auto____0 = function() {
                      var statearr_19104 = [null, null, null, null, null, null, null];
                      statearr_19104[0] = state_machine__6460__auto__;
                      statearr_19104[1] = 1;
                      return statearr_19104;
                    };
                    var state_machine__6460__auto____1 = function(state_19093) {
                      while (true) {
                        var ret_value__6461__auto__ = function() {
                          try {
                            while (true) {
                              var result__6462__auto__ = switch__6459__auto__.call(null, state_19093);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6462__auto__;
                              }
                              break;
                            }
                          } catch (e19105) {
                            if (e19105 instanceof Object) {
                              var ex__6463__auto__ = e19105;
                              var statearr_19106_19259 = state_19093;
                              statearr_19106_19259[5] = ex__6463__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19093);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e19105;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__19260 = state_19093;
                          state_19093 = G__19260;
                          continue;
                        } else {
                          return ret_value__6461__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6460__auto__ = function(state_19093) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6460__auto____0.call(this);
                        case 1:
                          return state_machine__6460__auto____1.call(this, state_19093);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
                    state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
                    return state_machine__6460__auto__;
                  }();
                }(__19249, switch__6459__auto__, c__6474__auto___19252, G__19080_19250, n__4643__auto___19248, jobs, results, process, async);
              }();
              var state__6476__auto__ = function() {
                var statearr_19107 = f__6475__auto__.call(null);
                statearr_19107[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___19252;
                return statearr_19107;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
            };
          }(__19249, c__6474__auto___19252, G__19080_19250, n__4643__auto___19248, jobs, results, process, async));
          break;
        case "compute":
          var c__6474__auto___19261 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__19249, c__6474__auto___19261, G__19080_19250, n__4643__auto___19248, jobs, results, process, async) {
            return function() {
              var f__6475__auto__ = function() {
                var switch__6459__auto__ = function(__19249, c__6474__auto___19261, G__19080_19250, n__4643__auto___19248, jobs, results, process, async) {
                  return function(state_19120) {
                    var state_val_19121 = state_19120[1];
                    if (state_val_19121 === 7) {
                      var inst_19116 = state_19120[2];
                      var state_19120__$1 = state_19120;
                      var statearr_19122_19262 = state_19120__$1;
                      statearr_19122_19262[2] = inst_19116;
                      statearr_19122_19262[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19121 === 6) {
                        var state_19120__$1 = state_19120;
                        var statearr_19123_19263 = state_19120__$1;
                        statearr_19123_19263[2] = null;
                        statearr_19123_19263[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19121 === 5) {
                          var state_19120__$1 = state_19120;
                          var statearr_19124_19264 = state_19120__$1;
                          statearr_19124_19264[2] = null;
                          statearr_19124_19264[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19121 === 4) {
                            var inst_19110 = state_19120[2];
                            var inst_19111 = process.call(null, inst_19110);
                            var state_19120__$1 = state_19120;
                            if (cljs.core.truth_(inst_19111)) {
                              var statearr_19125_19265 = state_19120__$1;
                              statearr_19125_19265[1] = 5;
                            } else {
                              var statearr_19126_19266 = state_19120__$1;
                              statearr_19126_19266[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19121 === 3) {
                              var inst_19118 = state_19120[2];
                              var state_19120__$1 = state_19120;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19120__$1, inst_19118);
                            } else {
                              if (state_val_19121 === 2) {
                                var state_19120__$1 = state_19120;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19120__$1, 4, jobs);
                              } else {
                                if (state_val_19121 === 1) {
                                  var state_19120__$1 = state_19120;
                                  var statearr_19127_19267 = state_19120__$1;
                                  statearr_19127_19267[2] = null;
                                  statearr_19127_19267[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__19249, c__6474__auto___19261, G__19080_19250, n__4643__auto___19248, jobs, results, process, async);
                return function(__19249, switch__6459__auto__, c__6474__auto___19261, G__19080_19250, n__4643__auto___19248, jobs, results, process, async) {
                  return function() {
                    var state_machine__6460__auto__ = null;
                    var state_machine__6460__auto____0 = function() {
                      var statearr_19131 = [null, null, null, null, null, null, null];
                      statearr_19131[0] = state_machine__6460__auto__;
                      statearr_19131[1] = 1;
                      return statearr_19131;
                    };
                    var state_machine__6460__auto____1 = function(state_19120) {
                      while (true) {
                        var ret_value__6461__auto__ = function() {
                          try {
                            while (true) {
                              var result__6462__auto__ = switch__6459__auto__.call(null, state_19120);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6462__auto__;
                              }
                              break;
                            }
                          } catch (e19132) {
                            if (e19132 instanceof Object) {
                              var ex__6463__auto__ = e19132;
                              var statearr_19133_19268 = state_19120;
                              statearr_19133_19268[5] = ex__6463__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19120);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e19132;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__19269 = state_19120;
                          state_19120 = G__19269;
                          continue;
                        } else {
                          return ret_value__6461__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6460__auto__ = function(state_19120) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6460__auto____0.call(this);
                        case 1:
                          return state_machine__6460__auto____1.call(this, state_19120);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
                    state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
                    return state_machine__6460__auto__;
                  }();
                }(__19249, switch__6459__auto__, c__6474__auto___19261, G__19080_19250, n__4643__auto___19248, jobs, results, process, async);
              }();
              var state__6476__auto__ = function() {
                var statearr_19134 = f__6475__auto__.call(null);
                statearr_19134[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___19261;
                return statearr_19134;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
            };
          }(__19249, c__6474__auto___19261, G__19080_19250, n__4643__auto___19248, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__19270 = __19249 + 1;
      __19249 = G__19270;
      continue;
    } else {
    }
    break;
  }
  var c__6474__auto___19271 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___19271, jobs, results, process, async) {
    return function() {
      var f__6475__auto__ = function() {
        var switch__6459__auto__ = function(c__6474__auto___19271, jobs, results, process, async) {
          return function(state_19156) {
            var state_val_19157 = state_19156[1];
            if (state_val_19157 === 9) {
              var inst_19149 = state_19156[2];
              var state_19156__$1 = function() {
                var statearr_19158 = state_19156;
                statearr_19158[7] = inst_19149;
                return statearr_19158;
              }();
              var statearr_19159_19272 = state_19156__$1;
              statearr_19159_19272[2] = null;
              statearr_19159_19272[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19157 === 8) {
                var inst_19142 = state_19156[8];
                var inst_19147 = state_19156[2];
                var state_19156__$1 = function() {
                  var statearr_19160 = state_19156;
                  statearr_19160[9] = inst_19147;
                  return statearr_19160;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19156__$1, 9, results, inst_19142);
              } else {
                if (state_val_19157 === 7) {
                  var inst_19152 = state_19156[2];
                  var state_19156__$1 = state_19156;
                  var statearr_19161_19273 = state_19156__$1;
                  statearr_19161_19273[2] = inst_19152;
                  statearr_19161_19273[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19157 === 6) {
                    var inst_19137 = state_19156[10];
                    var inst_19142 = state_19156[8];
                    var inst_19142__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_19143 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_19144 = [inst_19137, inst_19142__$1];
                    var inst_19145 = new cljs.core.PersistentVector(null, 2, 5, inst_19143, inst_19144, null);
                    var state_19156__$1 = function() {
                      var statearr_19162 = state_19156;
                      statearr_19162[8] = inst_19142__$1;
                      return statearr_19162;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19156__$1, 8, jobs, inst_19145);
                  } else {
                    if (state_val_19157 === 5) {
                      var inst_19140 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_19156__$1 = state_19156;
                      var statearr_19163_19274 = state_19156__$1;
                      statearr_19163_19274[2] = inst_19140;
                      statearr_19163_19274[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19157 === 4) {
                        var inst_19137 = state_19156[10];
                        var inst_19137__$1 = state_19156[2];
                        var inst_19138 = inst_19137__$1 == null;
                        var state_19156__$1 = function() {
                          var statearr_19164 = state_19156;
                          statearr_19164[10] = inst_19137__$1;
                          return statearr_19164;
                        }();
                        if (cljs.core.truth_(inst_19138)) {
                          var statearr_19165_19275 = state_19156__$1;
                          statearr_19165_19275[1] = 5;
                        } else {
                          var statearr_19166_19276 = state_19156__$1;
                          statearr_19166_19276[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19157 === 3) {
                          var inst_19154 = state_19156[2];
                          var state_19156__$1 = state_19156;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19156__$1, inst_19154);
                        } else {
                          if (state_val_19157 === 2) {
                            var state_19156__$1 = state_19156;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19156__$1, 4, from);
                          } else {
                            if (state_val_19157 === 1) {
                              var state_19156__$1 = state_19156;
                              var statearr_19167_19277 = state_19156__$1;
                              statearr_19167_19277[2] = null;
                              statearr_19167_19277[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6474__auto___19271, jobs, results, process, async);
        return function(switch__6459__auto__, c__6474__auto___19271, jobs, results, process, async) {
          return function() {
            var state_machine__6460__auto__ = null;
            var state_machine__6460__auto____0 = function() {
              var statearr_19171 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_19171[0] = state_machine__6460__auto__;
              statearr_19171[1] = 1;
              return statearr_19171;
            };
            var state_machine__6460__auto____1 = function(state_19156) {
              while (true) {
                var ret_value__6461__auto__ = function() {
                  try {
                    while (true) {
                      var result__6462__auto__ = switch__6459__auto__.call(null, state_19156);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6462__auto__;
                      }
                      break;
                    }
                  } catch (e19172) {
                    if (e19172 instanceof Object) {
                      var ex__6463__auto__ = e19172;
                      var statearr_19173_19278 = state_19156;
                      statearr_19173_19278[5] = ex__6463__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19156);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e19172;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__19279 = state_19156;
                  state_19156 = G__19279;
                  continue;
                } else {
                  return ret_value__6461__auto__;
                }
                break;
              }
            };
            state_machine__6460__auto__ = function(state_19156) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6460__auto____0.call(this);
                case 1:
                  return state_machine__6460__auto____1.call(this, state_19156);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
            return state_machine__6460__auto__;
          }();
        }(switch__6459__auto__, c__6474__auto___19271, jobs, results, process, async);
      }();
      var state__6476__auto__ = function() {
        var statearr_19174 = f__6475__auto__.call(null);
        statearr_19174[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___19271;
        return statearr_19174;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
    };
  }(c__6474__auto___19271, jobs, results, process, async));
  var c__6474__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto__, jobs, results, process, async) {
    return function() {
      var f__6475__auto__ = function() {
        var switch__6459__auto__ = function(c__6474__auto__, jobs, results, process, async) {
          return function(state_19212) {
            var state_val_19213 = state_19212[1];
            if (state_val_19213 === 7) {
              var inst_19208 = state_19212[2];
              var state_19212__$1 = state_19212;
              var statearr_19214_19280 = state_19212__$1;
              statearr_19214_19280[2] = inst_19208;
              statearr_19214_19280[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19213 === 20) {
                var state_19212__$1 = state_19212;
                var statearr_19215_19281 = state_19212__$1;
                statearr_19215_19281[2] = null;
                statearr_19215_19281[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19213 === 1) {
                  var state_19212__$1 = state_19212;
                  var statearr_19216_19282 = state_19212__$1;
                  statearr_19216_19282[2] = null;
                  statearr_19216_19282[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19213 === 4) {
                    var inst_19177 = state_19212[7];
                    var inst_19177__$1 = state_19212[2];
                    var inst_19178 = inst_19177__$1 == null;
                    var state_19212__$1 = function() {
                      var statearr_19217 = state_19212;
                      statearr_19217[7] = inst_19177__$1;
                      return statearr_19217;
                    }();
                    if (cljs.core.truth_(inst_19178)) {
                      var statearr_19218_19283 = state_19212__$1;
                      statearr_19218_19283[1] = 5;
                    } else {
                      var statearr_19219_19284 = state_19212__$1;
                      statearr_19219_19284[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19213 === 15) {
                      var inst_19190 = state_19212[8];
                      var state_19212__$1 = state_19212;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19212__$1, 18, to, inst_19190);
                    } else {
                      if (state_val_19213 === 21) {
                        var inst_19203 = state_19212[2];
                        var state_19212__$1 = state_19212;
                        var statearr_19220_19285 = state_19212__$1;
                        statearr_19220_19285[2] = inst_19203;
                        statearr_19220_19285[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19213 === 13) {
                          var inst_19205 = state_19212[2];
                          var state_19212__$1 = function() {
                            var statearr_19221 = state_19212;
                            statearr_19221[9] = inst_19205;
                            return statearr_19221;
                          }();
                          var statearr_19222_19286 = state_19212__$1;
                          statearr_19222_19286[2] = null;
                          statearr_19222_19286[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19213 === 6) {
                            var inst_19177 = state_19212[7];
                            var state_19212__$1 = state_19212;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19212__$1, 11, inst_19177);
                          } else {
                            if (state_val_19213 === 17) {
                              var inst_19198 = state_19212[2];
                              var state_19212__$1 = state_19212;
                              if (cljs.core.truth_(inst_19198)) {
                                var statearr_19223_19287 = state_19212__$1;
                                statearr_19223_19287[1] = 19;
                              } else {
                                var statearr_19224_19288 = state_19212__$1;
                                statearr_19224_19288[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19213 === 3) {
                                var inst_19210 = state_19212[2];
                                var state_19212__$1 = state_19212;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19212__$1, inst_19210);
                              } else {
                                if (state_val_19213 === 12) {
                                  var inst_19187 = state_19212[10];
                                  var state_19212__$1 = state_19212;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19212__$1, 14, inst_19187);
                                } else {
                                  if (state_val_19213 === 2) {
                                    var state_19212__$1 = state_19212;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19212__$1, 4, results);
                                  } else {
                                    if (state_val_19213 === 19) {
                                      var state_19212__$1 = state_19212;
                                      var statearr_19225_19289 = state_19212__$1;
                                      statearr_19225_19289[2] = null;
                                      statearr_19225_19289[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19213 === 11) {
                                        var inst_19187 = state_19212[2];
                                        var state_19212__$1 = function() {
                                          var statearr_19226 = state_19212;
                                          statearr_19226[10] = inst_19187;
                                          return statearr_19226;
                                        }();
                                        var statearr_19227_19290 = state_19212__$1;
                                        statearr_19227_19290[2] = null;
                                        statearr_19227_19290[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19213 === 9) {
                                          var state_19212__$1 = state_19212;
                                          var statearr_19228_19291 = state_19212__$1;
                                          statearr_19228_19291[2] = null;
                                          statearr_19228_19291[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19213 === 5) {
                                            var state_19212__$1 = state_19212;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_19229_19292 = state_19212__$1;
                                              statearr_19229_19292[1] = 8;
                                            } else {
                                              var statearr_19230_19293 = state_19212__$1;
                                              statearr_19230_19293[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_19213 === 14) {
                                              var inst_19190 = state_19212[8];
                                              var inst_19192 = state_19212[11];
                                              var inst_19190__$1 = state_19212[2];
                                              var inst_19191 = inst_19190__$1 == null;
                                              var inst_19192__$1 = cljs.core.not.call(null, inst_19191);
                                              var state_19212__$1 = function() {
                                                var statearr_19231 = state_19212;
                                                statearr_19231[8] = inst_19190__$1;
                                                statearr_19231[11] = inst_19192__$1;
                                                return statearr_19231;
                                              }();
                                              if (inst_19192__$1) {
                                                var statearr_19232_19294 = state_19212__$1;
                                                statearr_19232_19294[1] = 15;
                                              } else {
                                                var statearr_19233_19295 = state_19212__$1;
                                                statearr_19233_19295[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_19213 === 16) {
                                                var inst_19192 = state_19212[11];
                                                var state_19212__$1 = state_19212;
                                                var statearr_19234_19296 = state_19212__$1;
                                                statearr_19234_19296[2] = inst_19192;
                                                statearr_19234_19296[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_19213 === 10) {
                                                  var inst_19184 = state_19212[2];
                                                  var state_19212__$1 = state_19212;
                                                  var statearr_19235_19297 = state_19212__$1;
                                                  statearr_19235_19297[2] = inst_19184;
                                                  statearr_19235_19297[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_19213 === 18) {
                                                    var inst_19195 = state_19212[2];
                                                    var state_19212__$1 = state_19212;
                                                    var statearr_19236_19298 = state_19212__$1;
                                                    statearr_19236_19298[2] = inst_19195;
                                                    statearr_19236_19298[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_19213 === 8) {
                                                      var inst_19181 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_19212__$1 = state_19212;
                                                      var statearr_19237_19299 = state_19212__$1;
                                                      statearr_19237_19299[2] = inst_19181;
                                                      statearr_19237_19299[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6474__auto__, jobs, results, process, async);
        return function(switch__6459__auto__, c__6474__auto__, jobs, results, process, async) {
          return function() {
            var state_machine__6460__auto__ = null;
            var state_machine__6460__auto____0 = function() {
              var statearr_19241 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_19241[0] = state_machine__6460__auto__;
              statearr_19241[1] = 1;
              return statearr_19241;
            };
            var state_machine__6460__auto____1 = function(state_19212) {
              while (true) {
                var ret_value__6461__auto__ = function() {
                  try {
                    while (true) {
                      var result__6462__auto__ = switch__6459__auto__.call(null, state_19212);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6462__auto__;
                      }
                      break;
                    }
                  } catch (e19242) {
                    if (e19242 instanceof Object) {
                      var ex__6463__auto__ = e19242;
                      var statearr_19243_19300 = state_19212;
                      statearr_19243_19300[5] = ex__6463__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19212);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e19242;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__19301 = state_19212;
                  state_19212 = G__19301;
                  continue;
                } else {
                  return ret_value__6461__auto__;
                }
                break;
              }
            };
            state_machine__6460__auto__ = function(state_19212) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6460__auto____0.call(this);
                case 1:
                  return state_machine__6460__auto____1.call(this, state_19212);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
            return state_machine__6460__auto__;
          }();
        }(switch__6459__auto__, c__6474__auto__, jobs, results, process, async);
      }();
      var state__6476__auto__ = function() {
        var statearr_19244 = f__6475__auto__.call(null);
        statearr_19244[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto__;
        return statearr_19244;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
    };
  }(c__6474__auto__, jobs, results, process, async));
  return c__6474__auto__;
};
cljs.core.async.pipeline_async = function() {
  var pipeline_async = null;
  var pipeline_async__4 = function(n, to, af, from) {
    return pipeline_async.call(null, n, to, af, from, true);
  };
  var pipeline_async__5 = function(n, to, af, from, close_QMARK_) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
  };
  pipeline_async = function(n, to, af, from, close_QMARK_) {
    switch(arguments.length) {
      case 4:
        return pipeline_async__4.call(this, n, to, af, from);
      case 5:
        return pipeline_async__5.call(this, n, to, af, from, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline_async.cljs$core$IFn$_invoke$arity$4 = pipeline_async__4;
  pipeline_async.cljs$core$IFn$_invoke$arity$5 = pipeline_async__5;
  return pipeline_async;
}();
cljs.core.async.pipeline = function() {
  var pipeline = null;
  var pipeline__4 = function(n, to, xf, from) {
    return pipeline.call(null, n, to, xf, from, true);
  };
  var pipeline__5 = function(n, to, xf, from, close_QMARK_) {
    return pipeline.call(null, n, to, xf, from, close_QMARK_, null);
  };
  var pipeline__6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
  };
  pipeline = function(n, to, xf, from, close_QMARK_, ex_handler) {
    switch(arguments.length) {
      case 4:
        return pipeline__4.call(this, n, to, xf, from);
      case 5:
        return pipeline__5.call(this, n, to, xf, from, close_QMARK_);
      case 6:
        return pipeline__6.call(this, n, to, xf, from, close_QMARK_, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline.cljs$core$IFn$_invoke$arity$4 = pipeline__4;
  pipeline.cljs$core$IFn$_invoke$arity$5 = pipeline__5;
  pipeline.cljs$core$IFn$_invoke$arity$6 = pipeline__6;
  return pipeline;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__6474__auto___19402 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___19402, tc, fc) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___19402, tc, fc) {
            return function(state_19377) {
              var state_val_19378 = state_19377[1];
              if (state_val_19378 === 7) {
                var inst_19373 = state_19377[2];
                var state_19377__$1 = state_19377;
                var statearr_19379_19403 = state_19377__$1;
                statearr_19379_19403[2] = inst_19373;
                statearr_19379_19403[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19378 === 1) {
                  var state_19377__$1 = state_19377;
                  var statearr_19380_19404 = state_19377__$1;
                  statearr_19380_19404[2] = null;
                  statearr_19380_19404[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19378 === 4) {
                    var inst_19354 = state_19377[7];
                    var inst_19354__$1 = state_19377[2];
                    var inst_19355 = inst_19354__$1 == null;
                    var state_19377__$1 = function() {
                      var statearr_19381 = state_19377;
                      statearr_19381[7] = inst_19354__$1;
                      return statearr_19381;
                    }();
                    if (cljs.core.truth_(inst_19355)) {
                      var statearr_19382_19405 = state_19377__$1;
                      statearr_19382_19405[1] = 5;
                    } else {
                      var statearr_19383_19406 = state_19377__$1;
                      statearr_19383_19406[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19378 === 13) {
                      var state_19377__$1 = state_19377;
                      var statearr_19384_19407 = state_19377__$1;
                      statearr_19384_19407[2] = null;
                      statearr_19384_19407[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19378 === 6) {
                        var inst_19354 = state_19377[7];
                        var inst_19360 = p.call(null, inst_19354);
                        var state_19377__$1 = state_19377;
                        if (cljs.core.truth_(inst_19360)) {
                          var statearr_19385_19408 = state_19377__$1;
                          statearr_19385_19408[1] = 9;
                        } else {
                          var statearr_19386_19409 = state_19377__$1;
                          statearr_19386_19409[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19378 === 3) {
                          var inst_19375 = state_19377[2];
                          var state_19377__$1 = state_19377;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19377__$1, inst_19375);
                        } else {
                          if (state_val_19378 === 12) {
                            var state_19377__$1 = state_19377;
                            var statearr_19387_19410 = state_19377__$1;
                            statearr_19387_19410[2] = null;
                            statearr_19387_19410[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19378 === 2) {
                              var state_19377__$1 = state_19377;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19377__$1, 4, ch);
                            } else {
                              if (state_val_19378 === 11) {
                                var inst_19354 = state_19377[7];
                                var inst_19364 = state_19377[2];
                                var state_19377__$1 = state_19377;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19377__$1, 8, inst_19364, inst_19354);
                              } else {
                                if (state_val_19378 === 9) {
                                  var state_19377__$1 = state_19377;
                                  var statearr_19388_19411 = state_19377__$1;
                                  statearr_19388_19411[2] = tc;
                                  statearr_19388_19411[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19378 === 5) {
                                    var inst_19357 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_19358 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_19377__$1 = function() {
                                      var statearr_19389 = state_19377;
                                      statearr_19389[8] = inst_19357;
                                      return statearr_19389;
                                    }();
                                    var statearr_19390_19412 = state_19377__$1;
                                    statearr_19390_19412[2] = inst_19358;
                                    statearr_19390_19412[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19378 === 14) {
                                      var inst_19371 = state_19377[2];
                                      var state_19377__$1 = state_19377;
                                      var statearr_19391_19413 = state_19377__$1;
                                      statearr_19391_19413[2] = inst_19371;
                                      statearr_19391_19413[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19378 === 10) {
                                        var state_19377__$1 = state_19377;
                                        var statearr_19392_19414 = state_19377__$1;
                                        statearr_19392_19414[2] = fc;
                                        statearr_19392_19414[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19378 === 8) {
                                          var inst_19366 = state_19377[2];
                                          var state_19377__$1 = state_19377;
                                          if (cljs.core.truth_(inst_19366)) {
                                            var statearr_19393_19415 = state_19377__$1;
                                            statearr_19393_19415[1] = 12;
                                          } else {
                                            var statearr_19394_19416 = state_19377__$1;
                                            statearr_19394_19416[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___19402, tc, fc);
          return function(switch__6459__auto__, c__6474__auto___19402, tc, fc) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_19398 = [null, null, null, null, null, null, null, null, null];
                statearr_19398[0] = state_machine__6460__auto__;
                statearr_19398[1] = 1;
                return statearr_19398;
              };
              var state_machine__6460__auto____1 = function(state_19377) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_19377);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e19399) {
                      if (e19399 instanceof Object) {
                        var ex__6463__auto__ = e19399;
                        var statearr_19400_19417 = state_19377;
                        statearr_19400_19417[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19377);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19399;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19418 = state_19377;
                    state_19377 = G__19418;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_19377) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_19377);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___19402, tc, fc);
        }();
        var state__6476__auto__ = function() {
          var statearr_19401 = f__6475__auto__.call(null);
          statearr_19401[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___19402;
          return statearr_19401;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___19402, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__6474__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto__) {
    return function() {
      var f__6475__auto__ = function() {
        var switch__6459__auto__ = function(c__6474__auto__) {
          return function(state_19465) {
            var state_val_19466 = state_19465[1];
            if (state_val_19466 === 7) {
              var inst_19461 = state_19465[2];
              var state_19465__$1 = state_19465;
              var statearr_19467_19483 = state_19465__$1;
              statearr_19467_19483[2] = inst_19461;
              statearr_19467_19483[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19466 === 6) {
                var inst_19454 = state_19465[7];
                var inst_19451 = state_19465[8];
                var inst_19458 = f.call(null, inst_19451, inst_19454);
                var inst_19451__$1 = inst_19458;
                var state_19465__$1 = function() {
                  var statearr_19468 = state_19465;
                  statearr_19468[8] = inst_19451__$1;
                  return statearr_19468;
                }();
                var statearr_19469_19484 = state_19465__$1;
                statearr_19469_19484[2] = null;
                statearr_19469_19484[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19466 === 5) {
                  var inst_19451 = state_19465[8];
                  var state_19465__$1 = state_19465;
                  var statearr_19470_19485 = state_19465__$1;
                  statearr_19470_19485[2] = inst_19451;
                  statearr_19470_19485[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19466 === 4) {
                    var inst_19454 = state_19465[7];
                    var inst_19454__$1 = state_19465[2];
                    var inst_19455 = inst_19454__$1 == null;
                    var state_19465__$1 = function() {
                      var statearr_19471 = state_19465;
                      statearr_19471[7] = inst_19454__$1;
                      return statearr_19471;
                    }();
                    if (cljs.core.truth_(inst_19455)) {
                      var statearr_19472_19486 = state_19465__$1;
                      statearr_19472_19486[1] = 5;
                    } else {
                      var statearr_19473_19487 = state_19465__$1;
                      statearr_19473_19487[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19466 === 3) {
                      var inst_19463 = state_19465[2];
                      var state_19465__$1 = state_19465;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19465__$1, inst_19463);
                    } else {
                      if (state_val_19466 === 2) {
                        var state_19465__$1 = state_19465;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19465__$1, 4, ch);
                      } else {
                        if (state_val_19466 === 1) {
                          var inst_19451 = init;
                          var state_19465__$1 = function() {
                            var statearr_19474 = state_19465;
                            statearr_19474[8] = inst_19451;
                            return statearr_19474;
                          }();
                          var statearr_19475_19488 = state_19465__$1;
                          statearr_19475_19488[2] = null;
                          statearr_19475_19488[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6474__auto__);
        return function(switch__6459__auto__, c__6474__auto__) {
          return function() {
            var state_machine__6460__auto__ = null;
            var state_machine__6460__auto____0 = function() {
              var statearr_19479 = [null, null, null, null, null, null, null, null, null];
              statearr_19479[0] = state_machine__6460__auto__;
              statearr_19479[1] = 1;
              return statearr_19479;
            };
            var state_machine__6460__auto____1 = function(state_19465) {
              while (true) {
                var ret_value__6461__auto__ = function() {
                  try {
                    while (true) {
                      var result__6462__auto__ = switch__6459__auto__.call(null, state_19465);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6462__auto__;
                      }
                      break;
                    }
                  } catch (e19480) {
                    if (e19480 instanceof Object) {
                      var ex__6463__auto__ = e19480;
                      var statearr_19481_19489 = state_19465;
                      statearr_19481_19489[5] = ex__6463__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19465);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e19480;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__19490 = state_19465;
                  state_19465 = G__19490;
                  continue;
                } else {
                  return ret_value__6461__auto__;
                }
                break;
              }
            };
            state_machine__6460__auto__ = function(state_19465) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6460__auto____0.call(this);
                case 1:
                  return state_machine__6460__auto____1.call(this, state_19465);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
            return state_machine__6460__auto__;
          }();
        }(switch__6459__auto__, c__6474__auto__);
      }();
      var state__6476__auto__ = function() {
        var statearr_19482 = f__6475__auto__.call(null);
        statearr_19482[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto__;
        return statearr_19482;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
    };
  }(c__6474__auto__));
  return c__6474__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__6474__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto__) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto__) {
            return function(state_19564) {
              var state_val_19565 = state_19564[1];
              if (state_val_19565 === 7) {
                var inst_19546 = state_19564[2];
                var state_19564__$1 = state_19564;
                var statearr_19566_19589 = state_19564__$1;
                statearr_19566_19589[2] = inst_19546;
                statearr_19566_19589[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19565 === 1) {
                  var inst_19540 = cljs.core.seq.call(null, coll);
                  var inst_19541 = inst_19540;
                  var state_19564__$1 = function() {
                    var statearr_19567 = state_19564;
                    statearr_19567[7] = inst_19541;
                    return statearr_19567;
                  }();
                  var statearr_19568_19590 = state_19564__$1;
                  statearr_19568_19590[2] = null;
                  statearr_19568_19590[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19565 === 4) {
                    var inst_19541 = state_19564[7];
                    var inst_19544 = cljs.core.first.call(null, inst_19541);
                    var state_19564__$1 = state_19564;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19564__$1, 7, ch, inst_19544);
                  } else {
                    if (state_val_19565 === 13) {
                      var inst_19558 = state_19564[2];
                      var state_19564__$1 = state_19564;
                      var statearr_19569_19591 = state_19564__$1;
                      statearr_19569_19591[2] = inst_19558;
                      statearr_19569_19591[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19565 === 6) {
                        var inst_19549 = state_19564[2];
                        var state_19564__$1 = state_19564;
                        if (cljs.core.truth_(inst_19549)) {
                          var statearr_19570_19592 = state_19564__$1;
                          statearr_19570_19592[1] = 8;
                        } else {
                          var statearr_19571_19593 = state_19564__$1;
                          statearr_19571_19593[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19565 === 3) {
                          var inst_19562 = state_19564[2];
                          var state_19564__$1 = state_19564;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19564__$1, inst_19562);
                        } else {
                          if (state_val_19565 === 12) {
                            var state_19564__$1 = state_19564;
                            var statearr_19572_19594 = state_19564__$1;
                            statearr_19572_19594[2] = null;
                            statearr_19572_19594[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19565 === 2) {
                              var inst_19541 = state_19564[7];
                              var state_19564__$1 = state_19564;
                              if (cljs.core.truth_(inst_19541)) {
                                var statearr_19573_19595 = state_19564__$1;
                                statearr_19573_19595[1] = 4;
                              } else {
                                var statearr_19574_19596 = state_19564__$1;
                                statearr_19574_19596[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19565 === 11) {
                                var inst_19555 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_19564__$1 = state_19564;
                                var statearr_19575_19597 = state_19564__$1;
                                statearr_19575_19597[2] = inst_19555;
                                statearr_19575_19597[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19565 === 9) {
                                  var state_19564__$1 = state_19564;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_19576_19598 = state_19564__$1;
                                    statearr_19576_19598[1] = 11;
                                  } else {
                                    var statearr_19577_19599 = state_19564__$1;
                                    statearr_19577_19599[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19565 === 5) {
                                    var inst_19541 = state_19564[7];
                                    var state_19564__$1 = state_19564;
                                    var statearr_19578_19600 = state_19564__$1;
                                    statearr_19578_19600[2] = inst_19541;
                                    statearr_19578_19600[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19565 === 10) {
                                      var inst_19560 = state_19564[2];
                                      var state_19564__$1 = state_19564;
                                      var statearr_19579_19601 = state_19564__$1;
                                      statearr_19579_19601[2] = inst_19560;
                                      statearr_19579_19601[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19565 === 8) {
                                        var inst_19541 = state_19564[7];
                                        var inst_19551 = cljs.core.next.call(null, inst_19541);
                                        var inst_19541__$1 = inst_19551;
                                        var state_19564__$1 = function() {
                                          var statearr_19580 = state_19564;
                                          statearr_19580[7] = inst_19541__$1;
                                          return statearr_19580;
                                        }();
                                        var statearr_19581_19602 = state_19564__$1;
                                        statearr_19581_19602[2] = null;
                                        statearr_19581_19602[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto__);
          return function(switch__6459__auto__, c__6474__auto__) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_19585 = [null, null, null, null, null, null, null, null];
                statearr_19585[0] = state_machine__6460__auto__;
                statearr_19585[1] = 1;
                return statearr_19585;
              };
              var state_machine__6460__auto____1 = function(state_19564) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_19564);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e19586) {
                      if (e19586 instanceof Object) {
                        var ex__6463__auto__ = e19586;
                        var statearr_19587_19603 = state_19564;
                        statearr_19587_19603[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19564);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19586;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19604 = state_19564;
                    state_19564 = G__19604;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_19564) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_19564);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto__);
        }();
        var state__6476__auto__ = function() {
          var statearr_19588 = f__6475__auto__.call(null);
          statearr_19588[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto__;
          return statearr_19588;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto__));
    return c__6474__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj19606 = {};
  return obj19606;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3749__auto__ = _;
    if (and__3749__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4400__auto__ = _ == null ? null : _;
    return function() {
      var or__3761__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj19608 = {};
  return obj19608;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3749__auto__ = m;
    if (and__3749__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4400__auto__ = m == null ? null : m;
    return function() {
      var or__3761__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3749__auto__ = m;
    if (and__3749__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4400__auto__ = m == null ? null : m;
    return function() {
      var or__3761__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3749__auto__ = m;
    if (and__3749__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4400__auto__ = m == null ? null : m;
    return function() {
      var or__3761__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t19830 !== "undefined") {
    } else {
      cljs.core.async.t19830 = function(cs, ch, mult, meta19831) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta19831 = meta19831;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t19830.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t19830.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t19830.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t19830.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t19830.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t19830.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t19830.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_19832) {
          var self__ = this;
          var _19832__$1 = this;
          return self__.meta19831;
        };
      }(cs);
      cljs.core.async.t19830.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_19832, meta19831__$1) {
          var self__ = this;
          var _19832__$1 = this;
          return new cljs.core.async.t19830(self__.cs, self__.ch, self__.mult, meta19831__$1);
        };
      }(cs);
      cljs.core.async.t19830.cljs$lang$type = true;
      cljs.core.async.t19830.cljs$lang$ctorStr = "cljs.core.async/t19830";
      cljs.core.async.t19830.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
          return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t19830");
        };
      }(cs);
      cljs.core.async.__GT_t19830 = function(cs) {
        return function __GT_t19830(cs__$1, ch__$1, mult__$1, meta19831) {
          return new cljs.core.async.t19830(cs__$1, ch__$1, mult__$1, meta19831);
        };
      }(cs);
    }
    return new cljs.core.async.t19830(cs, ch, mult, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 48, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 397, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 390, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], 
    null));
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__6474__auto___20051 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___20051, cs, m, dchan, dctr, done) {
    return function() {
      var f__6475__auto__ = function() {
        var switch__6459__auto__ = function(c__6474__auto___20051, cs, m, dchan, dctr, done) {
          return function(state_19963) {
            var state_val_19964 = state_19963[1];
            if (state_val_19964 === 7) {
              var inst_19959 = state_19963[2];
              var state_19963__$1 = state_19963;
              var statearr_19965_20052 = state_19963__$1;
              statearr_19965_20052[2] = inst_19959;
              statearr_19965_20052[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19964 === 20) {
                var inst_19864 = state_19963[7];
                var inst_19874 = cljs.core.first.call(null, inst_19864);
                var inst_19875 = cljs.core.nth.call(null, inst_19874, 0, null);
                var inst_19876 = cljs.core.nth.call(null, inst_19874, 1, null);
                var state_19963__$1 = function() {
                  var statearr_19966 = state_19963;
                  statearr_19966[8] = inst_19875;
                  return statearr_19966;
                }();
                if (cljs.core.truth_(inst_19876)) {
                  var statearr_19967_20053 = state_19963__$1;
                  statearr_19967_20053[1] = 22;
                } else {
                  var statearr_19968_20054 = state_19963__$1;
                  statearr_19968_20054[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19964 === 27) {
                  var inst_19911 = state_19963[9];
                  var inst_19835 = state_19963[10];
                  var inst_19906 = state_19963[11];
                  var inst_19904 = state_19963[12];
                  var inst_19911__$1 = cljs.core._nth.call(null, inst_19904, inst_19906);
                  var inst_19912 = cljs.core.async.put_BANG_.call(null, inst_19911__$1, inst_19835, done);
                  var state_19963__$1 = function() {
                    var statearr_19969 = state_19963;
                    statearr_19969[9] = inst_19911__$1;
                    return statearr_19969;
                  }();
                  if (cljs.core.truth_(inst_19912)) {
                    var statearr_19970_20055 = state_19963__$1;
                    statearr_19970_20055[1] = 30;
                  } else {
                    var statearr_19971_20056 = state_19963__$1;
                    statearr_19971_20056[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19964 === 1) {
                    var state_19963__$1 = state_19963;
                    var statearr_19972_20057 = state_19963__$1;
                    statearr_19972_20057[2] = null;
                    statearr_19972_20057[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19964 === 24) {
                      var inst_19864 = state_19963[7];
                      var inst_19881 = state_19963[2];
                      var inst_19882 = cljs.core.next.call(null, inst_19864);
                      var inst_19844 = inst_19882;
                      var inst_19845 = null;
                      var inst_19846 = 0;
                      var inst_19847 = 0;
                      var state_19963__$1 = function() {
                        var statearr_19973 = state_19963;
                        statearr_19973[13] = inst_19881;
                        statearr_19973[14] = inst_19844;
                        statearr_19973[15] = inst_19846;
                        statearr_19973[16] = inst_19845;
                        statearr_19973[17] = inst_19847;
                        return statearr_19973;
                      }();
                      var statearr_19974_20058 = state_19963__$1;
                      statearr_19974_20058[2] = null;
                      statearr_19974_20058[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19964 === 39) {
                        var state_19963__$1 = state_19963;
                        var statearr_19978_20059 = state_19963__$1;
                        statearr_19978_20059[2] = null;
                        statearr_19978_20059[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19964 === 4) {
                          var inst_19835 = state_19963[10];
                          var inst_19835__$1 = state_19963[2];
                          var inst_19836 = inst_19835__$1 == null;
                          var state_19963__$1 = function() {
                            var statearr_19979 = state_19963;
                            statearr_19979[10] = inst_19835__$1;
                            return statearr_19979;
                          }();
                          if (cljs.core.truth_(inst_19836)) {
                            var statearr_19980_20060 = state_19963__$1;
                            statearr_19980_20060[1] = 5;
                          } else {
                            var statearr_19981_20061 = state_19963__$1;
                            statearr_19981_20061[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19964 === 15) {
                            var inst_19844 = state_19963[14];
                            var inst_19846 = state_19963[15];
                            var inst_19845 = state_19963[16];
                            var inst_19847 = state_19963[17];
                            var inst_19860 = state_19963[2];
                            var inst_19861 = inst_19847 + 1;
                            var tmp19975 = inst_19844;
                            var tmp19976 = inst_19846;
                            var tmp19977 = inst_19845;
                            var inst_19844__$1 = tmp19975;
                            var inst_19845__$1 = tmp19977;
                            var inst_19846__$1 = tmp19976;
                            var inst_19847__$1 = inst_19861;
                            var state_19963__$1 = function() {
                              var statearr_19982 = state_19963;
                              statearr_19982[18] = inst_19860;
                              statearr_19982[14] = inst_19844__$1;
                              statearr_19982[15] = inst_19846__$1;
                              statearr_19982[16] = inst_19845__$1;
                              statearr_19982[17] = inst_19847__$1;
                              return statearr_19982;
                            }();
                            var statearr_19983_20062 = state_19963__$1;
                            statearr_19983_20062[2] = null;
                            statearr_19983_20062[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19964 === 21) {
                              var inst_19885 = state_19963[2];
                              var state_19963__$1 = state_19963;
                              var statearr_19987_20063 = state_19963__$1;
                              statearr_19987_20063[2] = inst_19885;
                              statearr_19987_20063[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19964 === 31) {
                                var inst_19911 = state_19963[9];
                                var inst_19915 = done.call(null, null);
                                var inst_19916 = cljs.core.async.untap_STAR_.call(null, m, inst_19911);
                                var state_19963__$1 = function() {
                                  var statearr_19988 = state_19963;
                                  statearr_19988[19] = inst_19915;
                                  return statearr_19988;
                                }();
                                var statearr_19989_20064 = state_19963__$1;
                                statearr_19989_20064[2] = inst_19916;
                                statearr_19989_20064[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19964 === 32) {
                                  var inst_19903 = state_19963[20];
                                  var inst_19905 = state_19963[21];
                                  var inst_19906 = state_19963[11];
                                  var inst_19904 = state_19963[12];
                                  var inst_19918 = state_19963[2];
                                  var inst_19919 = inst_19906 + 1;
                                  var tmp19984 = inst_19903;
                                  var tmp19985 = inst_19905;
                                  var tmp19986 = inst_19904;
                                  var inst_19903__$1 = tmp19984;
                                  var inst_19904__$1 = tmp19986;
                                  var inst_19905__$1 = tmp19985;
                                  var inst_19906__$1 = inst_19919;
                                  var state_19963__$1 = function() {
                                    var statearr_19990 = state_19963;
                                    statearr_19990[22] = inst_19918;
                                    statearr_19990[20] = inst_19903__$1;
                                    statearr_19990[21] = inst_19905__$1;
                                    statearr_19990[11] = inst_19906__$1;
                                    statearr_19990[12] = inst_19904__$1;
                                    return statearr_19990;
                                  }();
                                  var statearr_19991_20065 = state_19963__$1;
                                  statearr_19991_20065[2] = null;
                                  statearr_19991_20065[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19964 === 40) {
                                    var inst_19931 = state_19963[23];
                                    var inst_19935 = done.call(null, null);
                                    var inst_19936 = cljs.core.async.untap_STAR_.call(null, m, inst_19931);
                                    var state_19963__$1 = function() {
                                      var statearr_19992 = state_19963;
                                      statearr_19992[24] = inst_19935;
                                      return statearr_19992;
                                    }();
                                    var statearr_19993_20066 = state_19963__$1;
                                    statearr_19993_20066[2] = inst_19936;
                                    statearr_19993_20066[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19964 === 33) {
                                      var inst_19922 = state_19963[25];
                                      var inst_19924 = cljs.core.chunked_seq_QMARK_.call(null, inst_19922);
                                      var state_19963__$1 = state_19963;
                                      if (inst_19924) {
                                        var statearr_19994_20067 = state_19963__$1;
                                        statearr_19994_20067[1] = 36;
                                      } else {
                                        var statearr_19995_20068 = state_19963__$1;
                                        statearr_19995_20068[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19964 === 13) {
                                        var inst_19854 = state_19963[26];
                                        var inst_19857 = cljs.core.async.close_BANG_.call(null, inst_19854);
                                        var state_19963__$1 = state_19963;
                                        var statearr_19996_20069 = state_19963__$1;
                                        statearr_19996_20069[2] = inst_19857;
                                        statearr_19996_20069[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19964 === 22) {
                                          var inst_19875 = state_19963[8];
                                          var inst_19878 = cljs.core.async.close_BANG_.call(null, inst_19875);
                                          var state_19963__$1 = state_19963;
                                          var statearr_19997_20070 = state_19963__$1;
                                          statearr_19997_20070[2] = inst_19878;
                                          statearr_19997_20070[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19964 === 36) {
                                            var inst_19922 = state_19963[25];
                                            var inst_19926 = cljs.core.chunk_first.call(null, inst_19922);
                                            var inst_19927 = cljs.core.chunk_rest.call(null, inst_19922);
                                            var inst_19928 = cljs.core.count.call(null, inst_19926);
                                            var inst_19903 = inst_19927;
                                            var inst_19904 = inst_19926;
                                            var inst_19905 = inst_19928;
                                            var inst_19906 = 0;
                                            var state_19963__$1 = function() {
                                              var statearr_19998 = state_19963;
                                              statearr_19998[20] = inst_19903;
                                              statearr_19998[21] = inst_19905;
                                              statearr_19998[11] = inst_19906;
                                              statearr_19998[12] = inst_19904;
                                              return statearr_19998;
                                            }();
                                            var statearr_19999_20071 = state_19963__$1;
                                            statearr_19999_20071[2] = null;
                                            statearr_19999_20071[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_19964 === 41) {
                                              var inst_19922 = state_19963[25];
                                              var inst_19938 = state_19963[2];
                                              var inst_19939 = cljs.core.next.call(null, inst_19922);
                                              var inst_19903 = inst_19939;
                                              var inst_19904 = null;
                                              var inst_19905 = 0;
                                              var inst_19906 = 0;
                                              var state_19963__$1 = function() {
                                                var statearr_20000 = state_19963;
                                                statearr_20000[27] = inst_19938;
                                                statearr_20000[20] = inst_19903;
                                                statearr_20000[21] = inst_19905;
                                                statearr_20000[11] = inst_19906;
                                                statearr_20000[12] = inst_19904;
                                                return statearr_20000;
                                              }();
                                              var statearr_20001_20072 = state_19963__$1;
                                              statearr_20001_20072[2] = null;
                                              statearr_20001_20072[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_19964 === 43) {
                                                var state_19963__$1 = state_19963;
                                                var statearr_20002_20073 = state_19963__$1;
                                                statearr_20002_20073[2] = null;
                                                statearr_20002_20073[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_19964 === 29) {
                                                  var inst_19947 = state_19963[2];
                                                  var state_19963__$1 = state_19963;
                                                  var statearr_20003_20074 = state_19963__$1;
                                                  statearr_20003_20074[2] = inst_19947;
                                                  statearr_20003_20074[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_19964 === 44) {
                                                    var inst_19956 = state_19963[2];
                                                    var state_19963__$1 = function() {
                                                      var statearr_20004 = state_19963;
                                                      statearr_20004[28] = inst_19956;
                                                      return statearr_20004;
                                                    }();
                                                    var statearr_20005_20075 = state_19963__$1;
                                                    statearr_20005_20075[2] = null;
                                                    statearr_20005_20075[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_19964 === 6) {
                                                      var inst_19895 = state_19963[29];
                                                      var inst_19894 = cljs.core.deref.call(null, cs);
                                                      var inst_19895__$1 = cljs.core.keys.call(null, inst_19894);
                                                      var inst_19896 = cljs.core.count.call(null, inst_19895__$1);
                                                      var inst_19897 = cljs.core.reset_BANG_.call(null, dctr, inst_19896);
                                                      var inst_19902 = cljs.core.seq.call(null, inst_19895__$1);
                                                      var inst_19903 = inst_19902;
                                                      var inst_19904 = null;
                                                      var inst_19905 = 0;
                                                      var inst_19906 = 0;
                                                      var state_19963__$1 = function() {
                                                        var statearr_20006 = state_19963;
                                                        statearr_20006[30] = inst_19897;
                                                        statearr_20006[29] = inst_19895__$1;
                                                        statearr_20006[20] = inst_19903;
                                                        statearr_20006[21] = inst_19905;
                                                        statearr_20006[11] = inst_19906;
                                                        statearr_20006[12] = inst_19904;
                                                        return statearr_20006;
                                                      }();
                                                      var statearr_20007_20076 = state_19963__$1;
                                                      statearr_20007_20076[2] = null;
                                                      statearr_20007_20076[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_19964 === 28) {
                                                        var inst_19903 = state_19963[20];
                                                        var inst_19922 = state_19963[25];
                                                        var inst_19922__$1 = cljs.core.seq.call(null, inst_19903);
                                                        var state_19963__$1 = function() {
                                                          var statearr_20008 = state_19963;
                                                          statearr_20008[25] = inst_19922__$1;
                                                          return statearr_20008;
                                                        }();
                                                        if (inst_19922__$1) {
                                                          var statearr_20009_20077 = state_19963__$1;
                                                          statearr_20009_20077[1] = 33;
                                                        } else {
                                                          var statearr_20010_20078 = state_19963__$1;
                                                          statearr_20010_20078[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_19964 === 25) {
                                                          var inst_19905 = state_19963[21];
                                                          var inst_19906 = state_19963[11];
                                                          var inst_19908 = inst_19906 < inst_19905;
                                                          var inst_19909 = inst_19908;
                                                          var state_19963__$1 = state_19963;
                                                          if (cljs.core.truth_(inst_19909)) {
                                                            var statearr_20011_20079 = state_19963__$1;
                                                            statearr_20011_20079[1] = 27;
                                                          } else {
                                                            var statearr_20012_20080 = state_19963__$1;
                                                            statearr_20012_20080[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_19964 === 34) {
                                                            var state_19963__$1 = state_19963;
                                                            var statearr_20013_20081 = state_19963__$1;
                                                            statearr_20013_20081[2] = null;
                                                            statearr_20013_20081[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_19964 === 17) {
                                                              var state_19963__$1 = state_19963;
                                                              var statearr_20014_20082 = state_19963__$1;
                                                              statearr_20014_20082[2] = null;
                                                              statearr_20014_20082[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_19964 === 3) {
                                                                var inst_19961 = state_19963[2];
                                                                var state_19963__$1 = state_19963;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19963__$1, inst_19961);
                                                              } else {
                                                                if (state_val_19964 === 12) {
                                                                  var inst_19890 = state_19963[2];
                                                                  var state_19963__$1 = state_19963;
                                                                  var statearr_20015_20083 = state_19963__$1;
                                                                  statearr_20015_20083[2] = inst_19890;
                                                                  statearr_20015_20083[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_19964 === 2) {
                                                                    var state_19963__$1 = state_19963;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19963__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_19964 === 23) {
                                                                      var state_19963__$1 = state_19963;
                                                                      var statearr_20016_20084 = state_19963__$1;
                                                                      statearr_20016_20084[2] = null;
                                                                      statearr_20016_20084[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_19964 === 35) {
                                                                        var inst_19945 = state_19963[2];
                                                                        var state_19963__$1 = state_19963;
                                                                        var statearr_20017_20085 = state_19963__$1;
                                                                        statearr_20017_20085[2] = inst_19945;
                                                                        statearr_20017_20085[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_19964 === 19) {
                                                                          var inst_19864 = state_19963[7];
                                                                          var inst_19868 = cljs.core.chunk_first.call(null, inst_19864);
                                                                          var inst_19869 = cljs.core.chunk_rest.call(null, inst_19864);
                                                                          var inst_19870 = cljs.core.count.call(null, inst_19868);
                                                                          var inst_19844 = inst_19869;
                                                                          var inst_19845 = inst_19868;
                                                                          var inst_19846 = inst_19870;
                                                                          var inst_19847 = 0;
                                                                          var state_19963__$1 = function() {
                                                                            var statearr_20018 = state_19963;
                                                                            statearr_20018[14] = inst_19844;
                                                                            statearr_20018[15] = inst_19846;
                                                                            statearr_20018[16] = inst_19845;
                                                                            statearr_20018[17] = inst_19847;
                                                                            return statearr_20018;
                                                                          }();
                                                                          var statearr_20019_20086 = state_19963__$1;
                                                                          statearr_20019_20086[2] = null;
                                                                          statearr_20019_20086[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_19964 === 11) {
                                                                            var inst_19844 = state_19963[14];
                                                                            var inst_19864 = state_19963[7];
                                                                            var inst_19864__$1 = cljs.core.seq.call(null, inst_19844);
                                                                            var state_19963__$1 = function() {
                                                                              var statearr_20020 = state_19963;
                                                                              statearr_20020[7] = inst_19864__$1;
                                                                              return statearr_20020;
                                                                            }();
                                                                            if (inst_19864__$1) {
                                                                              var statearr_20021_20087 = state_19963__$1;
                                                                              statearr_20021_20087[1] = 16;
                                                                            } else {
                                                                              var statearr_20022_20088 = state_19963__$1;
                                                                              statearr_20022_20088[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_19964 === 9) {
                                                                              var inst_19892 = state_19963[2];
                                                                              var state_19963__$1 = state_19963;
                                                                              var statearr_20023_20089 = state_19963__$1;
                                                                              statearr_20023_20089[2] = inst_19892;
                                                                              statearr_20023_20089[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_19964 === 5) {
                                                                                var inst_19842 = cljs.core.deref.call(null, cs);
                                                                                var inst_19843 = cljs.core.seq.call(null, inst_19842);
                                                                                var inst_19844 = inst_19843;
                                                                                var inst_19845 = null;
                                                                                var inst_19846 = 0;
                                                                                var inst_19847 = 0;
                                                                                var state_19963__$1 = function() {
                                                                                  var statearr_20024 = state_19963;
                                                                                  statearr_20024[14] = inst_19844;
                                                                                  statearr_20024[15] = inst_19846;
                                                                                  statearr_20024[16] = inst_19845;
                                                                                  statearr_20024[17] = inst_19847;
                                                                                  return statearr_20024;
                                                                                }();
                                                                                var statearr_20025_20090 = state_19963__$1;
                                                                                statearr_20025_20090[2] = null;
                                                                                statearr_20025_20090[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_19964 === 14) {
                                                                                  var state_19963__$1 = state_19963;
                                                                                  var statearr_20026_20091 = state_19963__$1;
                                                                                  statearr_20026_20091[2] = null;
                                                                                  statearr_20026_20091[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_19964 === 45) {
                                                                                    var inst_19953 = state_19963[2];
                                                                                    var state_19963__$1 = state_19963;
                                                                                    var statearr_20027_20092 = state_19963__$1;
                                                                                    statearr_20027_20092[2] = inst_19953;
                                                                                    statearr_20027_20092[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_19964 === 26) {
                                                                                      var inst_19895 = state_19963[29];
                                                                                      var inst_19949 = state_19963[2];
                                                                                      var inst_19950 = cljs.core.seq.call(null, inst_19895);
                                                                                      var state_19963__$1 = function() {
                                                                                        var statearr_20028 = state_19963;
                                                                                        statearr_20028[31] = inst_19949;
                                                                                        return statearr_20028;
                                                                                      }();
                                                                                      if (inst_19950) {
                                                                                        var statearr_20029_20093 = state_19963__$1;
                                                                                        statearr_20029_20093[1] = 42;
                                                                                      } else {
                                                                                        var statearr_20030_20094 = state_19963__$1;
                                                                                        statearr_20030_20094[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_19964 === 16) {
                                                                                        var inst_19864 = state_19963[7];
                                                                                        var inst_19866 = cljs.core.chunked_seq_QMARK_.call(null, inst_19864);
                                                                                        var state_19963__$1 = state_19963;
                                                                                        if (inst_19866) {
                                                                                          var statearr_20031_20095 = state_19963__$1;
                                                                                          statearr_20031_20095[1] = 19;
                                                                                        } else {
                                                                                          var statearr_20032_20096 = state_19963__$1;
                                                                                          statearr_20032_20096[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_19964 === 38) {
                                                                                          var inst_19942 = state_19963[2];
                                                                                          var state_19963__$1 = state_19963;
                                                                                          var statearr_20033_20097 = state_19963__$1;
                                                                                          statearr_20033_20097[2] = inst_19942;
                                                                                          statearr_20033_20097[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_19964 === 30) {
                                                                                            var state_19963__$1 = state_19963;
                                                                                            var statearr_20034_20098 = state_19963__$1;
                                                                                            statearr_20034_20098[2] = null;
                                                                                            statearr_20034_20098[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_19964 === 10) {
                                                                                              var inst_19845 = state_19963[16];
                                                                                              var inst_19847 = state_19963[17];
                                                                                              var inst_19853 = cljs.core._nth.call(null, inst_19845, inst_19847);
                                                                                              var inst_19854 = cljs.core.nth.call(null, inst_19853, 0, null);
                                                                                              var inst_19855 = cljs.core.nth.call(null, inst_19853, 1, null);
                                                                                              var state_19963__$1 = function() {
                                                                                                var statearr_20035 = state_19963;
                                                                                                statearr_20035[26] = inst_19854;
                                                                                                return statearr_20035;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_19855)) {
                                                                                                var statearr_20036_20099 = state_19963__$1;
                                                                                                statearr_20036_20099[1] = 13;
                                                                                              } else {
                                                                                                var statearr_20037_20100 = state_19963__$1;
                                                                                                statearr_20037_20100[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_19964 === 18) {
                                                                                                var inst_19888 = state_19963[2];
                                                                                                var state_19963__$1 = state_19963;
                                                                                                var statearr_20038_20101 = state_19963__$1;
                                                                                                statearr_20038_20101[2] = inst_19888;
                                                                                                statearr_20038_20101[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_19964 === 42) {
                                                                                                  var state_19963__$1 = state_19963;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19963__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_19964 === 37) {
                                                                                                    var inst_19835 = state_19963[10];
                                                                                                    var inst_19922 = state_19963[25];
                                                                                                    var inst_19931 = state_19963[23];
                                                                                                    var inst_19931__$1 = cljs.core.first.call(null, inst_19922);
                                                                                                    var inst_19932 = cljs.core.async.put_BANG_.call(null, inst_19931__$1, inst_19835, done);
                                                                                                    var state_19963__$1 = function() {
                                                                                                      var statearr_20039 = state_19963;
                                                                                                      statearr_20039[23] = inst_19931__$1;
                                                                                                      return statearr_20039;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_19932)) {
                                                                                                      var statearr_20040_20102 = state_19963__$1;
                                                                                                      statearr_20040_20102[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_20041_20103 = state_19963__$1;
                                                                                                      statearr_20041_20103[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_19964 === 8) {
                                                                                                      var inst_19846 = state_19963[15];
                                                                                                      var inst_19847 = state_19963[17];
                                                                                                      var inst_19849 = inst_19847 < inst_19846;
                                                                                                      var inst_19850 = inst_19849;
                                                                                                      var state_19963__$1 = state_19963;
                                                                                                      if (cljs.core.truth_(inst_19850)) {
                                                                                                        var statearr_20042_20104 = state_19963__$1;
                                                                                                        statearr_20042_20104[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_20043_20105 = state_19963__$1;
                                                                                                        statearr_20043_20105[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6474__auto___20051, cs, m, dchan, dctr, done);
        return function(switch__6459__auto__, c__6474__auto___20051, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__6460__auto__ = null;
            var state_machine__6460__auto____0 = function() {
              var statearr_20047 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_20047[0] = state_machine__6460__auto__;
              statearr_20047[1] = 1;
              return statearr_20047;
            };
            var state_machine__6460__auto____1 = function(state_19963) {
              while (true) {
                var ret_value__6461__auto__ = function() {
                  try {
                    while (true) {
                      var result__6462__auto__ = switch__6459__auto__.call(null, state_19963);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6462__auto__;
                      }
                      break;
                    }
                  } catch (e20048) {
                    if (e20048 instanceof Object) {
                      var ex__6463__auto__ = e20048;
                      var statearr_20049_20106 = state_19963;
                      statearr_20049_20106[5] = ex__6463__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19963);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20048;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20107 = state_19963;
                  state_19963 = G__20107;
                  continue;
                } else {
                  return ret_value__6461__auto__;
                }
                break;
              }
            };
            state_machine__6460__auto__ = function(state_19963) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6460__auto____0.call(this);
                case 1:
                  return state_machine__6460__auto____1.call(this, state_19963);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
            return state_machine__6460__auto__;
          }();
        }(switch__6459__auto__, c__6474__auto___20051, cs, m, dchan, dctr, done);
      }();
      var state__6476__auto__ = function() {
        var statearr_20050 = f__6475__auto__.call(null);
        statearr_20050[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___20051;
        return statearr_20050;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
    };
  }(c__6474__auto___20051, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj20109 = {};
  return obj20109;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3749__auto__ = m;
    if (and__3749__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4400__auto__ = m == null ? null : m;
    return function() {
      var or__3761__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3749__auto__ = m;
    if (and__3749__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4400__auto__ = m == null ? null : m;
    return function() {
      var or__3761__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3749__auto__ = m;
    if (and__3749__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4400__auto__ = m == null ? null : m;
    return function() {
      var or__3761__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3749__auto__ = m;
    if (and__3749__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4400__auto__ = m == null ? null : m;
    return function() {
      var or__3761__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3749__auto__ = m;
    if (and__3749__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4400__auto__ = m == null ? null : m;
    return function() {
      var or__3761__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__20110) {
    var map__20115 = p__20110;
    var map__20115__$1 = cljs.core.seq_QMARK_.call(null, map__20115) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20115) : map__20115;
    var opts = map__20115__$1;
    var statearr_20116_20119 = state;
    statearr_20116_20119[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__20115, map__20115__$1, opts) {
      return function(val) {
        var statearr_20117_20120 = state;
        statearr_20117_20120[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__20115, map__20115__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_20118_20121 = state;
      statearr_20118_20121[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__20110 = null;
    if (arguments.length > 3) {
      p__20110 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__20110);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__20122) {
    var state = cljs.core.first(arglist__20122);
    arglist__20122 = cljs.core.next(arglist__20122);
    var cont_block = cljs.core.first(arglist__20122);
    arglist__20122 = cljs.core.next(arglist__20122);
    var ports = cljs.core.first(arglist__20122);
    var p__20110 = cljs.core.rest(arglist__20122);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__20110);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t20242 !== "undefined") {
    } else {
      cljs.core.async.t20242 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta20243) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta20243 = meta20243;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t20242.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t20242.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20242.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20242.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20242.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20242.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20242.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t20242.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20242.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_20244) {
          var self__ = this;
          var _20244__$1 = this;
          return self__.meta20243;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20242.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_20244, meta20243__$1) {
          var self__ = this;
          var _20244__$1 = this;
          return new cljs.core.async.t20242(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta20243__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20242.cljs$lang$type = true;
      cljs.core.async.t20242.cljs$lang$ctorStr = "cljs.core.async/t20242";
      cljs.core.async.t20242.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
          return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t20242");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t20242 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t20242(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta20243) {
          return new cljs.core.async.t20242(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta20243);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t20242(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 25, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 510, new cljs.core.Keyword(null, "column", "column", 2078222095), 11, new cljs.core.Keyword(null, "line", "line", 212345235), 499, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], 
    null));
  }();
  var c__6474__auto___20361 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___20361, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__6475__auto__ = function() {
        var switch__6459__auto__ = function(c__6474__auto___20361, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_20314) {
            var state_val_20315 = state_20314[1];
            if (state_val_20315 === 7) {
              var inst_20258 = state_20314[7];
              var inst_20263 = cljs.core.apply.call(null, cljs.core.hash_map, inst_20258);
              var state_20314__$1 = state_20314;
              var statearr_20316_20362 = state_20314__$1;
              statearr_20316_20362[2] = inst_20263;
              statearr_20316_20362[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_20315 === 20) {
                var inst_20273 = state_20314[8];
                var state_20314__$1 = state_20314;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20314__$1, 23, out, inst_20273);
              } else {
                if (state_val_20315 === 1) {
                  var inst_20248 = state_20314[9];
                  var inst_20248__$1 = calc_state.call(null);
                  var inst_20249 = cljs.core.seq_QMARK_.call(null, inst_20248__$1);
                  var state_20314__$1 = function() {
                    var statearr_20317 = state_20314;
                    statearr_20317[9] = inst_20248__$1;
                    return statearr_20317;
                  }();
                  if (inst_20249) {
                    var statearr_20318_20363 = state_20314__$1;
                    statearr_20318_20363[1] = 2;
                  } else {
                    var statearr_20319_20364 = state_20314__$1;
                    statearr_20319_20364[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20315 === 24) {
                    var inst_20266 = state_20314[10];
                    var inst_20258 = inst_20266;
                    var state_20314__$1 = function() {
                      var statearr_20320 = state_20314;
                      statearr_20320[7] = inst_20258;
                      return statearr_20320;
                    }();
                    var statearr_20321_20365 = state_20314__$1;
                    statearr_20321_20365[2] = null;
                    statearr_20321_20365[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20315 === 4) {
                      var inst_20248 = state_20314[9];
                      var inst_20254 = state_20314[2];
                      var inst_20255 = cljs.core.get.call(null, inst_20254, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_20256 = cljs.core.get.call(null, inst_20254, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_20257 = cljs.core.get.call(null, inst_20254, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_20258 = inst_20248;
                      var state_20314__$1 = function() {
                        var statearr_20322 = state_20314;
                        statearr_20322[11] = inst_20256;
                        statearr_20322[7] = inst_20258;
                        statearr_20322[12] = inst_20255;
                        statearr_20322[13] = inst_20257;
                        return statearr_20322;
                      }();
                      var statearr_20323_20366 = state_20314__$1;
                      statearr_20323_20366[2] = null;
                      statearr_20323_20366[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20315 === 15) {
                        var state_20314__$1 = state_20314;
                        var statearr_20324_20367 = state_20314__$1;
                        statearr_20324_20367[2] = null;
                        statearr_20324_20367[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20315 === 21) {
                          var inst_20266 = state_20314[10];
                          var inst_20258 = inst_20266;
                          var state_20314__$1 = function() {
                            var statearr_20325 = state_20314;
                            statearr_20325[7] = inst_20258;
                            return statearr_20325;
                          }();
                          var statearr_20326_20368 = state_20314__$1;
                          statearr_20326_20368[2] = null;
                          statearr_20326_20368[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20315 === 13) {
                            var inst_20310 = state_20314[2];
                            var state_20314__$1 = state_20314;
                            var statearr_20327_20369 = state_20314__$1;
                            statearr_20327_20369[2] = inst_20310;
                            statearr_20327_20369[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20315 === 22) {
                              var inst_20308 = state_20314[2];
                              var state_20314__$1 = state_20314;
                              var statearr_20328_20370 = state_20314__$1;
                              statearr_20328_20370[2] = inst_20308;
                              statearr_20328_20370[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20315 === 6) {
                                var inst_20312 = state_20314[2];
                                var state_20314__$1 = state_20314;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20314__$1, inst_20312);
                              } else {
                                if (state_val_20315 === 25) {
                                  var state_20314__$1 = state_20314;
                                  var statearr_20329_20371 = state_20314__$1;
                                  statearr_20329_20371[2] = null;
                                  statearr_20329_20371[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20315 === 17) {
                                    var inst_20288 = state_20314[14];
                                    var state_20314__$1 = state_20314;
                                    var statearr_20330_20372 = state_20314__$1;
                                    statearr_20330_20372[2] = inst_20288;
                                    statearr_20330_20372[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20315 === 3) {
                                      var inst_20248 = state_20314[9];
                                      var state_20314__$1 = state_20314;
                                      var statearr_20331_20373 = state_20314__$1;
                                      statearr_20331_20373[2] = inst_20248;
                                      statearr_20331_20373[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20315 === 12) {
                                        var inst_20269 = state_20314[15];
                                        var inst_20274 = state_20314[16];
                                        var inst_20288 = state_20314[14];
                                        var inst_20288__$1 = inst_20269.call(null, inst_20274);
                                        var state_20314__$1 = function() {
                                          var statearr_20332 = state_20314;
                                          statearr_20332[14] = inst_20288__$1;
                                          return statearr_20332;
                                        }();
                                        if (cljs.core.truth_(inst_20288__$1)) {
                                          var statearr_20333_20374 = state_20314__$1;
                                          statearr_20333_20374[1] = 17;
                                        } else {
                                          var statearr_20334_20375 = state_20314__$1;
                                          statearr_20334_20375[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_20315 === 2) {
                                          var inst_20248 = state_20314[9];
                                          var inst_20251 = cljs.core.apply.call(null, cljs.core.hash_map, inst_20248);
                                          var state_20314__$1 = state_20314;
                                          var statearr_20335_20376 = state_20314__$1;
                                          statearr_20335_20376[2] = inst_20251;
                                          statearr_20335_20376[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20315 === 23) {
                                            var inst_20299 = state_20314[2];
                                            var state_20314__$1 = state_20314;
                                            if (cljs.core.truth_(inst_20299)) {
                                              var statearr_20336_20377 = state_20314__$1;
                                              statearr_20336_20377[1] = 24;
                                            } else {
                                              var statearr_20337_20378 = state_20314__$1;
                                              statearr_20337_20378[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_20315 === 19) {
                                              var inst_20296 = state_20314[2];
                                              var state_20314__$1 = state_20314;
                                              if (cljs.core.truth_(inst_20296)) {
                                                var statearr_20338_20379 = state_20314__$1;
                                                statearr_20338_20379[1] = 20;
                                              } else {
                                                var statearr_20339_20380 = state_20314__$1;
                                                statearr_20339_20380[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_20315 === 11) {
                                                var inst_20273 = state_20314[8];
                                                var inst_20279 = inst_20273 == null;
                                                var state_20314__$1 = state_20314;
                                                if (cljs.core.truth_(inst_20279)) {
                                                  var statearr_20340_20381 = state_20314__$1;
                                                  statearr_20340_20381[1] = 14;
                                                } else {
                                                  var statearr_20341_20382 = state_20314__$1;
                                                  statearr_20341_20382[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_20315 === 9) {
                                                  var inst_20266 = state_20314[10];
                                                  var inst_20266__$1 = state_20314[2];
                                                  var inst_20267 = cljs.core.get.call(null, inst_20266__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_20268 = cljs.core.get.call(null, inst_20266__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_20269 = cljs.core.get.call(null, inst_20266__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_20314__$1 = function() {
                                                    var statearr_20342 = state_20314;
                                                    statearr_20342[15] = inst_20269;
                                                    statearr_20342[17] = inst_20268;
                                                    statearr_20342[10] = inst_20266__$1;
                                                    return statearr_20342;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_20314__$1, 10, inst_20267);
                                                } else {
                                                  if (state_val_20315 === 5) {
                                                    var inst_20258 = state_20314[7];
                                                    var inst_20261 = cljs.core.seq_QMARK_.call(null, inst_20258);
                                                    var state_20314__$1 = state_20314;
                                                    if (inst_20261) {
                                                      var statearr_20343_20383 = state_20314__$1;
                                                      statearr_20343_20383[1] = 7;
                                                    } else {
                                                      var statearr_20344_20384 = state_20314__$1;
                                                      statearr_20344_20384[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_20315 === 14) {
                                                      var inst_20274 = state_20314[16];
                                                      var inst_20281 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_20274);
                                                      var state_20314__$1 = state_20314;
                                                      var statearr_20345_20385 = state_20314__$1;
                                                      statearr_20345_20385[2] = inst_20281;
                                                      statearr_20345_20385[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_20315 === 26) {
                                                        var inst_20304 = state_20314[2];
                                                        var state_20314__$1 = state_20314;
                                                        var statearr_20346_20386 = state_20314__$1;
                                                        statearr_20346_20386[2] = inst_20304;
                                                        statearr_20346_20386[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_20315 === 16) {
                                                          var inst_20284 = state_20314[2];
                                                          var inst_20285 = calc_state.call(null);
                                                          var inst_20258 = inst_20285;
                                                          var state_20314__$1 = function() {
                                                            var statearr_20347 = state_20314;
                                                            statearr_20347[7] = inst_20258;
                                                            statearr_20347[18] = inst_20284;
                                                            return statearr_20347;
                                                          }();
                                                          var statearr_20348_20387 = state_20314__$1;
                                                          statearr_20348_20387[2] = null;
                                                          statearr_20348_20387[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_20315 === 10) {
                                                            var inst_20273 = state_20314[8];
                                                            var inst_20274 = state_20314[16];
                                                            var inst_20272 = state_20314[2];
                                                            var inst_20273__$1 = cljs.core.nth.call(null, inst_20272, 0, null);
                                                            var inst_20274__$1 = cljs.core.nth.call(null, inst_20272, 1, null);
                                                            var inst_20275 = inst_20273__$1 == null;
                                                            var inst_20276 = cljs.core._EQ_.call(null, inst_20274__$1, change);
                                                            var inst_20277 = inst_20275 || inst_20276;
                                                            var state_20314__$1 = function() {
                                                              var statearr_20349 = state_20314;
                                                              statearr_20349[8] = inst_20273__$1;
                                                              statearr_20349[16] = inst_20274__$1;
                                                              return statearr_20349;
                                                            }();
                                                            if (cljs.core.truth_(inst_20277)) {
                                                              var statearr_20350_20388 = state_20314__$1;
                                                              statearr_20350_20388[1] = 11;
                                                            } else {
                                                              var statearr_20351_20389 = state_20314__$1;
                                                              statearr_20351_20389[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_20315 === 18) {
                                                              var inst_20269 = state_20314[15];
                                                              var inst_20268 = state_20314[17];
                                                              var inst_20274 = state_20314[16];
                                                              var inst_20291 = cljs.core.empty_QMARK_.call(null, inst_20269);
                                                              var inst_20292 = inst_20268.call(null, inst_20274);
                                                              var inst_20293 = cljs.core.not.call(null, inst_20292);
                                                              var inst_20294 = inst_20291 && inst_20293;
                                                              var state_20314__$1 = state_20314;
                                                              var statearr_20352_20390 = state_20314__$1;
                                                              statearr_20352_20390[2] = inst_20294;
                                                              statearr_20352_20390[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_20315 === 8) {
                                                                var inst_20258 = state_20314[7];
                                                                var state_20314__$1 = state_20314;
                                                                var statearr_20353_20391 = state_20314__$1;
                                                                statearr_20353_20391[2] = inst_20258;
                                                                statearr_20353_20391[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6474__auto___20361, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__6459__auto__, c__6474__auto___20361, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__6460__auto__ = null;
            var state_machine__6460__auto____0 = function() {
              var statearr_20357 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_20357[0] = state_machine__6460__auto__;
              statearr_20357[1] = 1;
              return statearr_20357;
            };
            var state_machine__6460__auto____1 = function(state_20314) {
              while (true) {
                var ret_value__6461__auto__ = function() {
                  try {
                    while (true) {
                      var result__6462__auto__ = switch__6459__auto__.call(null, state_20314);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6462__auto__;
                      }
                      break;
                    }
                  } catch (e20358) {
                    if (e20358 instanceof Object) {
                      var ex__6463__auto__ = e20358;
                      var statearr_20359_20392 = state_20314;
                      statearr_20359_20392[5] = ex__6463__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20314);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20358;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20393 = state_20314;
                  state_20314 = G__20393;
                  continue;
                } else {
                  return ret_value__6461__auto__;
                }
                break;
              }
            };
            state_machine__6460__auto__ = function(state_20314) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6460__auto____0.call(this);
                case 1:
                  return state_machine__6460__auto____1.call(this, state_20314);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
            return state_machine__6460__auto__;
          }();
        }(switch__6459__auto__, c__6474__auto___20361, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__6476__auto__ = function() {
        var statearr_20360 = f__6475__auto__.call(null);
        statearr_20360[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___20361;
        return statearr_20360;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
    };
  }(c__6474__auto___20361, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj20395 = {};
  return obj20395;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3749__auto__ = p;
    if (and__3749__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4400__auto__ = p == null ? null : p;
    return function() {
      var or__3761__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3749__auto__ = p;
    if (and__3749__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4400__auto__ = p == null ? null : p;
    return function() {
      var or__3761__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3749__auto__ = p;
      if (and__3749__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4400__auto__ = p == null ? null : p;
      return function() {
        var or__3761__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3749__auto__ = p;
      if (and__3749__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4400__auto__ = p == null ? null : p;
      return function() {
        var or__3761__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3761__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3761__auto__, mults) {
            return function(p1__20396_SHARP_) {
              if (cljs.core.truth_(p1__20396_SHARP_.call(null, topic))) {
                return p1__20396_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__20396_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3761__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t20519 !== "undefined") {
      } else {
        cljs.core.async.t20519 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta20520) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta20520 = meta20520;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t20519.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t20519.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20519.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$1);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t20519.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20519.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20519.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t20519.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t20519.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_20521) {
            var self__ = this;
            var _20521__$1 = this;
            return self__.meta20520;
          };
        }(mults, ensure_mult);
        cljs.core.async.t20519.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_20521, meta20520__$1) {
            var self__ = this;
            var _20521__$1 = this;
            return new cljs.core.async.t20519(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta20520__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20519.cljs$lang$type = true;
        cljs.core.async.t20519.cljs$lang$ctorStr = "cljs.core.async/t20519";
        cljs.core.async.t20519.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
            return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t20519");
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t20519 = function(mults, ensure_mult) {
          return function __GT_t20519(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta20520) {
            return new cljs.core.async.t20519(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta20520);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t20519(ensure_mult, mults, buf_fn, topic_fn, ch, pub, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 65, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 603, new cljs.core.Keyword(null, "column", "column", 2078222095), 14, new cljs.core.Keyword(null, "line", "line", 212345235), 591, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], 
      null));
    }();
    var c__6474__auto___20641 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___20641, mults, ensure_mult, p) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___20641, mults, ensure_mult, p) {
            return function(state_20593) {
              var state_val_20594 = state_20593[1];
              if (state_val_20594 === 7) {
                var inst_20589 = state_20593[2];
                var state_20593__$1 = state_20593;
                var statearr_20595_20642 = state_20593__$1;
                statearr_20595_20642[2] = inst_20589;
                statearr_20595_20642[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20594 === 20) {
                  var state_20593__$1 = state_20593;
                  var statearr_20596_20643 = state_20593__$1;
                  statearr_20596_20643[2] = null;
                  statearr_20596_20643[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20594 === 1) {
                    var state_20593__$1 = state_20593;
                    var statearr_20597_20644 = state_20593__$1;
                    statearr_20597_20644[2] = null;
                    statearr_20597_20644[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20594 === 24) {
                      var inst_20572 = state_20593[7];
                      var inst_20581 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_20572);
                      var state_20593__$1 = state_20593;
                      var statearr_20598_20645 = state_20593__$1;
                      statearr_20598_20645[2] = inst_20581;
                      statearr_20598_20645[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20594 === 4) {
                        var inst_20524 = state_20593[8];
                        var inst_20524__$1 = state_20593[2];
                        var inst_20525 = inst_20524__$1 == null;
                        var state_20593__$1 = function() {
                          var statearr_20599 = state_20593;
                          statearr_20599[8] = inst_20524__$1;
                          return statearr_20599;
                        }();
                        if (cljs.core.truth_(inst_20525)) {
                          var statearr_20600_20646 = state_20593__$1;
                          statearr_20600_20646[1] = 5;
                        } else {
                          var statearr_20601_20647 = state_20593__$1;
                          statearr_20601_20647[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20594 === 15) {
                          var inst_20566 = state_20593[2];
                          var state_20593__$1 = state_20593;
                          var statearr_20602_20648 = state_20593__$1;
                          statearr_20602_20648[2] = inst_20566;
                          statearr_20602_20648[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20594 === 21) {
                            var inst_20586 = state_20593[2];
                            var state_20593__$1 = function() {
                              var statearr_20603 = state_20593;
                              statearr_20603[9] = inst_20586;
                              return statearr_20603;
                            }();
                            var statearr_20604_20649 = state_20593__$1;
                            statearr_20604_20649[2] = null;
                            statearr_20604_20649[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20594 === 13) {
                              var inst_20548 = state_20593[10];
                              var inst_20550 = cljs.core.chunked_seq_QMARK_.call(null, inst_20548);
                              var state_20593__$1 = state_20593;
                              if (inst_20550) {
                                var statearr_20605_20650 = state_20593__$1;
                                statearr_20605_20650[1] = 16;
                              } else {
                                var statearr_20606_20651 = state_20593__$1;
                                statearr_20606_20651[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20594 === 22) {
                                var inst_20578 = state_20593[2];
                                var state_20593__$1 = state_20593;
                                if (cljs.core.truth_(inst_20578)) {
                                  var statearr_20607_20652 = state_20593__$1;
                                  statearr_20607_20652[1] = 23;
                                } else {
                                  var statearr_20608_20653 = state_20593__$1;
                                  statearr_20608_20653[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20594 === 6) {
                                  var inst_20574 = state_20593[11];
                                  var inst_20524 = state_20593[8];
                                  var inst_20572 = state_20593[7];
                                  var inst_20572__$1 = topic_fn.call(null, inst_20524);
                                  var inst_20573 = cljs.core.deref.call(null, mults);
                                  var inst_20574__$1 = cljs.core.get.call(null, inst_20573, inst_20572__$1);
                                  var state_20593__$1 = function() {
                                    var statearr_20609 = state_20593;
                                    statearr_20609[11] = inst_20574__$1;
                                    statearr_20609[7] = inst_20572__$1;
                                    return statearr_20609;
                                  }();
                                  if (cljs.core.truth_(inst_20574__$1)) {
                                    var statearr_20610_20654 = state_20593__$1;
                                    statearr_20610_20654[1] = 19;
                                  } else {
                                    var statearr_20611_20655 = state_20593__$1;
                                    statearr_20611_20655[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20594 === 25) {
                                    var inst_20583 = state_20593[2];
                                    var state_20593__$1 = state_20593;
                                    var statearr_20612_20656 = state_20593__$1;
                                    statearr_20612_20656[2] = inst_20583;
                                    statearr_20612_20656[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20594 === 17) {
                                      var inst_20548 = state_20593[10];
                                      var inst_20557 = cljs.core.first.call(null, inst_20548);
                                      var inst_20558 = cljs.core.async.muxch_STAR_.call(null, inst_20557);
                                      var inst_20559 = cljs.core.async.close_BANG_.call(null, inst_20558);
                                      var inst_20560 = cljs.core.next.call(null, inst_20548);
                                      var inst_20534 = inst_20560;
                                      var inst_20535 = null;
                                      var inst_20536 = 0;
                                      var inst_20537 = 0;
                                      var state_20593__$1 = function() {
                                        var statearr_20613 = state_20593;
                                        statearr_20613[12] = inst_20536;
                                        statearr_20613[13] = inst_20534;
                                        statearr_20613[14] = inst_20537;
                                        statearr_20613[15] = inst_20559;
                                        statearr_20613[16] = inst_20535;
                                        return statearr_20613;
                                      }();
                                      var statearr_20614_20657 = state_20593__$1;
                                      statearr_20614_20657[2] = null;
                                      statearr_20614_20657[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20594 === 3) {
                                        var inst_20591 = state_20593[2];
                                        var state_20593__$1 = state_20593;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20593__$1, inst_20591);
                                      } else {
                                        if (state_val_20594 === 12) {
                                          var inst_20568 = state_20593[2];
                                          var state_20593__$1 = state_20593;
                                          var statearr_20615_20658 = state_20593__$1;
                                          statearr_20615_20658[2] = inst_20568;
                                          statearr_20615_20658[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20594 === 2) {
                                            var state_20593__$1 = state_20593;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20593__$1, 4, ch);
                                          } else {
                                            if (state_val_20594 === 23) {
                                              var state_20593__$1 = state_20593;
                                              var statearr_20616_20659 = state_20593__$1;
                                              statearr_20616_20659[2] = null;
                                              statearr_20616_20659[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_20594 === 19) {
                                                var inst_20574 = state_20593[11];
                                                var inst_20524 = state_20593[8];
                                                var inst_20576 = cljs.core.async.muxch_STAR_.call(null, inst_20574);
                                                var state_20593__$1 = state_20593;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20593__$1, 22, inst_20576, inst_20524);
                                              } else {
                                                if (state_val_20594 === 11) {
                                                  var inst_20534 = state_20593[13];
                                                  var inst_20548 = state_20593[10];
                                                  var inst_20548__$1 = cljs.core.seq.call(null, inst_20534);
                                                  var state_20593__$1 = function() {
                                                    var statearr_20617 = state_20593;
                                                    statearr_20617[10] = inst_20548__$1;
                                                    return statearr_20617;
                                                  }();
                                                  if (inst_20548__$1) {
                                                    var statearr_20618_20660 = state_20593__$1;
                                                    statearr_20618_20660[1] = 13;
                                                  } else {
                                                    var statearr_20619_20661 = state_20593__$1;
                                                    statearr_20619_20661[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_20594 === 9) {
                                                    var inst_20570 = state_20593[2];
                                                    var state_20593__$1 = state_20593;
                                                    var statearr_20620_20662 = state_20593__$1;
                                                    statearr_20620_20662[2] = inst_20570;
                                                    statearr_20620_20662[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_20594 === 5) {
                                                      var inst_20531 = cljs.core.deref.call(null, mults);
                                                      var inst_20532 = cljs.core.vals.call(null, inst_20531);
                                                      var inst_20533 = cljs.core.seq.call(null, inst_20532);
                                                      var inst_20534 = inst_20533;
                                                      var inst_20535 = null;
                                                      var inst_20536 = 0;
                                                      var inst_20537 = 0;
                                                      var state_20593__$1 = function() {
                                                        var statearr_20621 = state_20593;
                                                        statearr_20621[12] = inst_20536;
                                                        statearr_20621[13] = inst_20534;
                                                        statearr_20621[14] = inst_20537;
                                                        statearr_20621[16] = inst_20535;
                                                        return statearr_20621;
                                                      }();
                                                      var statearr_20622_20663 = state_20593__$1;
                                                      statearr_20622_20663[2] = null;
                                                      statearr_20622_20663[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_20594 === 14) {
                                                        var state_20593__$1 = state_20593;
                                                        var statearr_20626_20664 = state_20593__$1;
                                                        statearr_20626_20664[2] = null;
                                                        statearr_20626_20664[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_20594 === 16) {
                                                          var inst_20548 = state_20593[10];
                                                          var inst_20552 = cljs.core.chunk_first.call(null, inst_20548);
                                                          var inst_20553 = cljs.core.chunk_rest.call(null, inst_20548);
                                                          var inst_20554 = cljs.core.count.call(null, inst_20552);
                                                          var inst_20534 = inst_20553;
                                                          var inst_20535 = inst_20552;
                                                          var inst_20536 = inst_20554;
                                                          var inst_20537 = 0;
                                                          var state_20593__$1 = function() {
                                                            var statearr_20627 = state_20593;
                                                            statearr_20627[12] = inst_20536;
                                                            statearr_20627[13] = inst_20534;
                                                            statearr_20627[14] = inst_20537;
                                                            statearr_20627[16] = inst_20535;
                                                            return statearr_20627;
                                                          }();
                                                          var statearr_20628_20665 = state_20593__$1;
                                                          statearr_20628_20665[2] = null;
                                                          statearr_20628_20665[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_20594 === 10) {
                                                            var inst_20536 = state_20593[12];
                                                            var inst_20534 = state_20593[13];
                                                            var inst_20537 = state_20593[14];
                                                            var inst_20535 = state_20593[16];
                                                            var inst_20542 = cljs.core._nth.call(null, inst_20535, inst_20537);
                                                            var inst_20543 = cljs.core.async.muxch_STAR_.call(null, inst_20542);
                                                            var inst_20544 = cljs.core.async.close_BANG_.call(null, inst_20543);
                                                            var inst_20545 = inst_20537 + 1;
                                                            var tmp20623 = inst_20536;
                                                            var tmp20624 = inst_20534;
                                                            var tmp20625 = inst_20535;
                                                            var inst_20534__$1 = tmp20624;
                                                            var inst_20535__$1 = tmp20625;
                                                            var inst_20536__$1 = tmp20623;
                                                            var inst_20537__$1 = inst_20545;
                                                            var state_20593__$1 = function() {
                                                              var statearr_20629 = state_20593;
                                                              statearr_20629[12] = inst_20536__$1;
                                                              statearr_20629[13] = inst_20534__$1;
                                                              statearr_20629[14] = inst_20537__$1;
                                                              statearr_20629[16] = inst_20535__$1;
                                                              statearr_20629[17] = inst_20544;
                                                              return statearr_20629;
                                                            }();
                                                            var statearr_20630_20666 = state_20593__$1;
                                                            statearr_20630_20666[2] = null;
                                                            statearr_20630_20666[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_20594 === 18) {
                                                              var inst_20563 = state_20593[2];
                                                              var state_20593__$1 = state_20593;
                                                              var statearr_20631_20667 = state_20593__$1;
                                                              statearr_20631_20667[2] = inst_20563;
                                                              statearr_20631_20667[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_20594 === 8) {
                                                                var inst_20536 = state_20593[12];
                                                                var inst_20537 = state_20593[14];
                                                                var inst_20539 = inst_20537 < inst_20536;
                                                                var inst_20540 = inst_20539;
                                                                var state_20593__$1 = state_20593;
                                                                if (cljs.core.truth_(inst_20540)) {
                                                                  var statearr_20632_20668 = state_20593__$1;
                                                                  statearr_20632_20668[1] = 10;
                                                                } else {
                                                                  var statearr_20633_20669 = state_20593__$1;
                                                                  statearr_20633_20669[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___20641, mults, ensure_mult, p);
          return function(switch__6459__auto__, c__6474__auto___20641, mults, ensure_mult, p) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_20637 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20637[0] = state_machine__6460__auto__;
                statearr_20637[1] = 1;
                return statearr_20637;
              };
              var state_machine__6460__auto____1 = function(state_20593) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_20593);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e20638) {
                      if (e20638 instanceof Object) {
                        var ex__6463__auto__ = e20638;
                        var statearr_20639_20670 = state_20593;
                        statearr_20639_20670[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20593);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20638;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20671 = state_20593;
                    state_20593 = G__20671;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_20593) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_20593);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___20641, mults, ensure_mult, p);
        }();
        var state__6476__auto__ = function() {
          var statearr_20640 = f__6475__auto__.call(null);
          statearr_20640[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___20641;
          return statearr_20640;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___20641, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__6474__auto___20808 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___20808, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___20808, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_20778) {
              var state_val_20779 = state_20778[1];
              if (state_val_20779 === 7) {
                var state_20778__$1 = state_20778;
                var statearr_20780_20809 = state_20778__$1;
                statearr_20780_20809[2] = null;
                statearr_20780_20809[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20779 === 1) {
                  var state_20778__$1 = state_20778;
                  var statearr_20781_20810 = state_20778__$1;
                  statearr_20781_20810[2] = null;
                  statearr_20781_20810[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20779 === 4) {
                    var inst_20742 = state_20778[7];
                    var inst_20744 = inst_20742 < cnt;
                    var state_20778__$1 = state_20778;
                    if (cljs.core.truth_(inst_20744)) {
                      var statearr_20782_20811 = state_20778__$1;
                      statearr_20782_20811[1] = 6;
                    } else {
                      var statearr_20783_20812 = state_20778__$1;
                      statearr_20783_20812[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20779 === 15) {
                      var inst_20774 = state_20778[2];
                      var state_20778__$1 = state_20778;
                      var statearr_20784_20813 = state_20778__$1;
                      statearr_20784_20813[2] = inst_20774;
                      statearr_20784_20813[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20779 === 13) {
                        var inst_20767 = cljs.core.async.close_BANG_.call(null, out);
                        var state_20778__$1 = state_20778;
                        var statearr_20785_20814 = state_20778__$1;
                        statearr_20785_20814[2] = inst_20767;
                        statearr_20785_20814[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20779 === 6) {
                          var state_20778__$1 = state_20778;
                          var statearr_20786_20815 = state_20778__$1;
                          statearr_20786_20815[2] = null;
                          statearr_20786_20815[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20779 === 3) {
                            var inst_20776 = state_20778[2];
                            var state_20778__$1 = state_20778;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20778__$1, inst_20776);
                          } else {
                            if (state_val_20779 === 12) {
                              var inst_20764 = state_20778[8];
                              var inst_20764__$1 = state_20778[2];
                              var inst_20765 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_20764__$1);
                              var state_20778__$1 = function() {
                                var statearr_20787 = state_20778;
                                statearr_20787[8] = inst_20764__$1;
                                return statearr_20787;
                              }();
                              if (cljs.core.truth_(inst_20765)) {
                                var statearr_20788_20816 = state_20778__$1;
                                statearr_20788_20816[1] = 13;
                              } else {
                                var statearr_20789_20817 = state_20778__$1;
                                statearr_20789_20817[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20779 === 2) {
                                var inst_20741 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_20742 = 0;
                                var state_20778__$1 = function() {
                                  var statearr_20790 = state_20778;
                                  statearr_20790[7] = inst_20742;
                                  statearr_20790[9] = inst_20741;
                                  return statearr_20790;
                                }();
                                var statearr_20791_20818 = state_20778__$1;
                                statearr_20791_20818[2] = null;
                                statearr_20791_20818[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20779 === 11) {
                                  var inst_20742 = state_20778[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_20778, 10, Object, null, 9);
                                  var inst_20751 = chs__$1.call(null, inst_20742);
                                  var inst_20752 = done.call(null, inst_20742);
                                  var inst_20753 = cljs.core.async.take_BANG_.call(null, inst_20751, inst_20752);
                                  var state_20778__$1 = state_20778;
                                  var statearr_20792_20819 = state_20778__$1;
                                  statearr_20792_20819[2] = inst_20753;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20778__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20779 === 9) {
                                    var inst_20742 = state_20778[7];
                                    var inst_20755 = state_20778[2];
                                    var inst_20756 = inst_20742 + 1;
                                    var inst_20742__$1 = inst_20756;
                                    var state_20778__$1 = function() {
                                      var statearr_20793 = state_20778;
                                      statearr_20793[10] = inst_20755;
                                      statearr_20793[7] = inst_20742__$1;
                                      return statearr_20793;
                                    }();
                                    var statearr_20794_20820 = state_20778__$1;
                                    statearr_20794_20820[2] = null;
                                    statearr_20794_20820[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20779 === 5) {
                                      var inst_20762 = state_20778[2];
                                      var state_20778__$1 = function() {
                                        var statearr_20795 = state_20778;
                                        statearr_20795[11] = inst_20762;
                                        return statearr_20795;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20778__$1, 12, dchan);
                                    } else {
                                      if (state_val_20779 === 14) {
                                        var inst_20764 = state_20778[8];
                                        var inst_20769 = cljs.core.apply.call(null, f, inst_20764);
                                        var state_20778__$1 = state_20778;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20778__$1, 16, out, inst_20769);
                                      } else {
                                        if (state_val_20779 === 16) {
                                          var inst_20771 = state_20778[2];
                                          var state_20778__$1 = function() {
                                            var statearr_20796 = state_20778;
                                            statearr_20796[12] = inst_20771;
                                            return statearr_20796;
                                          }();
                                          var statearr_20797_20821 = state_20778__$1;
                                          statearr_20797_20821[2] = null;
                                          statearr_20797_20821[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20779 === 10) {
                                            var inst_20746 = state_20778[2];
                                            var inst_20747 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_20778__$1 = function() {
                                              var statearr_20798 = state_20778;
                                              statearr_20798[13] = inst_20746;
                                              return statearr_20798;
                                            }();
                                            var statearr_20799_20822 = state_20778__$1;
                                            statearr_20799_20822[2] = inst_20747;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20778__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_20779 === 8) {
                                              var inst_20760 = state_20778[2];
                                              var state_20778__$1 = state_20778;
                                              var statearr_20800_20823 = state_20778__$1;
                                              statearr_20800_20823[2] = inst_20760;
                                              statearr_20800_20823[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___20808, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__6459__auto__, c__6474__auto___20808, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_20804 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20804[0] = state_machine__6460__auto__;
                statearr_20804[1] = 1;
                return statearr_20804;
              };
              var state_machine__6460__auto____1 = function(state_20778) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_20778);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e20805) {
                      if (e20805 instanceof Object) {
                        var ex__6463__auto__ = e20805;
                        var statearr_20806_20824 = state_20778;
                        statearr_20806_20824[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20778);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20805;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20825 = state_20778;
                    state_20778 = G__20825;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_20778) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_20778);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___20808, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__6476__auto__ = function() {
          var statearr_20807 = f__6475__auto__.call(null);
          statearr_20807[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___20808;
          return statearr_20807;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___20808, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6474__auto___20933 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___20933, out) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___20933, out) {
            return function(state_20909) {
              var state_val_20910 = state_20909[1];
              if (state_val_20910 === 7) {
                var inst_20889 = state_20909[7];
                var inst_20888 = state_20909[8];
                var inst_20888__$1 = state_20909[2];
                var inst_20889__$1 = cljs.core.nth.call(null, inst_20888__$1, 0, null);
                var inst_20890 = cljs.core.nth.call(null, inst_20888__$1, 1, null);
                var inst_20891 = inst_20889__$1 == null;
                var state_20909__$1 = function() {
                  var statearr_20911 = state_20909;
                  statearr_20911[7] = inst_20889__$1;
                  statearr_20911[9] = inst_20890;
                  statearr_20911[8] = inst_20888__$1;
                  return statearr_20911;
                }();
                if (cljs.core.truth_(inst_20891)) {
                  var statearr_20912_20934 = state_20909__$1;
                  statearr_20912_20934[1] = 8;
                } else {
                  var statearr_20913_20935 = state_20909__$1;
                  statearr_20913_20935[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20910 === 1) {
                  var inst_20880 = cljs.core.vec.call(null, chs);
                  var inst_20881 = inst_20880;
                  var state_20909__$1 = function() {
                    var statearr_20914 = state_20909;
                    statearr_20914[10] = inst_20881;
                    return statearr_20914;
                  }();
                  var statearr_20915_20936 = state_20909__$1;
                  statearr_20915_20936[2] = null;
                  statearr_20915_20936[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20910 === 4) {
                    var inst_20881 = state_20909[10];
                    var state_20909__$1 = state_20909;
                    return cljs.core.async.ioc_alts_BANG_.call(null, state_20909__$1, 7, inst_20881);
                  } else {
                    if (state_val_20910 === 6) {
                      var inst_20905 = state_20909[2];
                      var state_20909__$1 = state_20909;
                      var statearr_20916_20937 = state_20909__$1;
                      statearr_20916_20937[2] = inst_20905;
                      statearr_20916_20937[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20910 === 3) {
                        var inst_20907 = state_20909[2];
                        var state_20909__$1 = state_20909;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20909__$1, inst_20907);
                      } else {
                        if (state_val_20910 === 2) {
                          var inst_20881 = state_20909[10];
                          var inst_20883 = cljs.core.count.call(null, inst_20881);
                          var inst_20884 = inst_20883 > 0;
                          var state_20909__$1 = state_20909;
                          if (cljs.core.truth_(inst_20884)) {
                            var statearr_20918_20938 = state_20909__$1;
                            statearr_20918_20938[1] = 4;
                          } else {
                            var statearr_20919_20939 = state_20909__$1;
                            statearr_20919_20939[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20910 === 11) {
                            var inst_20881 = state_20909[10];
                            var inst_20898 = state_20909[2];
                            var tmp20917 = inst_20881;
                            var inst_20881__$1 = tmp20917;
                            var state_20909__$1 = function() {
                              var statearr_20920 = state_20909;
                              statearr_20920[10] = inst_20881__$1;
                              statearr_20920[11] = inst_20898;
                              return statearr_20920;
                            }();
                            var statearr_20921_20940 = state_20909__$1;
                            statearr_20921_20940[2] = null;
                            statearr_20921_20940[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20910 === 9) {
                              var inst_20889 = state_20909[7];
                              var state_20909__$1 = state_20909;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20909__$1, 11, out, inst_20889);
                            } else {
                              if (state_val_20910 === 5) {
                                var inst_20903 = cljs.core.async.close_BANG_.call(null, out);
                                var state_20909__$1 = state_20909;
                                var statearr_20922_20941 = state_20909__$1;
                                statearr_20922_20941[2] = inst_20903;
                                statearr_20922_20941[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20910 === 10) {
                                  var inst_20901 = state_20909[2];
                                  var state_20909__$1 = state_20909;
                                  var statearr_20923_20942 = state_20909__$1;
                                  statearr_20923_20942[2] = inst_20901;
                                  statearr_20923_20942[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20910 === 8) {
                                    var inst_20881 = state_20909[10];
                                    var inst_20889 = state_20909[7];
                                    var inst_20890 = state_20909[9];
                                    var inst_20888 = state_20909[8];
                                    var inst_20893 = function() {
                                      var c = inst_20890;
                                      var v = inst_20889;
                                      var vec__20886 = inst_20888;
                                      var cs = inst_20881;
                                      return function(c, v, vec__20886, cs, inst_20881, inst_20889, inst_20890, inst_20888, state_val_20910, c__6474__auto___20933, out) {
                                        return function(p1__20826_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__20826_SHARP_);
                                        };
                                      }(c, v, vec__20886, cs, inst_20881, inst_20889, inst_20890, inst_20888, state_val_20910, c__6474__auto___20933, out);
                                    }();
                                    var inst_20894 = cljs.core.filterv.call(null, inst_20893, inst_20881);
                                    var inst_20881__$1 = inst_20894;
                                    var state_20909__$1 = function() {
                                      var statearr_20924 = state_20909;
                                      statearr_20924[10] = inst_20881__$1;
                                      return statearr_20924;
                                    }();
                                    var statearr_20925_20943 = state_20909__$1;
                                    statearr_20925_20943[2] = null;
                                    statearr_20925_20943[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___20933, out);
          return function(switch__6459__auto__, c__6474__auto___20933, out) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_20929 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20929[0] = state_machine__6460__auto__;
                statearr_20929[1] = 1;
                return statearr_20929;
              };
              var state_machine__6460__auto____1 = function(state_20909) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_20909);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e20930) {
                      if (e20930 instanceof Object) {
                        var ex__6463__auto__ = e20930;
                        var statearr_20931_20944 = state_20909;
                        statearr_20931_20944[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20909);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20930;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20945 = state_20909;
                    state_20909 = G__20945;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_20909) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_20909);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___20933, out);
        }();
        var state__6476__auto__ = function() {
          var statearr_20932 = f__6475__auto__.call(null);
          statearr_20932[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___20933;
          return statearr_20932;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___20933, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6474__auto___21038 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___21038, out) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___21038, out) {
            return function(state_21015) {
              var state_val_21016 = state_21015[1];
              if (state_val_21016 === 7) {
                var inst_20997 = state_21015[7];
                var inst_20997__$1 = state_21015[2];
                var inst_20998 = inst_20997__$1 == null;
                var inst_20999 = cljs.core.not.call(null, inst_20998);
                var state_21015__$1 = function() {
                  var statearr_21017 = state_21015;
                  statearr_21017[7] = inst_20997__$1;
                  return statearr_21017;
                }();
                if (inst_20999) {
                  var statearr_21018_21039 = state_21015__$1;
                  statearr_21018_21039[1] = 8;
                } else {
                  var statearr_21019_21040 = state_21015__$1;
                  statearr_21019_21040[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21016 === 1) {
                  var inst_20992 = 0;
                  var state_21015__$1 = function() {
                    var statearr_21020 = state_21015;
                    statearr_21020[8] = inst_20992;
                    return statearr_21020;
                  }();
                  var statearr_21021_21041 = state_21015__$1;
                  statearr_21021_21041[2] = null;
                  statearr_21021_21041[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21016 === 4) {
                    var state_21015__$1 = state_21015;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21015__$1, 7, ch);
                  } else {
                    if (state_val_21016 === 6) {
                      var inst_21010 = state_21015[2];
                      var state_21015__$1 = state_21015;
                      var statearr_21022_21042 = state_21015__$1;
                      statearr_21022_21042[2] = inst_21010;
                      statearr_21022_21042[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21016 === 3) {
                        var inst_21012 = state_21015[2];
                        var inst_21013 = cljs.core.async.close_BANG_.call(null, out);
                        var state_21015__$1 = function() {
                          var statearr_21023 = state_21015;
                          statearr_21023[9] = inst_21012;
                          return statearr_21023;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21015__$1, inst_21013);
                      } else {
                        if (state_val_21016 === 2) {
                          var inst_20992 = state_21015[8];
                          var inst_20994 = inst_20992 < n;
                          var state_21015__$1 = state_21015;
                          if (cljs.core.truth_(inst_20994)) {
                            var statearr_21024_21043 = state_21015__$1;
                            statearr_21024_21043[1] = 4;
                          } else {
                            var statearr_21025_21044 = state_21015__$1;
                            statearr_21025_21044[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21016 === 11) {
                            var inst_20992 = state_21015[8];
                            var inst_21002 = state_21015[2];
                            var inst_21003 = inst_20992 + 1;
                            var inst_20992__$1 = inst_21003;
                            var state_21015__$1 = function() {
                              var statearr_21026 = state_21015;
                              statearr_21026[10] = inst_21002;
                              statearr_21026[8] = inst_20992__$1;
                              return statearr_21026;
                            }();
                            var statearr_21027_21045 = state_21015__$1;
                            statearr_21027_21045[2] = null;
                            statearr_21027_21045[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21016 === 9) {
                              var state_21015__$1 = state_21015;
                              var statearr_21028_21046 = state_21015__$1;
                              statearr_21028_21046[2] = null;
                              statearr_21028_21046[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_21016 === 5) {
                                var state_21015__$1 = state_21015;
                                var statearr_21029_21047 = state_21015__$1;
                                statearr_21029_21047[2] = null;
                                statearr_21029_21047[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_21016 === 10) {
                                  var inst_21007 = state_21015[2];
                                  var state_21015__$1 = state_21015;
                                  var statearr_21030_21048 = state_21015__$1;
                                  statearr_21030_21048[2] = inst_21007;
                                  statearr_21030_21048[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21016 === 8) {
                                    var inst_20997 = state_21015[7];
                                    var state_21015__$1 = state_21015;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21015__$1, 11, out, inst_20997);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___21038, out);
          return function(switch__6459__auto__, c__6474__auto___21038, out) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_21034 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_21034[0] = state_machine__6460__auto__;
                statearr_21034[1] = 1;
                return statearr_21034;
              };
              var state_machine__6460__auto____1 = function(state_21015) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_21015);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e21035) {
                      if (e21035 instanceof Object) {
                        var ex__6463__auto__ = e21035;
                        var statearr_21036_21049 = state_21015;
                        statearr_21036_21049[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21015);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21035;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21050 = state_21015;
                    state_21015 = G__21050;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_21015) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_21015);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___21038, out);
        }();
        var state__6476__auto__ = function() {
          var statearr_21037 = f__6475__auto__.call(null);
          statearr_21037[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___21038;
          return statearr_21037;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___21038, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t21058 !== "undefined") {
  } else {
    cljs.core.async.t21058 = function(ch, f, map_LT_, meta21059) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta21059 = meta21059;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t21058.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t21058.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t21058.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t21058.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t21061 !== "undefined") {
        } else {
          cljs.core.async.t21061 = function(fn1, _, meta21059, map_LT_, f, ch, meta21062) {
            this.fn1 = fn1;
            this._ = _;
            this.meta21059 = meta21059;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta21062 = meta21062;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t21061.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t21061.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t21061.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__21051_SHARP_) {
                  return f1.call(null, p1__21051_SHARP_ == null ? null : self__.f.call(null, p1__21051_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t21061.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_21063) {
              var self__ = this;
              var _21063__$1 = this;
              return self__.meta21062;
            };
          }(___$1);
          cljs.core.async.t21061.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_21063, meta21062__$1) {
              var self__ = this;
              var _21063__$1 = this;
              return new cljs.core.async.t21061(self__.fn1, self__._, self__.meta21059, self__.map_LT_, self__.f, self__.ch, meta21062__$1);
            };
          }(___$1);
          cljs.core.async.t21061.cljs$lang$type = true;
          cljs.core.async.t21061.cljs$lang$ctorStr = "cljs.core.async/t21061";
          cljs.core.async.t21061.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
              return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t21061");
            };
          }(___$1);
          cljs.core.async.__GT_t21061 = function(___$1) {
            return function __GT_t21061(fn1__$1, ___$2, meta21059__$1, map_LT___$1, f__$1, ch__$1, meta21062) {
              return new cljs.core.async.t21061(fn1__$1, ___$2, meta21059__$1, map_LT___$1, f__$1, ch__$1, meta21062);
            };
          }(___$1);
        }
        return new cljs.core.async.t21061(fn1, ___$1, self__.meta21059, self__.map_LT_, self__.f, self__.ch, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 46, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 737, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 731, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], 
        null));
      }());
      if (cljs.core.truth_(function() {
        var and__3749__auto__ = ret;
        if (cljs.core.truth_(and__3749__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3749__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t21058.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t21058.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t21058.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t21058.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21060) {
      var self__ = this;
      var _21060__$1 = this;
      return self__.meta21059;
    };
    cljs.core.async.t21058.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21060, meta21059__$1) {
      var self__ = this;
      var _21060__$1 = this;
      return new cljs.core.async.t21058(self__.ch, self__.f, self__.map_LT_, meta21059__$1);
    };
    cljs.core.async.t21058.cljs$lang$type = true;
    cljs.core.async.t21058.cljs$lang$ctorStr = "cljs.core.async/t21058";
    cljs.core.async.t21058.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
      return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t21058");
    };
    cljs.core.async.__GT_t21058 = function __GT_t21058(ch__$1, f__$1, map_LT___$1, meta21059) {
      return new cljs.core.async.t21058(ch__$1, f__$1, map_LT___$1, meta21059);
    };
  }
  return new cljs.core.async.t21058(ch, f, map_LT_, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 46, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 743, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 722, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t21067 !== "undefined") {
  } else {
    cljs.core.async.t21067 = function(ch, f, map_GT_, meta21068) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta21068 = meta21068;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t21067.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t21067.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t21067.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t21067.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t21067.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t21067.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t21067.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21069) {
      var self__ = this;
      var _21069__$1 = this;
      return self__.meta21068;
    };
    cljs.core.async.t21067.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21069, meta21068__$1) {
      var self__ = this;
      var _21069__$1 = this;
      return new cljs.core.async.t21067(self__.ch, self__.f, self__.map_GT_, meta21068__$1);
    };
    cljs.core.async.t21067.cljs$lang$type = true;
    cljs.core.async.t21067.cljs$lang$ctorStr = "cljs.core.async/t21067";
    cljs.core.async.t21067.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
      return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t21067");
    };
    cljs.core.async.__GT_t21067 = function __GT_t21067(ch__$1, f__$1, map_GT___$1, meta21068) {
      return new cljs.core.async.t21067(ch__$1, f__$1, map_GT___$1, meta21068);
    };
  }
  return new cljs.core.async.t21067(ch, f, map_GT_, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 34, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 757, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 748, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t21073 !== "undefined") {
  } else {
    cljs.core.async.t21073 = function(ch, p, filter_GT_, meta21074) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta21074 = meta21074;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t21073.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t21073.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t21073.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t21073.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t21073.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t21073.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t21073.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t21073.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21075) {
      var self__ = this;
      var _21075__$1 = this;
      return self__.meta21074;
    };
    cljs.core.async.t21073.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21075, meta21074__$1) {
      var self__ = this;
      var _21075__$1 = this;
      return new cljs.core.async.t21073(self__.ch, self__.p, self__.filter_GT_, meta21074__$1);
    };
    cljs.core.async.t21073.cljs$lang$type = true;
    cljs.core.async.t21073.cljs$lang$ctorStr = "cljs.core.async/t21073";
    cljs.core.async.t21073.cljs$lang$ctorPrWriter = function(this__4343__auto__, writer__4344__auto__, opt__4345__auto__) {
      return cljs.core._write.call(null, writer__4344__auto__, "cljs.core.async/t21073");
    };
    cljs.core.async.__GT_t21073 = function __GT_t21073(ch__$1, p__$1, filter_GT___$1, meta21074) {
      return new cljs.core.async.t21073(ch__$1, p__$1, filter_GT___$1, meta21074);
    };
  }
  return new cljs.core.async.t21073(ch, p, filter_GT_, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 48, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 774, new cljs.core.Keyword(null, "column", "column", 2078222095), 3, new cljs.core.Keyword(null, "line", "line", 212345235), 762, new cljs.core.Keyword(null, "file", "file", -1269645878), "/home/tim/clojure/logging-dashboard/resources/public/js/cljs/core/async.cljs"], 
  null));
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6474__auto___21158 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___21158, out) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___21158, out) {
            return function(state_21137) {
              var state_val_21138 = state_21137[1];
              if (state_val_21138 === 7) {
                var inst_21133 = state_21137[2];
                var state_21137__$1 = state_21137;
                var statearr_21139_21159 = state_21137__$1;
                statearr_21139_21159[2] = inst_21133;
                statearr_21139_21159[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21138 === 1) {
                  var state_21137__$1 = state_21137;
                  var statearr_21140_21160 = state_21137__$1;
                  statearr_21140_21160[2] = null;
                  statearr_21140_21160[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21138 === 4) {
                    var inst_21119 = state_21137[7];
                    var inst_21119__$1 = state_21137[2];
                    var inst_21120 = inst_21119__$1 == null;
                    var state_21137__$1 = function() {
                      var statearr_21141 = state_21137;
                      statearr_21141[7] = inst_21119__$1;
                      return statearr_21141;
                    }();
                    if (cljs.core.truth_(inst_21120)) {
                      var statearr_21142_21161 = state_21137__$1;
                      statearr_21142_21161[1] = 5;
                    } else {
                      var statearr_21143_21162 = state_21137__$1;
                      statearr_21143_21162[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21138 === 6) {
                      var inst_21119 = state_21137[7];
                      var inst_21124 = p.call(null, inst_21119);
                      var state_21137__$1 = state_21137;
                      if (cljs.core.truth_(inst_21124)) {
                        var statearr_21144_21163 = state_21137__$1;
                        statearr_21144_21163[1] = 8;
                      } else {
                        var statearr_21145_21164 = state_21137__$1;
                        statearr_21145_21164[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21138 === 3) {
                        var inst_21135 = state_21137[2];
                        var state_21137__$1 = state_21137;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21137__$1, inst_21135);
                      } else {
                        if (state_val_21138 === 2) {
                          var state_21137__$1 = state_21137;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21137__$1, 4, ch);
                        } else {
                          if (state_val_21138 === 11) {
                            var inst_21127 = state_21137[2];
                            var state_21137__$1 = state_21137;
                            var statearr_21146_21165 = state_21137__$1;
                            statearr_21146_21165[2] = inst_21127;
                            statearr_21146_21165[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21138 === 9) {
                              var state_21137__$1 = state_21137;
                              var statearr_21147_21166 = state_21137__$1;
                              statearr_21147_21166[2] = null;
                              statearr_21147_21166[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_21138 === 5) {
                                var inst_21122 = cljs.core.async.close_BANG_.call(null, out);
                                var state_21137__$1 = state_21137;
                                var statearr_21148_21167 = state_21137__$1;
                                statearr_21148_21167[2] = inst_21122;
                                statearr_21148_21167[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_21138 === 10) {
                                  var inst_21130 = state_21137[2];
                                  var state_21137__$1 = function() {
                                    var statearr_21149 = state_21137;
                                    statearr_21149[8] = inst_21130;
                                    return statearr_21149;
                                  }();
                                  var statearr_21150_21168 = state_21137__$1;
                                  statearr_21150_21168[2] = null;
                                  statearr_21150_21168[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21138 === 8) {
                                    var inst_21119 = state_21137[7];
                                    var state_21137__$1 = state_21137;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21137__$1, 11, out, inst_21119);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___21158, out);
          return function(switch__6459__auto__, c__6474__auto___21158, out) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_21154 = [null, null, null, null, null, null, null, null, null];
                statearr_21154[0] = state_machine__6460__auto__;
                statearr_21154[1] = 1;
                return statearr_21154;
              };
              var state_machine__6460__auto____1 = function(state_21137) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_21137);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e21155) {
                      if (e21155 instanceof Object) {
                        var ex__6463__auto__ = e21155;
                        var statearr_21156_21169 = state_21137;
                        statearr_21156_21169[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21137);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21155;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21170 = state_21137;
                    state_21137 = G__21170;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_21137) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_21137);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___21158, out);
        }();
        var state__6476__auto__ = function() {
          var statearr_21157 = f__6475__auto__.call(null);
          statearr_21157[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___21158;
          return statearr_21157;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___21158, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__6474__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto__) {
    return function() {
      var f__6475__auto__ = function() {
        var switch__6459__auto__ = function(c__6474__auto__) {
          return function(state_21336) {
            var state_val_21337 = state_21336[1];
            if (state_val_21337 === 7) {
              var inst_21332 = state_21336[2];
              var state_21336__$1 = state_21336;
              var statearr_21338_21379 = state_21336__$1;
              statearr_21338_21379[2] = inst_21332;
              statearr_21338_21379[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21337 === 20) {
                var inst_21302 = state_21336[7];
                var inst_21313 = state_21336[2];
                var inst_21314 = cljs.core.next.call(null, inst_21302);
                var inst_21288 = inst_21314;
                var inst_21289 = null;
                var inst_21290 = 0;
                var inst_21291 = 0;
                var state_21336__$1 = function() {
                  var statearr_21339 = state_21336;
                  statearr_21339[8] = inst_21289;
                  statearr_21339[9] = inst_21288;
                  statearr_21339[10] = inst_21313;
                  statearr_21339[11] = inst_21290;
                  statearr_21339[12] = inst_21291;
                  return statearr_21339;
                }();
                var statearr_21340_21380 = state_21336__$1;
                statearr_21340_21380[2] = null;
                statearr_21340_21380[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21337 === 1) {
                  var state_21336__$1 = state_21336;
                  var statearr_21341_21381 = state_21336__$1;
                  statearr_21341_21381[2] = null;
                  statearr_21341_21381[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21337 === 4) {
                    var inst_21277 = state_21336[13];
                    var inst_21277__$1 = state_21336[2];
                    var inst_21278 = inst_21277__$1 == null;
                    var state_21336__$1 = function() {
                      var statearr_21342 = state_21336;
                      statearr_21342[13] = inst_21277__$1;
                      return statearr_21342;
                    }();
                    if (cljs.core.truth_(inst_21278)) {
                      var statearr_21343_21382 = state_21336__$1;
                      statearr_21343_21382[1] = 5;
                    } else {
                      var statearr_21344_21383 = state_21336__$1;
                      statearr_21344_21383[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21337 === 15) {
                      var state_21336__$1 = state_21336;
                      var statearr_21348_21384 = state_21336__$1;
                      statearr_21348_21384[2] = null;
                      statearr_21348_21384[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21337 === 21) {
                        var state_21336__$1 = state_21336;
                        var statearr_21349_21385 = state_21336__$1;
                        statearr_21349_21385[2] = null;
                        statearr_21349_21385[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21337 === 13) {
                          var inst_21289 = state_21336[8];
                          var inst_21288 = state_21336[9];
                          var inst_21290 = state_21336[11];
                          var inst_21291 = state_21336[12];
                          var inst_21298 = state_21336[2];
                          var inst_21299 = inst_21291 + 1;
                          var tmp21345 = inst_21289;
                          var tmp21346 = inst_21288;
                          var tmp21347 = inst_21290;
                          var inst_21288__$1 = tmp21346;
                          var inst_21289__$1 = tmp21345;
                          var inst_21290__$1 = tmp21347;
                          var inst_21291__$1 = inst_21299;
                          var state_21336__$1 = function() {
                            var statearr_21350 = state_21336;
                            statearr_21350[8] = inst_21289__$1;
                            statearr_21350[9] = inst_21288__$1;
                            statearr_21350[11] = inst_21290__$1;
                            statearr_21350[12] = inst_21291__$1;
                            statearr_21350[14] = inst_21298;
                            return statearr_21350;
                          }();
                          var statearr_21351_21386 = state_21336__$1;
                          statearr_21351_21386[2] = null;
                          statearr_21351_21386[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21337 === 22) {
                            var state_21336__$1 = state_21336;
                            var statearr_21352_21387 = state_21336__$1;
                            statearr_21352_21387[2] = null;
                            statearr_21352_21387[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21337 === 6) {
                              var inst_21277 = state_21336[13];
                              var inst_21286 = f.call(null, inst_21277);
                              var inst_21287 = cljs.core.seq.call(null, inst_21286);
                              var inst_21288 = inst_21287;
                              var inst_21289 = null;
                              var inst_21290 = 0;
                              var inst_21291 = 0;
                              var state_21336__$1 = function() {
                                var statearr_21353 = state_21336;
                                statearr_21353[8] = inst_21289;
                                statearr_21353[9] = inst_21288;
                                statearr_21353[11] = inst_21290;
                                statearr_21353[12] = inst_21291;
                                return statearr_21353;
                              }();
                              var statearr_21354_21388 = state_21336__$1;
                              statearr_21354_21388[2] = null;
                              statearr_21354_21388[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_21337 === 17) {
                                var inst_21302 = state_21336[7];
                                var inst_21306 = cljs.core.chunk_first.call(null, inst_21302);
                                var inst_21307 = cljs.core.chunk_rest.call(null, inst_21302);
                                var inst_21308 = cljs.core.count.call(null, inst_21306);
                                var inst_21288 = inst_21307;
                                var inst_21289 = inst_21306;
                                var inst_21290 = inst_21308;
                                var inst_21291 = 0;
                                var state_21336__$1 = function() {
                                  var statearr_21355 = state_21336;
                                  statearr_21355[8] = inst_21289;
                                  statearr_21355[9] = inst_21288;
                                  statearr_21355[11] = inst_21290;
                                  statearr_21355[12] = inst_21291;
                                  return statearr_21355;
                                }();
                                var statearr_21356_21389 = state_21336__$1;
                                statearr_21356_21389[2] = null;
                                statearr_21356_21389[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_21337 === 3) {
                                  var inst_21334 = state_21336[2];
                                  var state_21336__$1 = state_21336;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21336__$1, inst_21334);
                                } else {
                                  if (state_val_21337 === 12) {
                                    var inst_21322 = state_21336[2];
                                    var state_21336__$1 = state_21336;
                                    var statearr_21357_21390 = state_21336__$1;
                                    statearr_21357_21390[2] = inst_21322;
                                    statearr_21357_21390[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_21337 === 2) {
                                      var state_21336__$1 = state_21336;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21336__$1, 4, in$);
                                    } else {
                                      if (state_val_21337 === 23) {
                                        var inst_21330 = state_21336[2];
                                        var state_21336__$1 = state_21336;
                                        var statearr_21358_21391 = state_21336__$1;
                                        statearr_21358_21391[2] = inst_21330;
                                        statearr_21358_21391[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_21337 === 19) {
                                          var inst_21317 = state_21336[2];
                                          var state_21336__$1 = state_21336;
                                          var statearr_21359_21392 = state_21336__$1;
                                          statearr_21359_21392[2] = inst_21317;
                                          statearr_21359_21392[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_21337 === 11) {
                                            var inst_21288 = state_21336[9];
                                            var inst_21302 = state_21336[7];
                                            var inst_21302__$1 = cljs.core.seq.call(null, inst_21288);
                                            var state_21336__$1 = function() {
                                              var statearr_21360 = state_21336;
                                              statearr_21360[7] = inst_21302__$1;
                                              return statearr_21360;
                                            }();
                                            if (inst_21302__$1) {
                                              var statearr_21361_21393 = state_21336__$1;
                                              statearr_21361_21393[1] = 14;
                                            } else {
                                              var statearr_21362_21394 = state_21336__$1;
                                              statearr_21362_21394[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_21337 === 9) {
                                              var inst_21324 = state_21336[2];
                                              var inst_21325 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_21336__$1 = function() {
                                                var statearr_21363 = state_21336;
                                                statearr_21363[15] = inst_21324;
                                                return statearr_21363;
                                              }();
                                              if (cljs.core.truth_(inst_21325)) {
                                                var statearr_21364_21395 = state_21336__$1;
                                                statearr_21364_21395[1] = 21;
                                              } else {
                                                var statearr_21365_21396 = state_21336__$1;
                                                statearr_21365_21396[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_21337 === 5) {
                                                var inst_21280 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_21336__$1 = state_21336;
                                                var statearr_21366_21397 = state_21336__$1;
                                                statearr_21366_21397[2] = inst_21280;
                                                statearr_21366_21397[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_21337 === 14) {
                                                  var inst_21302 = state_21336[7];
                                                  var inst_21304 = cljs.core.chunked_seq_QMARK_.call(null, inst_21302);
                                                  var state_21336__$1 = state_21336;
                                                  if (inst_21304) {
                                                    var statearr_21367_21398 = state_21336__$1;
                                                    statearr_21367_21398[1] = 17;
                                                  } else {
                                                    var statearr_21368_21399 = state_21336__$1;
                                                    statearr_21368_21399[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_21337 === 16) {
                                                    var inst_21320 = state_21336[2];
                                                    var state_21336__$1 = state_21336;
                                                    var statearr_21369_21400 = state_21336__$1;
                                                    statearr_21369_21400[2] = inst_21320;
                                                    statearr_21369_21400[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_21337 === 10) {
                                                      var inst_21289 = state_21336[8];
                                                      var inst_21291 = state_21336[12];
                                                      var inst_21296 = cljs.core._nth.call(null, inst_21289, inst_21291);
                                                      var state_21336__$1 = state_21336;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21336__$1, 13, out, inst_21296);
                                                    } else {
                                                      if (state_val_21337 === 18) {
                                                        var inst_21302 = state_21336[7];
                                                        var inst_21311 = cljs.core.first.call(null, inst_21302);
                                                        var state_21336__$1 = state_21336;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21336__$1, 20, out, inst_21311);
                                                      } else {
                                                        if (state_val_21337 === 8) {
                                                          var inst_21290 = state_21336[11];
                                                          var inst_21291 = state_21336[12];
                                                          var inst_21293 = inst_21291 < inst_21290;
                                                          var inst_21294 = inst_21293;
                                                          var state_21336__$1 = state_21336;
                                                          if (cljs.core.truth_(inst_21294)) {
                                                            var statearr_21370_21401 = state_21336__$1;
                                                            statearr_21370_21401[1] = 10;
                                                          } else {
                                                            var statearr_21371_21402 = state_21336__$1;
                                                            statearr_21371_21402[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6474__auto__);
        return function(switch__6459__auto__, c__6474__auto__) {
          return function() {
            var state_machine__6460__auto__ = null;
            var state_machine__6460__auto____0 = function() {
              var statearr_21375 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_21375[0] = state_machine__6460__auto__;
              statearr_21375[1] = 1;
              return statearr_21375;
            };
            var state_machine__6460__auto____1 = function(state_21336) {
              while (true) {
                var ret_value__6461__auto__ = function() {
                  try {
                    while (true) {
                      var result__6462__auto__ = switch__6459__auto__.call(null, state_21336);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6462__auto__;
                      }
                      break;
                    }
                  } catch (e21376) {
                    if (e21376 instanceof Object) {
                      var ex__6463__auto__ = e21376;
                      var statearr_21377_21403 = state_21336;
                      statearr_21377_21403[5] = ex__6463__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21336);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21376;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21404 = state_21336;
                  state_21336 = G__21404;
                  continue;
                } else {
                  return ret_value__6461__auto__;
                }
                break;
              }
            };
            state_machine__6460__auto__ = function(state_21336) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6460__auto____0.call(this);
                case 1:
                  return state_machine__6460__auto____1.call(this, state_21336);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
            state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
            return state_machine__6460__auto__;
          }();
        }(switch__6459__auto__, c__6474__auto__);
      }();
      var state__6476__auto__ = function() {
        var statearr_21378 = f__6475__auto__.call(null);
        statearr_21378[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto__;
        return statearr_21378;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
    };
  }(c__6474__auto__));
  return c__6474__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6474__auto___21501 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___21501, out) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___21501, out) {
            return function(state_21476) {
              var state_val_21477 = state_21476[1];
              if (state_val_21477 === 7) {
                var inst_21471 = state_21476[2];
                var state_21476__$1 = state_21476;
                var statearr_21478_21502 = state_21476__$1;
                statearr_21478_21502[2] = inst_21471;
                statearr_21478_21502[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21477 === 1) {
                  var inst_21453 = null;
                  var state_21476__$1 = function() {
                    var statearr_21479 = state_21476;
                    statearr_21479[7] = inst_21453;
                    return statearr_21479;
                  }();
                  var statearr_21480_21503 = state_21476__$1;
                  statearr_21480_21503[2] = null;
                  statearr_21480_21503[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21477 === 4) {
                    var inst_21456 = state_21476[8];
                    var inst_21456__$1 = state_21476[2];
                    var inst_21457 = inst_21456__$1 == null;
                    var inst_21458 = cljs.core.not.call(null, inst_21457);
                    var state_21476__$1 = function() {
                      var statearr_21481 = state_21476;
                      statearr_21481[8] = inst_21456__$1;
                      return statearr_21481;
                    }();
                    if (inst_21458) {
                      var statearr_21482_21504 = state_21476__$1;
                      statearr_21482_21504[1] = 5;
                    } else {
                      var statearr_21483_21505 = state_21476__$1;
                      statearr_21483_21505[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21477 === 6) {
                      var state_21476__$1 = state_21476;
                      var statearr_21484_21506 = state_21476__$1;
                      statearr_21484_21506[2] = null;
                      statearr_21484_21506[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21477 === 3) {
                        var inst_21473 = state_21476[2];
                        var inst_21474 = cljs.core.async.close_BANG_.call(null, out);
                        var state_21476__$1 = function() {
                          var statearr_21485 = state_21476;
                          statearr_21485[9] = inst_21473;
                          return statearr_21485;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21476__$1, inst_21474);
                      } else {
                        if (state_val_21477 === 2) {
                          var state_21476__$1 = state_21476;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21476__$1, 4, ch);
                        } else {
                          if (state_val_21477 === 11) {
                            var inst_21456 = state_21476[8];
                            var inst_21465 = state_21476[2];
                            var inst_21453 = inst_21456;
                            var state_21476__$1 = function() {
                              var statearr_21486 = state_21476;
                              statearr_21486[10] = inst_21465;
                              statearr_21486[7] = inst_21453;
                              return statearr_21486;
                            }();
                            var statearr_21487_21507 = state_21476__$1;
                            statearr_21487_21507[2] = null;
                            statearr_21487_21507[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21477 === 9) {
                              var inst_21456 = state_21476[8];
                              var state_21476__$1 = state_21476;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21476__$1, 11, out, inst_21456);
                            } else {
                              if (state_val_21477 === 5) {
                                var inst_21456 = state_21476[8];
                                var inst_21453 = state_21476[7];
                                var inst_21460 = cljs.core._EQ_.call(null, inst_21456, inst_21453);
                                var state_21476__$1 = state_21476;
                                if (inst_21460) {
                                  var statearr_21489_21508 = state_21476__$1;
                                  statearr_21489_21508[1] = 8;
                                } else {
                                  var statearr_21490_21509 = state_21476__$1;
                                  statearr_21490_21509[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_21477 === 10) {
                                  var inst_21468 = state_21476[2];
                                  var state_21476__$1 = state_21476;
                                  var statearr_21491_21510 = state_21476__$1;
                                  statearr_21491_21510[2] = inst_21468;
                                  statearr_21491_21510[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21477 === 8) {
                                    var inst_21453 = state_21476[7];
                                    var tmp21488 = inst_21453;
                                    var inst_21453__$1 = tmp21488;
                                    var state_21476__$1 = function() {
                                      var statearr_21492 = state_21476;
                                      statearr_21492[7] = inst_21453__$1;
                                      return statearr_21492;
                                    }();
                                    var statearr_21493_21511 = state_21476__$1;
                                    statearr_21493_21511[2] = null;
                                    statearr_21493_21511[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___21501, out);
          return function(switch__6459__auto__, c__6474__auto___21501, out) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_21497 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_21497[0] = state_machine__6460__auto__;
                statearr_21497[1] = 1;
                return statearr_21497;
              };
              var state_machine__6460__auto____1 = function(state_21476) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_21476);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e21498) {
                      if (e21498 instanceof Object) {
                        var ex__6463__auto__ = e21498;
                        var statearr_21499_21512 = state_21476;
                        statearr_21499_21512[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21476);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21498;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21513 = state_21476;
                    state_21476 = G__21513;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_21476) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_21476);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___21501, out);
        }();
        var state__6476__auto__ = function() {
          var statearr_21500 = f__6475__auto__.call(null);
          statearr_21500[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___21501;
          return statearr_21500;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___21501, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6474__auto___21648 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___21648, out) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___21648, out) {
            return function(state_21618) {
              var state_val_21619 = state_21618[1];
              if (state_val_21619 === 7) {
                var inst_21614 = state_21618[2];
                var state_21618__$1 = state_21618;
                var statearr_21620_21649 = state_21618__$1;
                statearr_21620_21649[2] = inst_21614;
                statearr_21620_21649[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21619 === 1) {
                  var inst_21581 = new Array(n);
                  var inst_21582 = inst_21581;
                  var inst_21583 = 0;
                  var state_21618__$1 = function() {
                    var statearr_21621 = state_21618;
                    statearr_21621[7] = inst_21583;
                    statearr_21621[8] = inst_21582;
                    return statearr_21621;
                  }();
                  var statearr_21622_21650 = state_21618__$1;
                  statearr_21622_21650[2] = null;
                  statearr_21622_21650[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21619 === 4) {
                    var inst_21586 = state_21618[9];
                    var inst_21586__$1 = state_21618[2];
                    var inst_21587 = inst_21586__$1 == null;
                    var inst_21588 = cljs.core.not.call(null, inst_21587);
                    var state_21618__$1 = function() {
                      var statearr_21623 = state_21618;
                      statearr_21623[9] = inst_21586__$1;
                      return statearr_21623;
                    }();
                    if (inst_21588) {
                      var statearr_21624_21651 = state_21618__$1;
                      statearr_21624_21651[1] = 5;
                    } else {
                      var statearr_21625_21652 = state_21618__$1;
                      statearr_21625_21652[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21619 === 15) {
                      var inst_21608 = state_21618[2];
                      var state_21618__$1 = state_21618;
                      var statearr_21626_21653 = state_21618__$1;
                      statearr_21626_21653[2] = inst_21608;
                      statearr_21626_21653[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21619 === 13) {
                        var state_21618__$1 = state_21618;
                        var statearr_21627_21654 = state_21618__$1;
                        statearr_21627_21654[2] = null;
                        statearr_21627_21654[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21619 === 6) {
                          var inst_21583 = state_21618[7];
                          var inst_21604 = inst_21583 > 0;
                          var state_21618__$1 = state_21618;
                          if (cljs.core.truth_(inst_21604)) {
                            var statearr_21628_21655 = state_21618__$1;
                            statearr_21628_21655[1] = 12;
                          } else {
                            var statearr_21629_21656 = state_21618__$1;
                            statearr_21629_21656[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21619 === 3) {
                            var inst_21616 = state_21618[2];
                            var state_21618__$1 = state_21618;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21618__$1, inst_21616);
                          } else {
                            if (state_val_21619 === 12) {
                              var inst_21582 = state_21618[8];
                              var inst_21606 = cljs.core.vec.call(null, inst_21582);
                              var state_21618__$1 = state_21618;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21618__$1, 15, out, inst_21606);
                            } else {
                              if (state_val_21619 === 2) {
                                var state_21618__$1 = state_21618;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21618__$1, 4, ch);
                              } else {
                                if (state_val_21619 === 11) {
                                  var inst_21598 = state_21618[2];
                                  var inst_21599 = new Array(n);
                                  var inst_21582 = inst_21599;
                                  var inst_21583 = 0;
                                  var state_21618__$1 = function() {
                                    var statearr_21630 = state_21618;
                                    statearr_21630[7] = inst_21583;
                                    statearr_21630[10] = inst_21598;
                                    statearr_21630[8] = inst_21582;
                                    return statearr_21630;
                                  }();
                                  var statearr_21631_21657 = state_21618__$1;
                                  statearr_21631_21657[2] = null;
                                  statearr_21631_21657[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21619 === 9) {
                                    var inst_21582 = state_21618[8];
                                    var inst_21596 = cljs.core.vec.call(null, inst_21582);
                                    var state_21618__$1 = state_21618;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21618__$1, 11, out, inst_21596);
                                  } else {
                                    if (state_val_21619 === 5) {
                                      var inst_21583 = state_21618[7];
                                      var inst_21591 = state_21618[11];
                                      var inst_21582 = state_21618[8];
                                      var inst_21586 = state_21618[9];
                                      var inst_21590 = inst_21582[inst_21583] = inst_21586;
                                      var inst_21591__$1 = inst_21583 + 1;
                                      var inst_21592 = inst_21591__$1 < n;
                                      var state_21618__$1 = function() {
                                        var statearr_21632 = state_21618;
                                        statearr_21632[12] = inst_21590;
                                        statearr_21632[11] = inst_21591__$1;
                                        return statearr_21632;
                                      }();
                                      if (cljs.core.truth_(inst_21592)) {
                                        var statearr_21633_21658 = state_21618__$1;
                                        statearr_21633_21658[1] = 8;
                                      } else {
                                        var statearr_21634_21659 = state_21618__$1;
                                        statearr_21634_21659[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_21619 === 14) {
                                        var inst_21611 = state_21618[2];
                                        var inst_21612 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_21618__$1 = function() {
                                          var statearr_21636 = state_21618;
                                          statearr_21636[13] = inst_21611;
                                          return statearr_21636;
                                        }();
                                        var statearr_21637_21660 = state_21618__$1;
                                        statearr_21637_21660[2] = inst_21612;
                                        statearr_21637_21660[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_21619 === 10) {
                                          var inst_21602 = state_21618[2];
                                          var state_21618__$1 = state_21618;
                                          var statearr_21638_21661 = state_21618__$1;
                                          statearr_21638_21661[2] = inst_21602;
                                          statearr_21638_21661[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_21619 === 8) {
                                            var inst_21591 = state_21618[11];
                                            var inst_21582 = state_21618[8];
                                            var tmp21635 = inst_21582;
                                            var inst_21582__$1 = tmp21635;
                                            var inst_21583 = inst_21591;
                                            var state_21618__$1 = function() {
                                              var statearr_21639 = state_21618;
                                              statearr_21639[7] = inst_21583;
                                              statearr_21639[8] = inst_21582__$1;
                                              return statearr_21639;
                                            }();
                                            var statearr_21640_21662 = state_21618__$1;
                                            statearr_21640_21662[2] = null;
                                            statearr_21640_21662[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___21648, out);
          return function(switch__6459__auto__, c__6474__auto___21648, out) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_21644 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_21644[0] = state_machine__6460__auto__;
                statearr_21644[1] = 1;
                return statearr_21644;
              };
              var state_machine__6460__auto____1 = function(state_21618) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_21618);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e21645) {
                      if (e21645 instanceof Object) {
                        var ex__6463__auto__ = e21645;
                        var statearr_21646_21663 = state_21618;
                        statearr_21646_21663[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21618);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21645;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21664 = state_21618;
                    state_21618 = G__21664;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_21618) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_21618);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___21648, out);
        }();
        var state__6476__auto__ = function() {
          var statearr_21647 = f__6475__auto__.call(null);
          statearr_21647[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___21648;
          return statearr_21647;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___21648, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6474__auto___21807 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___21807, out) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___21807, out) {
            return function(state_21777) {
              var state_val_21778 = state_21777[1];
              if (state_val_21778 === 7) {
                var inst_21773 = state_21777[2];
                var state_21777__$1 = state_21777;
                var statearr_21779_21808 = state_21777__$1;
                statearr_21779_21808[2] = inst_21773;
                statearr_21779_21808[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21778 === 1) {
                  var inst_21736 = [];
                  var inst_21737 = inst_21736;
                  var inst_21738 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_21777__$1 = function() {
                    var statearr_21780 = state_21777;
                    statearr_21780[7] = inst_21737;
                    statearr_21780[8] = inst_21738;
                    return statearr_21780;
                  }();
                  var statearr_21781_21809 = state_21777__$1;
                  statearr_21781_21809[2] = null;
                  statearr_21781_21809[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21778 === 4) {
                    var inst_21741 = state_21777[9];
                    var inst_21741__$1 = state_21777[2];
                    var inst_21742 = inst_21741__$1 == null;
                    var inst_21743 = cljs.core.not.call(null, inst_21742);
                    var state_21777__$1 = function() {
                      var statearr_21782 = state_21777;
                      statearr_21782[9] = inst_21741__$1;
                      return statearr_21782;
                    }();
                    if (inst_21743) {
                      var statearr_21783_21810 = state_21777__$1;
                      statearr_21783_21810[1] = 5;
                    } else {
                      var statearr_21784_21811 = state_21777__$1;
                      statearr_21784_21811[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21778 === 15) {
                      var inst_21767 = state_21777[2];
                      var state_21777__$1 = state_21777;
                      var statearr_21785_21812 = state_21777__$1;
                      statearr_21785_21812[2] = inst_21767;
                      statearr_21785_21812[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21778 === 13) {
                        var state_21777__$1 = state_21777;
                        var statearr_21786_21813 = state_21777__$1;
                        statearr_21786_21813[2] = null;
                        statearr_21786_21813[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21778 === 6) {
                          var inst_21737 = state_21777[7];
                          var inst_21762 = inst_21737.length;
                          var inst_21763 = inst_21762 > 0;
                          var state_21777__$1 = state_21777;
                          if (cljs.core.truth_(inst_21763)) {
                            var statearr_21787_21814 = state_21777__$1;
                            statearr_21787_21814[1] = 12;
                          } else {
                            var statearr_21788_21815 = state_21777__$1;
                            statearr_21788_21815[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21778 === 3) {
                            var inst_21775 = state_21777[2];
                            var state_21777__$1 = state_21777;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21777__$1, inst_21775);
                          } else {
                            if (state_val_21778 === 12) {
                              var inst_21737 = state_21777[7];
                              var inst_21765 = cljs.core.vec.call(null, inst_21737);
                              var state_21777__$1 = state_21777;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21777__$1, 15, out, inst_21765);
                            } else {
                              if (state_val_21778 === 2) {
                                var state_21777__$1 = state_21777;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21777__$1, 4, ch);
                              } else {
                                if (state_val_21778 === 11) {
                                  var inst_21745 = state_21777[10];
                                  var inst_21741 = state_21777[9];
                                  var inst_21755 = state_21777[2];
                                  var inst_21756 = [];
                                  var inst_21757 = inst_21756.push(inst_21741);
                                  var inst_21737 = inst_21756;
                                  var inst_21738 = inst_21745;
                                  var state_21777__$1 = function() {
                                    var statearr_21789 = state_21777;
                                    statearr_21789[11] = inst_21757;
                                    statearr_21789[12] = inst_21755;
                                    statearr_21789[7] = inst_21737;
                                    statearr_21789[8] = inst_21738;
                                    return statearr_21789;
                                  }();
                                  var statearr_21790_21816 = state_21777__$1;
                                  statearr_21790_21816[2] = null;
                                  statearr_21790_21816[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21778 === 9) {
                                    var inst_21737 = state_21777[7];
                                    var inst_21753 = cljs.core.vec.call(null, inst_21737);
                                    var state_21777__$1 = state_21777;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21777__$1, 11, out, inst_21753);
                                  } else {
                                    if (state_val_21778 === 5) {
                                      var inst_21745 = state_21777[10];
                                      var inst_21741 = state_21777[9];
                                      var inst_21738 = state_21777[8];
                                      var inst_21745__$1 = f.call(null, inst_21741);
                                      var inst_21746 = cljs.core._EQ_.call(null, inst_21745__$1, inst_21738);
                                      var inst_21747 = cljs.core.keyword_identical_QMARK_.call(null, inst_21738, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_21748 = inst_21746 || inst_21747;
                                      var state_21777__$1 = function() {
                                        var statearr_21791 = state_21777;
                                        statearr_21791[10] = inst_21745__$1;
                                        return statearr_21791;
                                      }();
                                      if (cljs.core.truth_(inst_21748)) {
                                        var statearr_21792_21817 = state_21777__$1;
                                        statearr_21792_21817[1] = 8;
                                      } else {
                                        var statearr_21793_21818 = state_21777__$1;
                                        statearr_21793_21818[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_21778 === 14) {
                                        var inst_21770 = state_21777[2];
                                        var inst_21771 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_21777__$1 = function() {
                                          var statearr_21795 = state_21777;
                                          statearr_21795[13] = inst_21770;
                                          return statearr_21795;
                                        }();
                                        var statearr_21796_21819 = state_21777__$1;
                                        statearr_21796_21819[2] = inst_21771;
                                        statearr_21796_21819[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_21778 === 10) {
                                          var inst_21760 = state_21777[2];
                                          var state_21777__$1 = state_21777;
                                          var statearr_21797_21820 = state_21777__$1;
                                          statearr_21797_21820[2] = inst_21760;
                                          statearr_21797_21820[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_21778 === 8) {
                                            var inst_21745 = state_21777[10];
                                            var inst_21741 = state_21777[9];
                                            var inst_21737 = state_21777[7];
                                            var inst_21750 = inst_21737.push(inst_21741);
                                            var tmp21794 = inst_21737;
                                            var inst_21737__$1 = tmp21794;
                                            var inst_21738 = inst_21745;
                                            var state_21777__$1 = function() {
                                              var statearr_21798 = state_21777;
                                              statearr_21798[14] = inst_21750;
                                              statearr_21798[7] = inst_21737__$1;
                                              statearr_21798[8] = inst_21738;
                                              return statearr_21798;
                                            }();
                                            var statearr_21799_21821 = state_21777__$1;
                                            statearr_21799_21821[2] = null;
                                            statearr_21799_21821[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___21807, out);
          return function(switch__6459__auto__, c__6474__auto___21807, out) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_21803 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_21803[0] = state_machine__6460__auto__;
                statearr_21803[1] = 1;
                return statearr_21803;
              };
              var state_machine__6460__auto____1 = function(state_21777) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_21777);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e21804) {
                      if (e21804 instanceof Object) {
                        var ex__6463__auto__ = e21804;
                        var statearr_21805_21822 = state_21777;
                        statearr_21805_21822[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21777);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21804;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21823 = state_21777;
                    state_21777 = G__21823;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_21777) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_21777);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___21807, out);
        }();
        var state__6476__auto__ = function() {
          var statearr_21806 = f__6475__auto__.call(null);
          statearr_21806[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___21807;
          return statearr_21806;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___21807, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.maybeFlip_ = function() {
  if (goog.array.isEmpty(this.front_)) {
    this.front_ = this.back_;
    this.front_.reverse();
    this.back_ = [];
  }
};
goog.structs.Queue.prototype.enqueue = function(element) {
  this.back_.push(element);
};
goog.structs.Queue.prototype.dequeue = function() {
  this.maybeFlip_();
  return this.front_.pop();
};
goog.structs.Queue.prototype.peek = function() {
  this.maybeFlip_();
  return goog.array.peek(this.front_);
};
goog.structs.Queue.prototype.getCount = function() {
  return this.front_.length + this.back_.length;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.front_) && goog.array.isEmpty(this.back_);
};
goog.structs.Queue.prototype.clear = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.front_, obj) || goog.array.contains(this.back_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.lastIndexOf(this.front_, obj);
  if (index < 0) {
    return goog.array.remove(this.back_, obj);
  }
  goog.array.removeAt(this.front_, index);
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  var res = [];
  for (var i = this.front_.length - 1;i >= 0;--i) {
    res.push(this.front_[i]);
  }
  var len = this.back_.length;
  for (var i = 0;i < len;++i) {
    res.push(this.back_[i]);
  }
  return res;
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = this.freeQueue_.dequeue();
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject(freeQueue.dequeue());
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject(freeQueue.dequeue());
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.delayTimeout_ = undefined;
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.structs.PriorityPool.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.structs.PriorityPool.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    headers.forEach(function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(max) {
    return function(p1__22901_SHARP_) {
      return max === p1__22901_SHARP_;
    };
  }(max), coll));
};
clojure.set.union = function() {
  var union = null;
  var union__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var union__1 = function(s1) {
    return s1;
  };
  var union__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
    }
  };
  var union__3 = function() {
    var G__22902__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__22902 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22902__delegate.call(this, s1, s2, sets);
    };
    G__22902.cljs$lang$maxFixedArity = 2;
    G__22902.cljs$lang$applyTo = function(arglist__22903) {
      var s1 = cljs.core.first(arglist__22903);
      arglist__22903 = cljs.core.next(arglist__22903);
      var s2 = cljs.core.first(arglist__22903);
      var sets = cljs.core.rest(arglist__22903);
      return G__22902__delegate(s1, s2, sets);
    };
    G__22902.cljs$core$IFn$_invoke$arity$variadic = G__22902__delegate;
    return G__22902;
  }();
  union = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 0:
        return union__0.call(this);
      case 1:
        return union__1.call(this, s1);
      case 2:
        return union__2.call(this, s1, s2);
      default:
        return union__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  union.cljs$lang$maxFixedArity = 2;
  union.cljs$lang$applyTo = union__3.cljs$lang$applyTo;
  union.cljs$core$IFn$_invoke$arity$0 = union__0;
  union.cljs$core$IFn$_invoke$arity$1 = union__1;
  union.cljs$core$IFn$_invoke$arity$2 = union__2;
  union.cljs$core$IFn$_invoke$arity$variadic = union__3.cljs$core$IFn$_invoke$arity$variadic;
  return union;
}();
clojure.set.intersection = function() {
  var intersection = null;
  var intersection__1 = function(s1) {
    return s1;
  };
  var intersection__2 = function(s1, s2) {
    while (true) {
      if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
        var G__22905 = s2;
        var G__22906 = s1;
        s1 = G__22905;
        s2 = G__22906;
        continue;
      } else {
        return cljs.core.reduce.call(null, function(s1, s2) {
          return function(result, item) {
            if (cljs.core.contains_QMARK_.call(null, s2, item)) {
              return result;
            } else {
              return cljs.core.disj.call(null, result, item);
            }
          };
        }(s1, s2), s1, s1);
      }
      break;
    }
  };
  var intersection__3 = function() {
    var G__22907__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__22904_SHARP_) {
        return-cljs.core.count.call(null, p1__22904_SHARP_);
      }, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__22907 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22907__delegate.call(this, s1, s2, sets);
    };
    G__22907.cljs$lang$maxFixedArity = 2;
    G__22907.cljs$lang$applyTo = function(arglist__22908) {
      var s1 = cljs.core.first(arglist__22908);
      arglist__22908 = cljs.core.next(arglist__22908);
      var s2 = cljs.core.first(arglist__22908);
      var sets = cljs.core.rest(arglist__22908);
      return G__22907__delegate(s1, s2, sets);
    };
    G__22907.cljs$core$IFn$_invoke$arity$variadic = G__22907__delegate;
    return G__22907;
  }();
  intersection = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return intersection__1.call(this, s1);
      case 2:
        return intersection__2.call(this, s1, s2);
      default:
        return intersection__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  intersection.cljs$lang$maxFixedArity = 2;
  intersection.cljs$lang$applyTo = intersection__3.cljs$lang$applyTo;
  intersection.cljs$core$IFn$_invoke$arity$1 = intersection__1;
  intersection.cljs$core$IFn$_invoke$arity$2 = intersection__2;
  intersection.cljs$core$IFn$_invoke$arity$variadic = intersection__3.cljs$core$IFn$_invoke$arity$variadic;
  return intersection;
}();
clojure.set.difference = function() {
  var difference = null;
  var difference__1 = function(s1) {
    return s1;
  };
  var difference__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, function(result, item) {
        if (cljs.core.contains_QMARK_.call(null, s2, item)) {
          return cljs.core.disj.call(null, result, item);
        } else {
          return result;
        }
      }, s1, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
    }
  };
  var difference__3 = function() {
    var G__22909__delegate = function(s1, s2, sets) {
      return cljs.core.reduce.call(null, difference, s1, cljs.core.conj.call(null, sets, s2));
    };
    var G__22909 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22909__delegate.call(this, s1, s2, sets);
    };
    G__22909.cljs$lang$maxFixedArity = 2;
    G__22909.cljs$lang$applyTo = function(arglist__22910) {
      var s1 = cljs.core.first(arglist__22910);
      arglist__22910 = cljs.core.next(arglist__22910);
      var s2 = cljs.core.first(arglist__22910);
      var sets = cljs.core.rest(arglist__22910);
      return G__22909__delegate(s1, s2, sets);
    };
    G__22909.cljs$core$IFn$_invoke$arity$variadic = G__22909__delegate;
    return G__22909;
  }();
  difference = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return difference__1.call(this, s1);
      case 2:
        return difference__2.call(this, s1, s2);
      default:
        return difference__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  difference.cljs$lang$maxFixedArity = 2;
  difference.cljs$lang$applyTo = difference__3.cljs$lang$applyTo;
  difference.cljs$core$IFn$_invoke$arity$1 = difference__1;
  difference.cljs$core$IFn$_invoke$arity$2 = difference__2;
  difference.cljs$core$IFn$_invoke$arity$variadic = difference__3.cljs$core$IFn$_invoke$arity$variadic;
  return difference;
}();
clojure.set.select = function select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__22911_SHARP_) {
    return cljs.core.select_keys.call(null, p1__22911_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__22914) {
    var vec__22915 = p__22914;
    var old = cljs.core.nth.call(null, vec__22915, 0, null);
    var new$ = cljs.core.nth.call(null, vec__22915, 1, null);
    if (cljs.core.contains_QMARK_.call(null, map, old)) {
      return cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, map, old));
    } else {
      return m;
    }
  }, cljs.core.apply.call(null, cljs.core.dissoc, map, cljs.core.keys.call(null, kmap)), kmap);
};
clojure.set.rename = function rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__22916_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__22916_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__22919) {
    var vec__22920 = p__22919;
    var k = cljs.core.nth.call(null, vec__22920, 0, null);
    var v = cljs.core.nth.call(null, vec__22920, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function() {
  var join = null;
  var join__2 = function(xrel, yrel) {
    if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
      var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
      var vec__22927 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
      var r = cljs.core.nth.call(null, vec__22927, 0, null);
      var s = cljs.core.nth.call(null, vec__22927, 1, null);
      var idx = clojure.set.index.call(null, r, ks);
      return cljs.core.reduce.call(null, function(ks, vec__22927, r, s, idx) {
        return function(ret, x) {
          var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
          if (cljs.core.truth_(found)) {
            return cljs.core.reduce.call(null, function(found, ks, vec__22927, r, s, idx) {
              return function(p1__22921_SHARP_, p2__22922_SHARP_) {
                return cljs.core.conj.call(null, p1__22921_SHARP_, cljs.core.merge.call(null, p2__22922_SHARP_, x));
              };
            }(found, ks, vec__22927, r, s, idx), ret, found);
          } else {
            return ret;
          }
        };
      }(ks, vec__22927, r, s, idx), cljs.core.PersistentHashSet.EMPTY, s);
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  };
  var join__3 = function(xrel, yrel, km) {
    var vec__22928 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
    var r = cljs.core.nth.call(null, vec__22928, 0, null);
    var s = cljs.core.nth.call(null, vec__22928, 1, null);
    var k = cljs.core.nth.call(null, vec__22928, 2, null);
    var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
    return cljs.core.reduce.call(null, function(vec__22928, r, s, k, idx) {
      return function(ret, x) {
        var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(found, vec__22928, r, s, k, idx) {
            return function(p1__22923_SHARP_, p2__22924_SHARP_) {
              return cljs.core.conj.call(null, p1__22923_SHARP_, cljs.core.merge.call(null, p2__22924_SHARP_, x));
            };
          }(found, vec__22928, r, s, k, idx), ret, found);
        } else {
          return ret;
        }
      };
    }(vec__22928, r, s, k, idx), cljs.core.PersistentHashSet.EMPTY, s);
  };
  join = function(xrel, yrel, km) {
    switch(arguments.length) {
      case 2:
        return join__2.call(this, xrel, yrel);
      case 3:
        return join__3.call(this, xrel, yrel, km);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  join.cljs$core$IFn$_invoke$arity$3 = join__3;
  return join;
}();
clojure.set.subset_QMARK_ = function subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__22929_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__22929_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__22930_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__22930_SHARP_);
  }, set2);
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || width == "" || replacement.length >= width) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("taoensso.encore");
goog.require("cljs.core");
goog.require("goog.net.XhrIoPool");
goog.require("goog.events");
goog.require("clojure.set");
goog.require("goog.net.XhrIo");
goog.require("goog.Uri.QueryData");
goog.require("goog.string");
goog.require("goog.Uri.QueryData");
goog.require("goog.net.XhrIoPool");
goog.require("goog.string.StringBuffer");
goog.require("goog.net.EventType");
goog.require("clojure.set");
goog.require("goog.structs");
goog.require("goog.string.format");
goog.require("goog.structs");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.string");
goog.require("cljs.reader");
goog.require("goog.events");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.XhrIo");
taoensso.encore.encore_version = 1.37;
taoensso.encore.assert_min_encore_version = function assert_min_encore_version(min_version) {
  if (taoensso.encore.encore_version < min_version) {
    throw cljs.core.ex_info.call(null, taoensso.encore.format.call(null, "Insufficient com.taoensso/encore version: %s \x3c %s. You may have a Leiningen dependency conflict (see http://goo.gl/qBbLvC for solution).", taoensso.encore.encore_version, min_version), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "min-version", "min-version", -1697197126), min_version, new cljs.core.Keyword(null, "this-version", "this-version", 355666086), taoensso.encore.encore_version], null));
  } else {
    return null;
  }
};
taoensso.encore.read_edn = function read_edn(s) {
  return cljs.reader.read_string.call(null, s);
};
taoensso.encore.name_with_attrs = function name_with_attrs(name, macro_args) {
  var vec__22452 = typeof cljs.core.first.call(null, macro_args) === "string" ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, macro_args), cljs.core.next.call(null, macro_args)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, macro_args], null);
  var docstring = cljs.core.nth.call(null, vec__22452, 0, null);
  var macro_args__$1 = cljs.core.nth.call(null, vec__22452, 1, null);
  var vec__22453 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, macro_args__$1)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, macro_args__$1), cljs.core.next.call(null, macro_args__$1)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.EMPTY, macro_args__$1], null);
  var attr = cljs.core.nth.call(null, vec__22453, 0, null);
  var macro_args__$2 = cljs.core.nth.call(null, vec__22453, 1, null);
  var attr__$1 = cljs.core.truth_(docstring) ? cljs.core.assoc.call(null, attr, new cljs.core.Keyword(null, "doc", "doc", 1913296891), docstring) : attr;
  var attr__$2 = cljs.core.truth_(cljs.core.meta.call(null, name)) ? cljs.core.conj.call(null, cljs.core.meta.call(null, name), attr__$1) : attr__$1;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta.call(null, name, attr__$2), macro_args__$2], null);
};
taoensso.encore.kw_identical_QMARK_ = cljs.core.keyword_identical_QMARK_;
taoensso.encore.stringy_QMARK_ = function stringy_QMARK_(x) {
  return x instanceof cljs.core.Keyword || typeof x === "string";
};
taoensso.encore.atom_QMARK_ = function atom_QMARK_(x) {
  return x instanceof cljs.core.Atom;
};
taoensso.encore.chan_QMARK_ = function chan_QMARK_(x) {
  return x instanceof cljs.core.async.impl.channels.ManyToManyChannel;
};
taoensso.encore.re_pattern_QMARK_ = function re_pattern_QMARK_(x) {
  return x instanceof RegExp;
};
taoensso.encore.error_QMARK_ = function error_QMARK_(x) {
  return x instanceof Error;
};
taoensso.encore.error_data = function error_data(x) {
  var temp__4126__auto__ = function() {
    var or__3761__auto__ = cljs.core.ex_data.call(null, x);
    if (cljs.core.truth_(or__3761__auto__)) {
      return or__3761__auto__;
    } else {
      if (x instanceof Error) {
        return cljs.core.PersistentArrayMap.EMPTY;
      } else {
        return null;
      }
    }
  }();
  if (cljs.core.truth_(temp__4126__auto__)) {
    var data_map = temp__4126__auto__;
    return cljs.core.merge.call(null, function() {
      var err = x;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "err-type", "err-type", -116717722), cljs.core.type.call(null, err), new cljs.core.Keyword(null, "err-msg", "err-msg", -1158512684), err.message, new cljs.core.Keyword(null, "err-cause", "err-cause", 897008749), err.cause], null);
    }(), data_map);
  } else {
    return null;
  }
};
taoensso.encore.nnil_QMARK_ = function nnil_QMARK_(x) {
  return!(x == null);
};
taoensso.encore.nblank_QMARK_ = function nblank_QMARK_(x) {
  return cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, x));
};
taoensso.encore.nneg_QMARK_ = function nneg_QMARK_(x) {
  return!(x < 0);
};
taoensso.encore.pos_int_QMARK_ = function pos_int_QMARK_(x) {
  return cljs.core.integer_QMARK_.call(null, x) && x > 0;
};
taoensso.encore.nneg_int_QMARK_ = function nneg_int_QMARK_(x) {
  return cljs.core.integer_QMARK_.call(null, x) && !(x < 0);
};
taoensso.encore.nvec_QMARK_ = function nvec_QMARK_(n, x) {
  return cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.count.call(null, x), n);
};
taoensso.encore.udt_QMARK_ = taoensso.encore.nneg_int_QMARK_;
taoensso.encore.vec2_QMARK_ = function vec2_QMARK_(x) {
  return taoensso.encore.nvec_QMARK_.call(null, 2, x);
};
taoensso.encore.vec3_QMARK_ = function vec3_QMARK_(x) {
  return taoensso.encore.nvec_QMARK_.call(null, 3, x);
};
taoensso.encore.distinct_elements_QMARK_ = function distinct_elements_QMARK_(x) {
  return cljs.core.set_QMARK_.call(null, x) || cljs.core._EQ_.call(null, cljs.core.count.call(null, x), cljs.core.count.call(null, taoensso.encore.set_STAR_.call(null, x)));
};
taoensso.encore.nblank_str_QMARK_ = function nblank_str_QMARK_(x) {
  return typeof x === "string" && cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, x));
};
taoensso.encore.nneg_num_QMARK_ = function nneg_num_QMARK_(x) {
  return typeof x === "number" && !(x < 0);
};
taoensso.encore.pos_num_QMARK_ = function pos_num_QMARK_(x) {
  return typeof x === "number" && x > 0;
};
taoensso.encore.zero_num_QMARK_ = function zero_num_QMARK_(x) {
  return cljs.core._EQ_.call(null, 0, x);
};
taoensso.encore.as__QMARK_nblank = function as__QMARK_nblank(x) {
  if (typeof x === "string") {
    if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, x))) {
      return null;
    } else {
      return x;
    }
  } else {
    return null;
  }
};
taoensso.encore.as__QMARK_kw = function as__QMARK_kw(x) {
  if (x instanceof cljs.core.Keyword) {
    return x;
  } else {
    if (typeof x === "string") {
      return cljs.core.keyword.call(null, x);
    } else {
      return null;
    }
  }
};
taoensso.encore.as__QMARK_name = function as__QMARK_name(x) {
  if (x instanceof cljs.core.Keyword) {
    return cljs.core.name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      return null;
    }
  }
};
taoensso.encore.as__QMARK_bool = function as__QMARK_bool(x) {
  if (x == null) {
    return null;
  } else {
    if (x === true || x === false) {
      return x;
    } else {
      if (cljs.core._EQ_.call(null, x, 0) || cljs.core._EQ_.call(null, x, "false") || cljs.core._EQ_.call(null, x, "FALSE") || cljs.core._EQ_.call(null, x, "0")) {
        return false;
      } else {
        if (cljs.core._EQ_.call(null, x, 1) || cljs.core._EQ_.call(null, x, "true") || cljs.core._EQ_.call(null, x, "TRUE") || cljs.core._EQ_.call(null, x, "1")) {
          return true;
        } else {
          return null;
        }
      }
    }
  }
};
taoensso.encore.as__QMARK_int = function as__QMARK_int(x) {
  if (x == null) {
    return null;
  } else {
    if (typeof x === "number") {
      return cljs.core.long$.call(null, x);
    } else {
      if (typeof x === "string") {
        var x__$1 = parseInt(x, 10);
        if (cljs.core.truth_(isNaN(x__$1))) {
          return null;
        } else {
          return x__$1;
        }
      } else {
        return null;
      }
    }
  }
};
taoensso.encore.as__QMARK_float = function as__QMARK_float(x) {
  if (x == null) {
    return null;
  } else {
    if (typeof x === "number") {
      return x;
    } else {
      if (typeof x === "string") {
        var x__$1 = parseFloat(x);
        if (cljs.core.truth_(isNan(x__$1))) {
          return null;
        } else {
          return x__$1;
        }
      } else {
        return null;
      }
    }
  }
};
taoensso.encore.nnil_EQ_ = function() {
  var nnil_EQ_ = null;
  var nnil_EQ___2 = function(x, y) {
    return taoensso.encore.nnil_QMARK_.call(null, x) && cljs.core._EQ_.call(null, x, y);
  };
  var nnil_EQ___3 = function() {
    var G__22456__delegate = function(x, y, more) {
      var and__3749__auto__ = taoensso.encore.nnil_QMARK_.call(null, x);
      if (and__3749__auto__) {
        return cljs.core.apply.call(null, cljs.core._EQ_, x, y, more);
      } else {
        return and__3749__auto__;
      }
    };
    var G__22456 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22456__delegate.call(this, x, y, more);
    };
    G__22456.cljs$lang$maxFixedArity = 2;
    G__22456.cljs$lang$applyTo = function(arglist__22457) {
      var x = cljs.core.first(arglist__22457);
      arglist__22457 = cljs.core.next(arglist__22457);
      var y = cljs.core.first(arglist__22457);
      var more = cljs.core.rest(arglist__22457);
      return G__22456__delegate(x, y, more);
    };
    G__22456.cljs$core$IFn$_invoke$arity$variadic = G__22456__delegate;
    return G__22456;
  }();
  nnil_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return nnil_EQ___2.call(this, x, y);
      default:
        return nnil_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nnil_EQ_.cljs$lang$maxFixedArity = 2;
  nnil_EQ_.cljs$lang$applyTo = nnil_EQ___3.cljs$lang$applyTo;
  nnil_EQ_.cljs$core$IFn$_invoke$arity$2 = nnil_EQ___2;
  nnil_EQ_.cljs$core$IFn$_invoke$arity$variadic = nnil_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return nnil_EQ_;
}();
taoensso.encore.vec_STAR_ = function vec_STAR_(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return x;
  } else {
    return cljs.core.vec.call(null, x);
  }
};
taoensso.encore.set_STAR_ = function set_STAR_(x) {
  if (cljs.core.set_QMARK_.call(null, x)) {
    return x;
  } else {
    return cljs.core.set.call(null, x);
  }
};
taoensso.encore.ks_EQ_ = function ks_EQ_(ks, m) {
  return cljs.core._EQ_.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, m)), taoensso.encore.set_STAR_.call(null, ks));
};
taoensso.encore.ks_LT__EQ_ = function ks_LT__EQ_(ks, m) {
  return clojure.set.subset_QMARK_.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, m)), taoensso.encore.set_STAR_.call(null, ks));
};
taoensso.encore.ks_GT__EQ_ = function ks_GT__EQ_(ks, m) {
  return clojure.set.superset_QMARK_.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, m)), taoensso.encore.set_STAR_.call(null, ks));
};
taoensso.encore.ks_nnil_QMARK_ = function ks_nnil_QMARK_(ks, m) {
  return cljs.core.every_QMARK_.call(null, function(p1__22458_SHARP_) {
    return taoensso.encore.nnil_QMARK_.call(null, cljs.core.get.call(null, m, p1__22458_SHARP_));
  }, ks);
};
taoensso.encore.assertion_error = function assertion_error(msg) {
  return new Error(msg);
};
taoensso.encore.hthrow = function() {
  var hthrow__delegate = function(hard_QMARK_, ns_str, _QMARK_line, form, val, p__22459) {
    var vec__22461 = p__22459;
    var _QMARK_err = cljs.core.nth.call(null, vec__22461, 0, null);
    var pattern = "Condition failed in `%s:%s` [pred-form, val]: [%s, %s]";
    var line_str = function() {
      var or__3761__auto__ = _QMARK_line;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return "?";
      }
    }();
    var form_str = [cljs.core.str(function() {
      var or__3761__auto__ = form;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return "\x3cnil\x3e";
      }
    }())].join("");
    var val_str = [cljs.core.str(function() {
      var or__3761__auto__ = val;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return "\x3cnil\x3e";
      }
    }())].join("");
    var _QMARK_err_str = function() {
      var temp__4126__auto__ = _QMARK_err;
      if (cljs.core.truth_(temp__4126__auto__)) {
        var e = temp__4126__auto__;
        return[cljs.core.str(_QMARK_err)].join("");
      } else {
        return null;
      }
    }();
    var msg = function() {
      var m = taoensso.encore.format.call(null, pattern, ns_str, line_str, form_str, val_str);
      if (cljs.core.not.call(null, _QMARK_err_str)) {
        return m;
      } else {
        return[cljs.core.str(m), cljs.core.str("\nPredicate error: "), cljs.core.str(_QMARK_err_str)].join("");
      }
    }();
    throw cljs.core.not.call(null, hard_QMARK_) ? taoensso.encore.assertion_error.call(null, msg) : cljs.core.ex_info.call(null, msg, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_str, new cljs.core.Keyword(null, "?line", "?line", -631853385), _QMARK_line, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "val", "val", 128701612), val, new cljs.core.Keyword(null, "?err", "?err", 549653299), _QMARK_err], 
    null));
  };
  var hthrow = function(hard_QMARK_, ns_str, _QMARK_line, form, val, var_args) {
    var p__22459 = null;
    if (arguments.length > 5) {
      p__22459 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
    }
    return hthrow__delegate.call(this, hard_QMARK_, ns_str, _QMARK_line, form, val, p__22459);
  };
  hthrow.cljs$lang$maxFixedArity = 5;
  hthrow.cljs$lang$applyTo = function(arglist__22462) {
    var hard_QMARK_ = cljs.core.first(arglist__22462);
    arglist__22462 = cljs.core.next(arglist__22462);
    var ns_str = cljs.core.first(arglist__22462);
    arglist__22462 = cljs.core.next(arglist__22462);
    var _QMARK_line = cljs.core.first(arglist__22462);
    arglist__22462 = cljs.core.next(arglist__22462);
    var form = cljs.core.first(arglist__22462);
    arglist__22462 = cljs.core.next(arglist__22462);
    var val = cljs.core.first(arglist__22462);
    var p__22459 = cljs.core.rest(arglist__22462);
    return hthrow__delegate(hard_QMARK_, ns_str, _QMARK_line, form, val, p__22459);
  };
  hthrow.cljs$core$IFn$_invoke$arity$variadic = hthrow__delegate;
  return hthrow;
}();
taoensso.encore.non_throwing = function non_throwing(pred) {
  return function(x) {
    var vec__22465 = function() {
      try {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [pred.call(null, x)], null);
      } catch (e22466) {
        if (e22466 instanceof Error) {
          var e__15968__auto__ = e22466;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, e__15968__auto__], null);
        } else {
          throw e22466;
        }
      }
    }();
    var _QMARK_r = cljs.core.nth.call(null, vec__22465, 0, null);
    var _ = cljs.core.nth.call(null, vec__22465, 1, null);
    return _QMARK_r;
  };
};
taoensso.encore.hpred = function hpred(pred_form) {
  if (!cljs.core.vector_QMARK_.call(null, pred_form)) {
    return pred_form;
  } else {
    var vec__22472 = pred_form;
    var type = cljs.core.nth.call(null, vec__22472, 0, null);
    var p1 = cljs.core.nth.call(null, vec__22472, 1, null);
    var p2 = cljs.core.nth.call(null, vec__22472, 2, null);
    var more = cljs.core.nthnext.call(null, vec__22472, 3);
    var G__22473 = type instanceof cljs.core.Keyword ? type.fqn : null;
    switch(G__22473) {
      case "el":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return cljs.core.contains_QMARK_.call(null, taoensso.encore.set_STAR_.call(null, p1), x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "not\x3d":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return cljs.core.not_EQ_.call(null, p1, x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "ks-nnil?":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return taoensso.encore.ks_nnil_QMARK_.call(null, p1, x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "ks\x3c\x3d":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return taoensso.encore.ks_LT__EQ_.call(null, p1, x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "or":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            var or__3761__auto__ = cljs.core.truth_(p1) ? taoensso.encore.non_throwing.call(null, hpred.call(null, p1)).call(null, x) : null;
            if (cljs.core.truth_(or__3761__auto__)) {
              return or__3761__auto__;
            } else {
              var or__3761__auto____$1 = cljs.core.truth_(p2) ? taoensso.encore.non_throwing.call(null, hpred.call(null, p2)).call(null, x) : null;
              if (cljs.core.truth_(or__3761__auto____$1)) {
                return or__3761__auto____$1;
              } else {
                return cljs.core.some.call(null, function(or__3761__auto____$1, or__3761__auto__, G__22473, vec__22472, type, p1, p2, more) {
                  return function(p1__22468_SHARP_) {
                    return taoensso.encore.non_throwing.call(null, hpred.call(null, p1__22468_SHARP_)).call(null, x);
                  };
                }(or__3761__auto____$1, or__3761__auto__, G__22473, vec__22472, type, p1, p2, more), more);
              }
            }
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "not":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            var and__3749__auto__ = cljs.core.not.call(null, p1) ? true : cljs.core.not.call(null, hpred.call(null, p1).call(null, x));
            if (and__3749__auto__) {
              var and__3749__auto____$1 = cljs.core.not.call(null, p2) ? true : cljs.core.not.call(null, hpred.call(null, p2).call(null, x));
              if (and__3749__auto____$1) {
                return cljs.core.every_QMARK_.call(null, function(and__3749__auto____$1, and__3749__auto__, G__22473, vec__22472, type, p1, p2, more) {
                  return function(p1__22467_SHARP_) {
                    return cljs.core.not.call(null, hpred.call(null, p1__22467_SHARP_).call(null, x));
                  };
                }(and__3749__auto____$1, and__3749__auto__, G__22473, vec__22472, type, p1, p2, more), more);
              } else {
                return and__3749__auto____$1;
              }
            } else {
              return and__3749__auto__;
            }
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "ks\x3d":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return taoensso.encore.ks_EQ_.call(null, p1, x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "and":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            var and__3749__auto__ = cljs.core.not.call(null, p1) ? true : hpred.call(null, p1).call(null, x);
            if (cljs.core.truth_(and__3749__auto__)) {
              var and__3749__auto____$1 = cljs.core.not.call(null, p2) ? true : hpred.call(null, p2).call(null, x);
              if (cljs.core.truth_(and__3749__auto____$1)) {
                return cljs.core.every_QMARK_.call(null, function(and__3749__auto____$1, and__3749__auto__, G__22473, vec__22472, type, p1, p2, more) {
                  return function(p1__22469_SHARP_) {
                    return hpred.call(null, p1__22469_SHARP_).call(null, x);
                  };
                }(and__3749__auto____$1, and__3749__auto__, G__22473, vec__22472, type, p1, p2, more), more);
              } else {
                return and__3749__auto____$1;
              }
            } else {
              return and__3749__auto__;
            }
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "ks\x3e\x3d":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return taoensso.encore.ks_GT__EQ_.call(null, p1, x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "not-in":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return!cljs.core.contains_QMARK_.call(null, taoensso.encore.set_STAR_.call(null, p1), x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "not-el":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return!cljs.core.contains_QMARK_.call(null, taoensso.encore.set_STAR_.call(null, p1), x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "\x3d":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return cljs.core._EQ_.call(null, p1, x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "set\x3c\x3d":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return clojure.set.subset_QMARK_.call(null, taoensso.encore.set_STAR_.call(null, x), taoensso.encore.set_STAR_.call(null, p1));
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "set\x3e\x3d":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return clojure.set.superset_QMARK_.call(null, taoensso.encore.set_STAR_.call(null, x), taoensso.encore.set_STAR_.call(null, p1));
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "set\x3d":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return cljs.core._EQ_.call(null, taoensso.encore.set_STAR_.call(null, x), taoensso.encore.set_STAR_.call(null, p1));
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      case "in":
        return function(G__22473, vec__22472, type, p1, p2, more) {
          return function(x) {
            return cljs.core.contains_QMARK_.call(null, taoensso.encore.set_STAR_.call(null, p1), x);
          };
        }(G__22473, vec__22472, type, p1, p2, more);
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
    }
  }
};
taoensso.encore.hcond = function hcond(hard_QMARK_, ns_str, line, x_, x_form, pred, pred_form) {
  var vec__22479 = function() {
    try {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, x_)], null);
    } catch (e22481) {
      if (e22481 instanceof Error) {
        var e__15968__auto__ = e22481;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, e__15968__auto__], null);
      } else {
        throw e22481;
      }
    }
  }();
  var _QMARK_x = cljs.core.nth.call(null, vec__22479, 0, null);
  var _QMARK_x_err = cljs.core.nth.call(null, vec__22479, 1, null);
  var have_x_QMARK_ = _QMARK_x_err == null;
  var vec__22480 = have_x_QMARK_ ? function() {
    try {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [taoensso.encore.hpred.call(null, pred).call(null, _QMARK_x)], null);
    } catch (e22482) {
      if (e22482 instanceof Error) {
        var e__15968__auto__ = e22482;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, e__15968__auto__], null);
      } else {
        throw e22482;
      }
    }
  }() : null;
  var pass_QMARK_ = cljs.core.nth.call(null, vec__22480, 0, null);
  var _QMARK_pred_err = cljs.core.nth.call(null, vec__22480, 1, null);
  if (cljs.core.truth_(pass_QMARK_)) {
    return _QMARK_x;
  } else {
    return taoensso.encore.hthrow.call(null, hard_QMARK_, ns_str, line, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, x_form), pred_form), have_x_QMARK_ ? _QMARK_x : _QMARK_x_err, _QMARK_pred_err);
  }
};
taoensso.encore.fq_name = function fq_name(x) {
  if (typeof x === "string") {
    return x;
  } else {
    var n = cljs.core.name.call(null, x);
    var temp__4124__auto__ = cljs.core.namespace.call(null, x);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ns = temp__4124__auto__;
      return[cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(n)].join("");
    } else {
      return n;
    }
  }
};
taoensso.encore.explode_keyword = function explode_keyword(k) {
  return clojure.string.split.call(null, taoensso.encore.fq_name.call(null, k), /[\.\/]/);
};
taoensso.encore.merge_keywords = function() {
  var merge_keywords__delegate = function(ks, p__22483) {
    var vec__22485 = p__22483;
    var no_slash_QMARK_ = cljs.core.nth.call(null, vec__22485, 0, null);
    var parts = cljs.core.reduce.call(null, cljs.core.into, cljs.core.PersistentVector.EMPTY, cljs.core.mapv.call(null, taoensso.encore.explode_keyword, cljs.core.filterv.call(null, cljs.core.identity, ks)));
    if (cljs.core.empty_QMARK_.call(null, parts)) {
      return null;
    } else {
      if (cljs.core.truth_(no_slash_QMARK_)) {
        return cljs.core.keyword.call(null, clojure.string.join.call(null, ".", parts));
      } else {
        var ppop = cljs.core.pop.call(null, parts);
        return cljs.core.keyword.call(null, cljs.core.empty_QMARK_.call(null, ppop) ? null : clojure.string.join.call(null, ".", ppop), cljs.core.peek.call(null, parts));
      }
    }
  };
  var merge_keywords = function(ks, var_args) {
    var p__22483 = null;
    if (arguments.length > 1) {
      p__22483 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_keywords__delegate.call(this, ks, p__22483);
  };
  merge_keywords.cljs$lang$maxFixedArity = 1;
  merge_keywords.cljs$lang$applyTo = function(arglist__22486) {
    var ks = cljs.core.first(arglist__22486);
    var p__22483 = cljs.core.rest(arglist__22486);
    return merge_keywords__delegate(ks, p__22483);
  };
  merge_keywords.cljs$core$IFn$_invoke$arity$variadic = merge_keywords__delegate;
  return merge_keywords;
}();
taoensso.encore.clamp = function clamp(nmin, nmax, n) {
  if (n < nmin) {
    return nmin;
  } else {
    if (n > nmax) {
      return nmax;
    } else {
      return n;
    }
  }
};
taoensso.encore.pow = function pow(n, exp) {
  return Math.pow.call(null, n, exp);
};
taoensso.encore.abs = function abs(n) {
  if (n < 0) {
    return-n;
  } else {
    return n;
  }
};
taoensso.encore.round = function() {
  var round__delegate = function(n, p__22487) {
    var vec__22490 = p__22487;
    var type = cljs.core.nth.call(null, vec__22490, 0, null);
    var nplaces = cljs.core.nth.call(null, vec__22490, 1, null);
    var n__$1 = n;
    var modifier = cljs.core.truth_(nplaces) ? Math.pow.call(null, 10, nplaces) : null;
    var n_STAR_ = cljs.core.not.call(null, modifier) ? n__$1 : n__$1 * modifier;
    var rounded = function() {
      var G__22491 = function() {
        var or__3761__auto__ = type;
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          return new cljs.core.Keyword(null, "round", "round", 2009433328);
        }
      }() instanceof cljs.core.Keyword ? function() {
        var or__3761__auto__ = type;
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          return new cljs.core.Keyword(null, "round", "round", 2009433328);
        }
      }().fqn : null;
      switch(G__22491) {
        case "trunc":
          return cljs.core.long$.call(null, n_STAR_);
          break;
        case "ceil":
          return Math.ceil.call(null, n_STAR_);
          break;
        case "floor":
          return Math.floor.call(null, n_STAR_);
          break;
        case "round":
          return Math.round.call(null, n_STAR_);
          break;
        default:
          throw cljs.core.ex_info.call(null, "Unknown round type", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), type], null));;
      }
    }();
    if (cljs.core.not.call(null, modifier)) {
      return cljs.core.long$.call(null, rounded);
    } else {
      return rounded / modifier;
    }
  };
  var round = function(n, var_args) {
    var p__22487 = null;
    if (arguments.length > 1) {
      p__22487 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return round__delegate.call(this, n, p__22487);
  };
  round.cljs$lang$maxFixedArity = 1;
  round.cljs$lang$applyTo = function(arglist__22493) {
    var n = cljs.core.first(arglist__22493);
    var p__22487 = cljs.core.rest(arglist__22493);
    return round__delegate(n, p__22487);
  };
  round.cljs$core$IFn$_invoke$arity$variadic = round__delegate;
  return round;
}();
taoensso.encore.round_STAR_ = taoensso.encore.round;
taoensso.encore.round1 = function round1(n) {
  return Math.round.call(null, n * 10) / 10;
};
taoensso.encore.round2 = function round2(n) {
  return Math.round.call(null, n * 100) / 100;
};
taoensso.encore.exp_backoff = function() {
  var exp_backoff__delegate = function(nattempt, p__22494) {
    var vec__22497 = p__22494;
    var map__22498 = cljs.core.nth.call(null, vec__22497, 0, null);
    var map__22498__$1 = cljs.core.seq_QMARK_.call(null, map__22498) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22498) : map__22498;
    var factor = cljs.core.get.call(null, map__22498__$1, new cljs.core.Keyword(null, "factor", "factor", -2103172748), 1E3);
    var min_SINGLEQUOTE_ = cljs.core.get.call(null, map__22498__$1, new cljs.core.Keyword(null, "min", "min", 444991522));
    var max_SINGLEQUOTE_ = cljs.core.get.call(null, map__22498__$1, new cljs.core.Keyword(null, "max", "max", 61366548));
    var binary_exp = Math.pow.call(null, 2, nattempt - 1);
    var time = (binary_exp + cljs.core.rand.call(null, binary_exp)) * .5 * factor;
    return cljs.core.long$.call(null, function() {
      var time__$1 = cljs.core.truth_(min_SINGLEQUOTE_) ? function() {
        var x__4073__auto__ = min_SINGLEQUOTE_;
        var y__4074__auto__ = time;
        return x__4073__auto__ > y__4074__auto__ ? x__4073__auto__ : y__4074__auto__;
      }() : time;
      var time__$2 = cljs.core.truth_(max_SINGLEQUOTE_) ? function() {
        var x__4080__auto__ = max_SINGLEQUOTE_;
        var y__4081__auto__ = time__$1;
        return x__4080__auto__ < y__4081__auto__ ? x__4080__auto__ : y__4081__auto__;
      }() : time__$1;
      return time__$2;
    }());
  };
  var exp_backoff = function(nattempt, var_args) {
    var p__22494 = null;
    if (arguments.length > 1) {
      p__22494 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return exp_backoff__delegate.call(this, nattempt, p__22494);
  };
  exp_backoff.cljs$lang$maxFixedArity = 1;
  exp_backoff.cljs$lang$applyTo = function(arglist__22499) {
    var nattempt = cljs.core.first(arglist__22499);
    var p__22494 = cljs.core.rest(arglist__22499);
    return exp_backoff__delegate(nattempt, p__22494);
  };
  exp_backoff.cljs$core$IFn$_invoke$arity$variadic = exp_backoff__delegate;
  return exp_backoff;
}();
taoensso.encore.now_dt = function now_dt() {
  return new Date;
};
taoensso.encore.now_udt = function now_udt() {
  return(new Date).getTime();
};
taoensso.encore.now_udt_mock_fn = function() {
  var now_udt_mock_fn__delegate = function(p__22500) {
    var vec__22502 = p__22500;
    var mock_udts = cljs.core.nth.call(null, vec__22502, 0, null);
    var mock_udts__$1 = function() {
      var or__3761__auto__ = mock_udts;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return cljs.core.range.call(null);
      }
    }();
    var idx = cljs.core.atom.call(null, -1);
    return function(mock_udts__$1, idx, vec__22502, mock_udts) {
      return function() {
        return cljs.core.nth.call(null, mock_udts__$1, cljs.core.swap_BANG_.call(null, idx, cljs.core.inc));
      };
    }(mock_udts__$1, idx, vec__22502, mock_udts);
  };
  var now_udt_mock_fn = function(var_args) {
    var p__22500 = null;
    if (arguments.length > 0) {
      p__22500 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return now_udt_mock_fn__delegate.call(this, p__22500);
  };
  now_udt_mock_fn.cljs$lang$maxFixedArity = 0;
  now_udt_mock_fn.cljs$lang$applyTo = function(arglist__22503) {
    var p__22500 = cljs.core.seq(arglist__22503);
    return now_udt_mock_fn__delegate(p__22500);
  };
  now_udt_mock_fn.cljs$core$IFn$_invoke$arity$variadic = now_udt_mock_fn__delegate;
  return now_udt_mock_fn;
}();
taoensso.encore.secs__GT_ms = function secs__GT_ms(secs) {
  return cljs.core.long$.call(null, secs * 1E3);
};
taoensso.encore.ms__GT_secs = function ms__GT_secs(ms) {
  return cljs.core.quot.call(null, ms, 1E3);
};
taoensso.encore.ms = function() {
  var ms__delegate = function(p__22504) {
    var map__22507 = p__22504;
    var map__22507__$1 = cljs.core.seq_QMARK_.call(null, map__22507) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22507) : map__22507;
    var opts = map__22507__$1;
    var ms__$1 = cljs.core.get.call(null, map__22507__$1, new cljs.core.Keyword(null, "ms", "ms", -1152709733));
    var msecs = cljs.core.get.call(null, map__22507__$1, new cljs.core.Keyword(null, "msecs", "msecs", 1711980553));
    var secs = cljs.core.get.call(null, map__22507__$1, new cljs.core.Keyword(null, "secs", "secs", 1532330091));
    var mins = cljs.core.get.call(null, map__22507__$1, new cljs.core.Keyword(null, "mins", "mins", 467369676));
    var hours = cljs.core.get.call(null, map__22507__$1, new cljs.core.Keyword(null, "hours", "hours", 58380855));
    var days = cljs.core.get.call(null, map__22507__$1, new cljs.core.Keyword(null, "days", "days", -1394072564));
    var weeks = cljs.core.get.call(null, map__22507__$1, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125));
    var months = cljs.core.get.call(null, map__22507__$1, new cljs.core.Keyword(null, "months", "months", -45571637));
    var years = cljs.core.get.call(null, map__22507__$1, new cljs.core.Keyword(null, "years", "years", -1298579689));
    if (cljs.core.truth_(cljs.core.mapv.call(null, function(map__22507, map__22507__$1, opts, ms__$1, msecs, secs, mins, hours, days, weeks, months, years) {
      return function(have_in__22508) {
        return taoensso.encore.hcond.call(null, false, "taoensso.encore", 666, new cljs.core.Delay(function(map__22507, map__22507__$1, opts, ms__$1, msecs, secs, mins, hours, days, weeks, months, years) {
          return function() {
            return have_in__22508;
          };
        }(map__22507, map__22507__$1, opts, ms__$1, msecs, secs, mins, hours, days, weeks, months, years), null), new cljs.core.Symbol(null, "have-in__22508", "have-in__22508", 737499573, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [new cljs.core.Keyword(null, "msecs", "msecs", 1711980553), null, new cljs.core.Keyword(null, "secs", "secs", 1532330091), null, new cljs.core.Keyword(null, "months", "months", -45571637), null, new cljs.core.Keyword(null, "days", 
        "days", -1394072564), null, new cljs.core.Keyword(null, "mins", "mins", 467369676), null, new cljs.core.Keyword(null, "hours", "hours", 58380855), null, new cljs.core.Keyword(null, "years", "years", -1298579689), null, new cljs.core.Keyword(null, "ms", "ms", -1152709733), null, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), null], null), null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [new cljs.core.Keyword(null, "msecs", "msecs", 1711980553), 
        null, new cljs.core.Keyword(null, "secs", "secs", 1532330091), null, new cljs.core.Keyword(null, "months", "months", -45571637), null, new cljs.core.Keyword(null, "days", "days", -1394072564), null, new cljs.core.Keyword(null, "mins", "mins", 467369676), null, new cljs.core.Keyword(null, "hours", "hours", 58380855), null, new cljs.core.Keyword(null, "years", "years", -1298579689), null, new cljs.core.Keyword(null, "ms", "ms", -1152709733), null, new cljs.core.Keyword(null, "weeks", "weeks", 
        1844596125), null], null), null));
      };
    }(map__22507, map__22507__$1, opts, ms__$1, msecs, secs, mins, hours, days, weeks, months, years), cljs.core.keys.call(null, opts)))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have", "have", 574419306, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [new cljs.core.Keyword(null, "msecs", "msecs", 1711980553), null, new cljs.core.Keyword(null, "secs", "secs", 1532330091), null, new cljs.core.Keyword(null, "months", "months", -45571637), null, new cljs.core.Keyword(null, "days", "days", -1394072564), 
      null, new cljs.core.Keyword(null, "mins", "mins", 467369676), null, new cljs.core.Keyword(null, "hours", "hours", 58380855), null, new cljs.core.Keyword(null, "years", "years", -1298579689), null, new cljs.core.Keyword(null, "ms", "ms", -1152709733), null, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), null], null), null), new cljs.core.Keyword(null, "in", "in", -1531184865), cljs.core.list(new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, 
      "opts", "opts", 1795607228, null)))))].join(""));
    }
    return taoensso.encore.round.call(null, (cljs.core.truth_(years) ? years * 1E3 * 60 * 60 * 24 * 365 : 0) + (cljs.core.truth_(months) ? months * 1E3 * 60 * 60 * 24 * 29.53 : 0) + (cljs.core.truth_(weeks) ? weeks * 1E3 * 60 * 60 * 24 * 7 : 0) + (cljs.core.truth_(days) ? days * 1E3 * 60 * 60 * 24 : 0) + (cljs.core.truth_(hours) ? hours * 1E3 * 60 * 60 : 0) + (cljs.core.truth_(mins) ? mins * 1E3 * 60 : 0) + (cljs.core.truth_(secs) ? secs * 1E3 : 0) + (cljs.core.truth_(msecs) ? msecs : 0) + (cljs.core.truth_(ms__$1) ? 
    ms__$1 : 0));
  };
  var ms = function(var_args) {
    var p__22504 = null;
    if (arguments.length > 0) {
      p__22504 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ms__delegate.call(this, p__22504);
  };
  ms.cljs$lang$maxFixedArity = 0;
  ms.cljs$lang$applyTo = function(arglist__22509) {
    var p__22504 = cljs.core.seq(arglist__22509);
    return ms__delegate(p__22504);
  };
  ms.cljs$core$IFn$_invoke$arity$variadic = ms__delegate;
  return ms;
}();
taoensso.encore.secs = cljs.core.comp.call(null, taoensso.encore.ms__GT_secs, taoensso.encore.ms);
taoensso.encore.singleton_QMARK_ = function singleton_QMARK_(coll) {
  if (cljs.core.counted_QMARK_.call(null, coll)) {
    return cljs.core._EQ_.call(null, cljs.core.count.call(null, coll), 1);
  } else {
    return cljs.core.not.call(null, cljs.core.next.call(null, coll));
  }
};
taoensso.encore.__GT__QMARK_singleton = function __GT__QMARK_singleton(coll) {
  if (taoensso.encore.singleton_QMARK_.call(null, coll)) {
    var vec__22515 = coll;
    var c1 = cljs.core.nth.call(null, vec__22515, 0, null);
    return c1;
  } else {
    return null;
  }
};
taoensso.encore.__GT_vec = function __GT_vec(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return x;
  } else {
    if (cljs.core.sequential_QMARK_.call(null, x)) {
      return cljs.core.vec.call(null, x);
    } else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null);
    }
  }
};
taoensso.encore.vsplit_first = function vsplit_first(v) {
  var vec__22517 = v;
  var v1 = cljs.core.nth.call(null, vec__22517, 0, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v1, cljs.core.count.call(null, v) > 1 ? cljs.core.subvec.call(null, v, 1) : null], null);
};
taoensso.encore.nnil_set = function nnil_set(x) {
  return cljs.core.disj.call(null, taoensso.encore.set_STAR_.call(null, x), null);
};
taoensso.encore.conj_some = function() {
  var conj_some = null;
  var conj_some__2 = function(coll, _QMARK_x) {
    if (taoensso.encore.nnil_QMARK_.call(null, _QMARK_x)) {
      return cljs.core.conj.call(null, coll, _QMARK_x);
    } else {
      return coll;
    }
  };
  var conj_some__3 = function() {
    var G__22518__delegate = function(coll, _QMARK_x, _QMARK_xs) {
      return cljs.core.reduce.call(null, conj_some, conj_some.call(null, coll, _QMARK_x), _QMARK_xs);
    };
    var G__22518 = function(coll, _QMARK_x, var_args) {
      var _QMARK_xs = null;
      if (arguments.length > 2) {
        _QMARK_xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22518__delegate.call(this, coll, _QMARK_x, _QMARK_xs);
    };
    G__22518.cljs$lang$maxFixedArity = 2;
    G__22518.cljs$lang$applyTo = function(arglist__22519) {
      var coll = cljs.core.first(arglist__22519);
      arglist__22519 = cljs.core.next(arglist__22519);
      var _QMARK_x = cljs.core.first(arglist__22519);
      var _QMARK_xs = cljs.core.rest(arglist__22519);
      return G__22518__delegate(coll, _QMARK_x, _QMARK_xs);
    };
    G__22518.cljs$core$IFn$_invoke$arity$variadic = G__22518__delegate;
    return G__22518;
  }();
  conj_some = function(coll, _QMARK_x, var_args) {
    var _QMARK_xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj_some__2.call(this, coll, _QMARK_x);
      default:
        return conj_some__3.cljs$core$IFn$_invoke$arity$variadic(coll, _QMARK_x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_some.cljs$lang$maxFixedArity = 2;
  conj_some.cljs$lang$applyTo = conj_some__3.cljs$lang$applyTo;
  conj_some.cljs$core$IFn$_invoke$arity$2 = conj_some__2;
  conj_some.cljs$core$IFn$_invoke$arity$variadic = conj_some__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_some;
}();
taoensso.encore.backport_run_BANG_ = function backport_run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__22521_SHARP_, p2__22520_SHARP_) {
    return proc.call(null, p2__22520_SHARP_);
  }, null, coll);
};
taoensso.encore.translate_signed_idx = function translate_signed_idx(signed_idx, max_idx) {
  if (signed_idx >= 0) {
    var x__4080__auto__ = signed_idx;
    var y__4081__auto__ = max_idx;
    return x__4080__auto__ < y__4081__auto__ ? x__4080__auto__ : y__4081__auto__;
  } else {
    var x__4073__auto__ = 0;
    var y__4074__auto__ = signed_idx + max_idx;
    return x__4073__auto__ > y__4074__auto__ ? x__4073__auto__ : y__4074__auto__;
  }
};
taoensso.encore.sub_indexes = function() {
  var sub_indexes__delegate = function(x, start_idx, p__22522) {
    var map__22524 = p__22522;
    var map__22524__$1 = cljs.core.seq_QMARK_.call(null, map__22524) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22524) : map__22524;
    var end_idx = cljs.core.get.call(null, map__22524__$1, new cljs.core.Keyword(null, "end-idx", "end-idx", -85750788));
    var max_len = cljs.core.get.call(null, map__22524__$1, new cljs.core.Keyword(null, "max-len", "max-len", -18846016));
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function(map__22524, map__22524__$1, end_idx, max_len) {
        return function() {
          return max_len;
        };
      }(map__22524, map__22524__$1, end_idx, max_len), null), new cljs.core.Symbol(null, "max-len", "max-len", 1621685511, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), cljs.core.nil_QMARK_, taoensso.encore.nneg_int_QMARK_], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 
      1612038930, null), new cljs.core.Symbol(null, "nneg-int?", "nneg-int?", 803479360, null)], null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "nneg-int?", "nneg-int?", 803479360, null)], null), new cljs.core.Symbol(null, "max-len", "max-len", 
      1621685511, null))))].join(""));
    }
    var start_idx__$1 = start_idx;
    var xlen = cljs.core.count.call(null, x);
    var start_idx_STAR_ = taoensso.encore.translate_signed_idx.call(null, start_idx__$1, xlen);
    var end_idx_STAR_ = cljs.core.truth_(max_len) ? function() {
      var n1__16145__auto__ = start_idx_STAR_ + max_len;
      var n2__16146__auto__ = xlen;
      if (n1__16145__auto__ > n2__16146__auto__) {
        return n2__16146__auto__;
      } else {
        return n1__16145__auto__;
      }
    }() : cljs.core.truth_(end_idx) ? taoensso.encore.translate_signed_idx.call(null, end_idx, xlen) + 1 : xlen;
    if (start_idx_STAR_ > end_idx_STAR_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [start_idx_STAR_, end_idx_STAR_], null);
    }
  };
  var sub_indexes = function(x, start_idx, var_args) {
    var p__22522 = null;
    if (arguments.length > 2) {
      p__22522 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return sub_indexes__delegate.call(this, x, start_idx, p__22522);
  };
  sub_indexes.cljs$lang$maxFixedArity = 2;
  sub_indexes.cljs$lang$applyTo = function(arglist__22525) {
    var x = cljs.core.first(arglist__22525);
    arglist__22525 = cljs.core.next(arglist__22525);
    var start_idx = cljs.core.first(arglist__22525);
    var p__22522 = cljs.core.rest(arglist__22525);
    return sub_indexes__delegate(x, start_idx, p__22522);
  };
  sub_indexes.cljs$core$IFn$_invoke$arity$variadic = sub_indexes__delegate;
  return sub_indexes;
}();
taoensso.encore.subvec_STAR_ = function() {
  var subvec_STAR___delegate = function(v, start_idx, p__22526) {
    var vec__22529 = p__22526;
    var _QMARK_max_len = cljs.core.nth.call(null, vec__22529, 0, null);
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function(vec__22529, _QMARK_max_len) {
        return function() {
          return v;
        };
      }(vec__22529, _QMARK_max_len), null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), cljs.core.vector_QMARK_, new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null))))].join(""));
    }
    var vec__22530 = taoensso.encore.sub_indexes.call(null, v, start_idx, new cljs.core.Keyword(null, "max-len", "max-len", -18846016), _QMARK_max_len);
    var start_idx_STAR_ = cljs.core.nth.call(null, vec__22530, 0, null);
    var end_idx_STAR_ = cljs.core.nth.call(null, vec__22530, 1, null);
    return cljs.core.subvec.call(null, v, start_idx_STAR_, end_idx_STAR_);
  };
  var subvec_STAR_ = function(v, start_idx, var_args) {
    var p__22526 = null;
    if (arguments.length > 2) {
      p__22526 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return subvec_STAR___delegate.call(this, v, start_idx, p__22526);
  };
  subvec_STAR_.cljs$lang$maxFixedArity = 2;
  subvec_STAR_.cljs$lang$applyTo = function(arglist__22531) {
    var v = cljs.core.first(arglist__22531);
    arglist__22531 = cljs.core.next(arglist__22531);
    var start_idx = cljs.core.first(arglist__22531);
    var p__22526 = cljs.core.rest(arglist__22531);
    return subvec_STAR___delegate(v, start_idx, p__22526);
  };
  subvec_STAR_.cljs$core$IFn$_invoke$arity$variadic = subvec_STAR___delegate;
  return subvec_STAR_;
}();
taoensso.encore.Swapped = function(new_val, return_val, __meta, __extmap) {
  this.new_val = new_val;
  this.return_val = return_val;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
taoensso.encore.Swapped.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4359__auto__, k__4360__auto__) {
  var self__ = this;
  var this__4359__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4359__auto____$1, k__4360__auto__, null);
};
taoensso.encore.Swapped.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4361__auto__, k22533, else__4362__auto__) {
  var self__ = this;
  var this__4361__auto____$1 = this;
  var G__22535 = k22533 instanceof cljs.core.Keyword ? k22533.fqn : null;
  switch(G__22535) {
    case "return-val":
      return self__.return_val;
      break;
    case "new-val":
      return self__.new_val;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k22533, else__4362__auto__);
  }
};
taoensso.encore.Swapped.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4373__auto__, writer__4374__auto__, opts__4375__auto__) {
  var self__ = this;
  var this__4373__auto____$1 = this;
  var pr_pair__4376__auto__ = function(this__4373__auto____$1) {
    return function(keyval__4377__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4374__auto__, cljs.core.pr_writer, "", " ", "", opts__4375__auto__, keyval__4377__auto__);
    };
  }(this__4373__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4374__auto__, pr_pair__4376__auto__, "#taoensso.encore.Swapped{", ", ", "}", opts__4375__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "new-val", "new-val", -738158599), self__.new_val], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "return-val", "return-val", -512772489), self__.return_val], null)], null), self__.__extmap));
};
taoensso.encore.Swapped.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4357__auto__) {
  var self__ = this;
  var this__4357__auto____$1 = this;
  return self__.__meta;
};
taoensso.encore.Swapped.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4353__auto__) {
  var self__ = this;
  var this__4353__auto____$1 = this;
  return new taoensso.encore.Swapped(self__.new_val, self__.return_val, self__.__meta, self__.__extmap, self__.__hash);
};
taoensso.encore.Swapped.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4363__auto__) {
  var self__ = this;
  var this__4363__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
taoensso.encore.Swapped.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4354__auto__) {
  var self__ = this;
  var this__4354__auto____$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_imap.call(null, this__4354__auto____$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
taoensso.encore.Swapped.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4355__auto__, other__4356__auto__) {
  var self__ = this;
  var this__4355__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3749__auto__ = other__4356__auto__;
    if (cljs.core.truth_(and__3749__auto__)) {
      return this__4355__auto____$1.constructor === other__4356__auto__.constructor && cljs.core.equiv_map.call(null, this__4355__auto____$1, other__4356__auto__);
    } else {
      return and__3749__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
taoensso.encore.Swapped.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4368__auto__, k__4369__auto__) {
  var self__ = this;
  var this__4368__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "return-val", "return-val", -512772489), null, new cljs.core.Keyword(null, "new-val", "new-val", -738158599), null], null), null), k__4369__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4368__auto____$1), self__.__meta), k__4369__auto__);
  } else {
    return new taoensso.encore.Swapped(self__.new_val, self__.return_val, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4369__auto__)), null);
  }
};
taoensso.encore.Swapped.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4366__auto__, k__4367__auto__, G__22532) {
  var self__ = this;
  var this__4366__auto____$1 = this;
  var pred__22536 = cljs.core.keyword_identical_QMARK_;
  var expr__22537 = k__4367__auto__;
  if (cljs.core.truth_(pred__22536.call(null, new cljs.core.Keyword(null, "new-val", "new-val", -738158599), expr__22537))) {
    return new taoensso.encore.Swapped(G__22532, self__.return_val, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__22536.call(null, new cljs.core.Keyword(null, "return-val", "return-val", -512772489), expr__22537))) {
      return new taoensso.encore.Swapped(self__.new_val, G__22532, self__.__meta, self__.__extmap, null);
    } else {
      return new taoensso.encore.Swapped(self__.new_val, self__.return_val, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4367__auto__, G__22532), null);
    }
  }
};
taoensso.encore.Swapped.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4371__auto__) {
  var self__ = this;
  var this__4371__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "new-val", "new-val", -738158599), self__.new_val], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "return-val", "return-val", -512772489), self__.return_val], null)], null), 
  self__.__extmap));
};
taoensso.encore.Swapped.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4358__auto__, G__22532) {
  var self__ = this;
  var this__4358__auto____$1 = this;
  return new taoensso.encore.Swapped(self__.new_val, self__.return_val, G__22532, self__.__extmap, self__.__hash);
};
taoensso.encore.Swapped.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4364__auto__, entry__4365__auto__) {
  var self__ = this;
  var this__4364__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4365__auto__)) {
    return cljs.core._assoc.call(null, this__4364__auto____$1, cljs.core._nth.call(null, entry__4365__auto__, 0), cljs.core._nth.call(null, entry__4365__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4364__auto____$1, entry__4365__auto__);
  }
};
taoensso.encore.Swapped.cljs$lang$type = true;
taoensso.encore.Swapped.cljs$lang$ctorPrSeq = function(this__4393__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "taoensso.encore/Swapped");
};
taoensso.encore.Swapped.cljs$lang$ctorPrWriter = function(this__4393__auto__, writer__4394__auto__) {
  return cljs.core._write.call(null, writer__4394__auto__, "taoensso.encore/Swapped");
};
taoensso.encore.__GT_Swapped = function __GT_Swapped(new_val, return_val) {
  return new taoensso.encore.Swapped(new_val, return_val);
};
taoensso.encore.map__GT_Swapped = function map__GT_Swapped(G__22534) {
  return new taoensso.encore.Swapped((new cljs.core.Keyword(null, "new-val", "new-val", -738158599)).cljs$core$IFn$_invoke$arity$1(G__22534), (new cljs.core.Keyword(null, "return-val", "return-val", -512772489)).cljs$core$IFn$_invoke$arity$1(G__22534), null, cljs.core.dissoc.call(null, G__22534, new cljs.core.Keyword(null, "new-val", "new-val", -738158599), new cljs.core.Keyword(null, "return-val", "return-val", -512772489)));
};
taoensso.encore.swapped = function swapped(new_val, return_val) {
  return new taoensso.encore.Swapped(new_val, return_val);
};
taoensso.encore.swapped_QMARK_ = function swapped_QMARK_(x) {
  return x instanceof taoensso.encore.Swapped;
};
taoensso.encore.swapped_STAR_ = function swapped_STAR_(x) {
  if (taoensso.encore.swapped_QMARK_.call(null, x)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "new-val", "new-val", -738158599)).cljs$core$IFn$_invoke$arity$1(x), (new cljs.core.Keyword(null, "return-val", "return-val", -512772489)).cljs$core$IFn$_invoke$arity$1(x)], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, x], null);
  }
};
taoensso.encore.swapped_STAR__in = function swapped_STAR__in(m, ks, f) {
  if (cljs.core.truth_(taoensso.encore.kw_identical_QMARK_.call(null, f, new cljs.core.Keyword("swap", "dissoc", "swap/dissoc", -605373782)))) {
    return taoensso.encore.swapped_STAR_.call(null, taoensso.encore.dissoc_in.call(null, m, cljs.core.butlast.call(null, ks), cljs.core.last.call(null, ks)));
  } else {
    var old_val_in = cljs.core.get_in.call(null, m, ks);
    var vec__22541 = taoensso.encore.swapped_STAR_.call(null, f.call(null, old_val_in));
    var new_val_in = cljs.core.nth.call(null, vec__22541, 0, null);
    var return_val = cljs.core.nth.call(null, vec__22541, 1, null);
    var new_val = cljs.core.truth_(taoensso.encore.kw_identical_QMARK_.call(null, new_val_in, new cljs.core.Keyword("swap", "dissoc", "swap/dissoc", -605373782))) ? taoensso.encore.dissoc_in.call(null, m, cljs.core.butlast.call(null, ks), cljs.core.last.call(null, ks)) : cljs.core.assoc_in.call(null, m, ks, new_val_in);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_val, return_val], null);
  }
};
taoensso.encore.replace_in_STAR_ = function replace_in_STAR_(_QMARK_vf_type, m, ops) {
  return cljs.core.reduce.call(null, function(accum, _QMARK_op) {
    if (cljs.core.not.call(null, _QMARK_op)) {
      return accum;
    } else {
      var vec__22544 = cljs.core.not.call(null, _QMARK_vf_type) ? _QMARK_op : cljs.core.cons.call(null, _QMARK_vf_type, _QMARK_op);
      var vf_type = cljs.core.nth.call(null, vec__22544, 0, null);
      var ks = cljs.core.nth.call(null, vec__22544, 1, null);
      var valf = cljs.core.nth.call(null, vec__22544, 2, null);
      var G__22545 = vf_type instanceof cljs.core.Keyword ? vf_type.fqn : null;
      switch(G__22545) {
        case "swap":
          if (cljs.core.empty_QMARK_.call(null, ks)) {
            return valf.call(null, accum);
          } else {
            return cljs.core.nth.call(null, taoensso.encore.swapped_STAR__in.call(null, accum, ks, valf), 0);
          }
          break;
        case "reset":
          if (cljs.core.empty_QMARK_.call(null, ks)) {
            return valf;
          } else {
            return cljs.core.assoc_in.call(null, accum, ks, valf);
          }
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(vf_type)].join(""));;
      }
    }
  }, m, ops);
};
taoensso.encore.replace_in = function() {
  var replace_in__delegate = function(m, ops) {
    return taoensso.encore.replace_in_STAR_.call(null, null, m, ops);
  };
  var replace_in = function(m, var_args) {
    var ops = null;
    if (arguments.length > 1) {
      ops = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return replace_in__delegate.call(this, m, ops);
  };
  replace_in.cljs$lang$maxFixedArity = 1;
  replace_in.cljs$lang$applyTo = function(arglist__22547) {
    var m = cljs.core.first(arglist__22547);
    var ops = cljs.core.rest(arglist__22547);
    return replace_in__delegate(m, ops);
  };
  replace_in.cljs$core$IFn$_invoke$arity$variadic = replace_in__delegate;
  return replace_in;
}();
taoensso.encore.swap_in_BANG_ = function() {
  var swap_in_BANG_ = null;
  var swap_in_BANG___3 = function(atom_, ks, f) {
    if (cljs.core.empty_QMARK_.call(null, ks)) {
      while (true) {
        var old_val = cljs.core.deref.call(null, atom_);
        var vec__22550 = taoensso.encore.swapped_STAR_.call(null, f.call(null, old_val));
        var new_val = cljs.core.nth.call(null, vec__22550, 0, null);
        var return_val = cljs.core.nth.call(null, vec__22550, 1, null);
        if (!cljs.core.compare_and_set_BANG_.call(null, atom_, old_val, new_val)) {
          continue;
        } else {
          return return_val;
        }
        break;
      }
    } else {
      while (true) {
        var old_val = cljs.core.deref.call(null, atom_);
        var vec__22551 = taoensso.encore.swapped_STAR__in.call(null, old_val, ks, f);
        var new_val = cljs.core.nth.call(null, vec__22551, 0, null);
        var return_val = cljs.core.nth.call(null, vec__22551, 1, null);
        if (!cljs.core.compare_and_set_BANG_.call(null, atom_, old_val, new_val)) {
          continue;
        } else {
          return return_val;
        }
        break;
      }
    }
  };
  var swap_in_BANG___4 = function() {
    var G__22552__delegate = function(atom_, ks, f, more) {
      if (function() {
        taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function() {
          return cljs.core.count.call(null, more);
        }, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "more", "more", -418290273, null)), cljs.core.even_QMARK_, new cljs.core.Symbol(null, "even?", "even?", -1827825394, null));
        return true;
      }()) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "more", "more", -418290273, null)))))].join(""));
      }
      var pairs = cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ks, f], null)], null), cljs.core.partition.call(null, 2, more));
      while (true) {
        var old_val = cljs.core.deref.call(null, atom_);
        var new_val = taoensso.encore.replace_in_STAR_.call(null, new cljs.core.Keyword(null, "swap", "swap", 228675637), old_val, pairs);
        if (!cljs.core.compare_and_set_BANG_.call(null, atom_, old_val, new_val)) {
          continue;
        } else {
          return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "old", "old", -1825222690), old_val, new cljs.core.Keyword(null, "new", "new", -2085437848), new_val], null);
        }
        break;
      }
    };
    var G__22552 = function(atom_, ks, f, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__22552__delegate.call(this, atom_, ks, f, more);
    };
    G__22552.cljs$lang$maxFixedArity = 3;
    G__22552.cljs$lang$applyTo = function(arglist__22553) {
      var atom_ = cljs.core.first(arglist__22553);
      arglist__22553 = cljs.core.next(arglist__22553);
      var ks = cljs.core.first(arglist__22553);
      arglist__22553 = cljs.core.next(arglist__22553);
      var f = cljs.core.first(arglist__22553);
      var more = cljs.core.rest(arglist__22553);
      return G__22552__delegate(atom_, ks, f, more);
    };
    G__22552.cljs$core$IFn$_invoke$arity$variadic = G__22552__delegate;
    return G__22552;
  }();
  swap_in_BANG_ = function(atom_, ks, f, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return swap_in_BANG___3.call(this, atom_, ks, f);
      default:
        return swap_in_BANG___4.cljs$core$IFn$_invoke$arity$variadic(atom_, ks, f, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_in_BANG_.cljs$lang$maxFixedArity = 3;
  swap_in_BANG_.cljs$lang$applyTo = swap_in_BANG___4.cljs$lang$applyTo;
  swap_in_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_in_BANG___3;
  swap_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_in_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return swap_in_BANG_;
}();
taoensso.encore.reset_in_BANG_ = function() {
  var reset_in_BANG_ = null;
  var reset_in_BANG___3 = function(atom_, ks, new_val) {
    if (cljs.core.empty_QMARK_.call(null, ks)) {
      return cljs.core.reset_BANG_.call(null, atom_, new_val);
    } else {
      return cljs.core.swap_BANG_.call(null, atom_, function(old_val) {
        return cljs.core.assoc_in.call(null, old_val, ks, new_val);
      });
    }
  };
  var reset_in_BANG___4 = function() {
    var G__22554__delegate = function(atom_, ks, new_val, more) {
      if (function() {
        taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function() {
          return cljs.core.count.call(null, more);
        }, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "more", "more", -418290273, null)), cljs.core.even_QMARK_, new cljs.core.Symbol(null, "even?", "even?", -1827825394, null));
        return true;
      }()) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "more", "more", -418290273, null)))))].join(""));
      }
      var pairs = cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ks, new_val], null)], null), cljs.core.partition.call(null, 2, more));
      while (true) {
        var old_val = cljs.core.deref.call(null, atom_);
        var new_val__$1 = taoensso.encore.replace_in_STAR_.call(null, new cljs.core.Keyword(null, "reset", "reset", -800929946), old_val, pairs);
        if (!cljs.core.compare_and_set_BANG_.call(null, atom_, old_val, new_val__$1)) {
          continue;
        } else {
          return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "old", "old", -1825222690), old_val, new cljs.core.Keyword(null, "new", "new", -2085437848), new_val__$1], null);
        }
        break;
      }
    };
    var G__22554 = function(atom_, ks, new_val, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__22554__delegate.call(this, atom_, ks, new_val, more);
    };
    G__22554.cljs$lang$maxFixedArity = 3;
    G__22554.cljs$lang$applyTo = function(arglist__22555) {
      var atom_ = cljs.core.first(arglist__22555);
      arglist__22555 = cljs.core.next(arglist__22555);
      var ks = cljs.core.first(arglist__22555);
      arglist__22555 = cljs.core.next(arglist__22555);
      var new_val = cljs.core.first(arglist__22555);
      var more = cljs.core.rest(arglist__22555);
      return G__22554__delegate(atom_, ks, new_val, more);
    };
    G__22554.cljs$core$IFn$_invoke$arity$variadic = G__22554__delegate;
    return G__22554;
  }();
  reset_in_BANG_ = function(atom_, ks, new_val, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return reset_in_BANG___3.call(this, atom_, ks, new_val);
      default:
        return reset_in_BANG___4.cljs$core$IFn$_invoke$arity$variadic(atom_, ks, new_val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reset_in_BANG_.cljs$lang$maxFixedArity = 3;
  reset_in_BANG_.cljs$lang$applyTo = reset_in_BANG___4.cljs$lang$applyTo;
  reset_in_BANG_.cljs$core$IFn$_invoke$arity$3 = reset_in_BANG___3;
  reset_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = reset_in_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return reset_in_BANG_;
}();
taoensso.encore.dissoc_in = function() {
  var dissoc_in__delegate = function(m, ks, dissoc_ks) {
    if (cljs.core.empty_QMARK_.call(null, ks)) {
      return cljs.core.apply.call(null, cljs.core.dissoc, m, dissoc_ks);
    } else {
      return cljs.core.apply.call(null, cljs.core.update_in, m, ks, cljs.core.dissoc, dissoc_ks);
    }
  };
  var dissoc_in = function(m, ks, var_args) {
    var dissoc_ks = null;
    if (arguments.length > 2) {
      dissoc_ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return dissoc_in__delegate.call(this, m, ks, dissoc_ks);
  };
  dissoc_in.cljs$lang$maxFixedArity = 2;
  dissoc_in.cljs$lang$applyTo = function(arglist__22556) {
    var m = cljs.core.first(arglist__22556);
    arglist__22556 = cljs.core.next(arglist__22556);
    var ks = cljs.core.first(arglist__22556);
    var dissoc_ks = cljs.core.rest(arglist__22556);
    return dissoc_in__delegate(m, ks, dissoc_ks);
  };
  dissoc_in.cljs$core$IFn$_invoke$arity$variadic = dissoc_in__delegate;
  return dissoc_in;
}();
taoensso.encore.contains_in_QMARK_ = function contains_in_QMARK_(coll, ks) {
  return cljs.core.contains_QMARK_.call(null, cljs.core.get_in.call(null, coll, cljs.core.butlast.call(null, ks)), cljs.core.last.call(null, ks));
};
taoensso.encore.assoc_some = function() {
  var assoc_some__delegate = function(m, kvs) {
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function() {
        return cljs.core.count.call(null, kvs);
      }, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)), cljs.core.even_QMARK_, new cljs.core.Symbol(null, "even?", "even?", -1827825394, null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)))))].join(""));
    }
    return cljs.core.into.call(null, function() {
      var or__3761__auto__ = m;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__4512__auto__ = function iter__22565(s__22566) {
        return new cljs.core.LazySeq(null, function() {
          var s__22566__$1 = s__22566;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__22566__$1);
            if (temp__4126__auto__) {
              var s__22566__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__22566__$2)) {
                var c__4510__auto__ = cljs.core.chunk_first.call(null, s__22566__$2);
                var size__4511__auto__ = cljs.core.count.call(null, c__4510__auto__);
                var b__22568 = cljs.core.chunk_buffer.call(null, size__4511__auto__);
                if (function() {
                  var i__22567 = 0;
                  while (true) {
                    if (i__22567 < size__4511__auto__) {
                      var vec__22571 = cljs.core._nth.call(null, c__4510__auto__, i__22567);
                      var k = cljs.core.nth.call(null, vec__22571, 0, null);
                      var v = cljs.core.nth.call(null, vec__22571, 1, null);
                      if (!(v == null)) {
                        cljs.core.chunk_append.call(null, b__22568, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__22573 = i__22567 + 1;
                        i__22567 = G__22573;
                        continue;
                      } else {
                        var G__22574 = i__22567 + 1;
                        i__22567 = G__22574;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22568), iter__22565.call(null, cljs.core.chunk_rest.call(null, s__22566__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22568), null);
                }
              } else {
                var vec__22572 = cljs.core.first.call(null, s__22566__$2);
                var k = cljs.core.nth.call(null, vec__22572, 0, null);
                var v = cljs.core.nth.call(null, vec__22572, 1, null);
                if (!(v == null)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__22565.call(null, cljs.core.rest.call(null, s__22566__$2)));
                } else {
                  var G__22575 = cljs.core.rest.call(null, s__22566__$2);
                  s__22566__$1 = G__22575;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4512__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_some = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_some__delegate.call(this, m, kvs);
  };
  assoc_some.cljs$lang$maxFixedArity = 1;
  assoc_some.cljs$lang$applyTo = function(arglist__22576) {
    var m = cljs.core.first(arglist__22576);
    var kvs = cljs.core.rest(arglist__22576);
    return assoc_some__delegate(m, kvs);
  };
  assoc_some.cljs$core$IFn$_invoke$arity$variadic = assoc_some__delegate;
  return assoc_some;
}();
taoensso.encore.assoc_when = function() {
  var assoc_when__delegate = function(m, kvs) {
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function() {
        return cljs.core.count.call(null, kvs);
      }, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)), cljs.core.even_QMARK_, new cljs.core.Symbol(null, "even?", "even?", -1827825394, null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)))))].join(""));
    }
    return cljs.core.into.call(null, function() {
      var or__3761__auto__ = m;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__4512__auto__ = function iter__22585(s__22586) {
        return new cljs.core.LazySeq(null, function() {
          var s__22586__$1 = s__22586;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__22586__$1);
            if (temp__4126__auto__) {
              var s__22586__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__22586__$2)) {
                var c__4510__auto__ = cljs.core.chunk_first.call(null, s__22586__$2);
                var size__4511__auto__ = cljs.core.count.call(null, c__4510__auto__);
                var b__22588 = cljs.core.chunk_buffer.call(null, size__4511__auto__);
                if (function() {
                  var i__22587 = 0;
                  while (true) {
                    if (i__22587 < size__4511__auto__) {
                      var vec__22591 = cljs.core._nth.call(null, c__4510__auto__, i__22587);
                      var k = cljs.core.nth.call(null, vec__22591, 0, null);
                      var v = cljs.core.nth.call(null, vec__22591, 1, null);
                      if (cljs.core.truth_(v)) {
                        cljs.core.chunk_append.call(null, b__22588, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__22593 = i__22587 + 1;
                        i__22587 = G__22593;
                        continue;
                      } else {
                        var G__22594 = i__22587 + 1;
                        i__22587 = G__22594;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22588), iter__22585.call(null, cljs.core.chunk_rest.call(null, s__22586__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22588), null);
                }
              } else {
                var vec__22592 = cljs.core.first.call(null, s__22586__$2);
                var k = cljs.core.nth.call(null, vec__22592, 0, null);
                var v = cljs.core.nth.call(null, vec__22592, 1, null);
                if (cljs.core.truth_(v)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__22585.call(null, cljs.core.rest.call(null, s__22586__$2)));
                } else {
                  var G__22595 = cljs.core.rest.call(null, s__22586__$2);
                  s__22586__$1 = G__22595;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4512__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_when = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_when__delegate.call(this, m, kvs);
  };
  assoc_when.cljs$lang$maxFixedArity = 1;
  assoc_when.cljs$lang$applyTo = function(arglist__22596) {
    var m = cljs.core.first(arglist__22596);
    var kvs = cljs.core.rest(arglist__22596);
    return assoc_when__delegate(m, kvs);
  };
  assoc_when.cljs$core$IFn$_invoke$arity$variadic = assoc_when__delegate;
  return assoc_when;
}();
taoensso.encore.queue_QMARK_ = function queue_QMARK_(x) {
  return x instanceof cljs.core.PersistentQueue;
};
taoensso.encore.queue = function() {
  var queue = null;
  var queue__0 = function() {
    return cljs.core.PersistentQueue.EMPTY;
  };
  var queue__1 = function(coll) {
    return cljs.core.into.call(null, queue.call(null), coll);
  };
  queue = function(coll) {
    switch(arguments.length) {
      case 0:
        return queue__0.call(this);
      case 1:
        return queue__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  queue.cljs$core$IFn$_invoke$arity$0 = queue__0;
  queue.cljs$core$IFn$_invoke$arity$1 = queue__1;
  return queue;
}();
taoensso.encore.queue_STAR_ = function() {
  var queue_STAR___delegate = function(items) {
    return taoensso.encore.queue.call(null, items);
  };
  var queue_STAR_ = function(var_args) {
    var items = null;
    if (arguments.length > 0) {
      items = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return queue_STAR___delegate.call(this, items);
  };
  queue_STAR_.cljs$lang$maxFixedArity = 0;
  queue_STAR_.cljs$lang$applyTo = function(arglist__22597) {
    var items = cljs.core.seq(arglist__22597);
    return queue_STAR___delegate(items);
  };
  queue_STAR_.cljs$core$IFn$_invoke$arity$variadic = queue_STAR___delegate;
  return queue_STAR_;
}();
taoensso.encore.seq_kvs = cljs.core.partial.call(null, cljs.core.reduce, cljs.core.concat);
taoensso.encore.mapply = function() {
  var mapply__delegate = function(f, args) {
    return cljs.core.apply.call(null, f, cljs.core.concat.call(null, cljs.core.butlast.call(null, args), taoensso.encore.seq_kvs.call(null, cljs.core.last.call(null, args))));
  };
  var mapply = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return mapply__delegate.call(this, f, args);
  };
  mapply.cljs$lang$maxFixedArity = 1;
  mapply.cljs$lang$applyTo = function(arglist__22598) {
    var f = cljs.core.first(arglist__22598);
    var args = cljs.core.rest(arglist__22598);
    return mapply__delegate(f, args);
  };
  mapply.cljs$core$IFn$_invoke$arity$variadic = mapply__delegate;
  return mapply;
}();
taoensso.encore.clj1098 = function clj1098(x) {
  var or__3761__auto__ = x;
  if (cljs.core.truth_(or__3761__auto__)) {
    return or__3761__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
taoensso.encore.map_kvs = function map_kvs(kf, vf, m) {
  if (cljs.core.not.call(null, m)) {
    return cljs.core.PersistentArrayMap.EMPTY;
  } else {
    var kf__$1 = cljs.core.not.call(null, taoensso.encore.kw_identical_QMARK_.call(null, kf, new cljs.core.Keyword(null, "keywordize", "keywordize", 1381210758))) ? kf : function(k, _) {
      return cljs.core.keyword.call(null, k);
    };
    var vf__$1 = cljs.core.not.call(null, taoensso.encore.kw_identical_QMARK_.call(null, vf, new cljs.core.Keyword(null, "keywordize", "keywordize", 1381210758))) ? vf : function(kf__$1) {
      return function(_, v) {
        return cljs.core.keyword.call(null, v);
      };
    }(kf__$1);
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, function(kf__$1, vf__$1) {
      return function(m__$1, k, v) {
        return cljs.core.assoc_BANG_.call(null, m__$1, cljs.core.truth_(kf__$1) ? kf__$1.call(null, k, v) : k, cljs.core.truth_(vf__$1) ? vf__$1.call(null, k, v) : v);
      };
    }(kf__$1, vf__$1), cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), m));
  }
};
taoensso.encore.map_keys = function map_keys(f, m) {
  return taoensso.encore.map_kvs.call(null, function(k, _) {
    return f.call(null, k);
  }, null, m);
};
taoensso.encore.map_vals = function map_vals(f, m) {
  return taoensso.encore.map_kvs.call(null, null, function(_, v) {
    return f.call(null, v);
  }, m);
};
taoensso.encore.filter_kvs = function filter_kvs(predk, predv, m) {
  if (cljs.core.not.call(null, m)) {
    return cljs.core.PersistentArrayMap.EMPTY;
  } else {
    return cljs.core.reduce_kv.call(null, function(m__$1, k, v) {
      if (cljs.core.truth_(function() {
        var and__3749__auto__ = predk.call(null, k);
        if (cljs.core.truth_(and__3749__auto__)) {
          return predv.call(null, v);
        } else {
          return and__3749__auto__;
        }
      }())) {
        return m__$1;
      } else {
        return cljs.core.dissoc.call(null, m__$1, k);
      }
    }, m, m);
  }
};
taoensso.encore.filter_keys = function filter_keys(pred, m) {
  return taoensso.encore.filter_kvs.call(null, pred, cljs.core.constantly.call(null, true), m);
};
taoensso.encore.filter_vals = function filter_vals(pred, m) {
  return taoensso.encore.filter_kvs.call(null, cljs.core.constantly.call(null, true), pred, m);
};
taoensso.encore.remove_vals = function remove_vals(pred, m) {
  if (cljs.core.not.call(null, m)) {
    return cljs.core.PersistentArrayMap.EMPTY;
  } else {
    return cljs.core.reduce_kv.call(null, function(m__$1, k, v) {
      if (cljs.core.truth_(pred.call(null, v))) {
        return cljs.core.dissoc.call(null, m__$1, k);
      } else {
        return m__$1;
      }
    }, m, m);
  }
};
taoensso.encore.keywordize_map = function keywordize_map(m) {
  if (cljs.core.not.call(null, m)) {
    return cljs.core.PersistentArrayMap.EMPTY;
  } else {
    return cljs.core.reduce_kv.call(null, function(m__$1, k, v) {
      return cljs.core.assoc.call(null, m__$1, cljs.core.keyword.call(null, k), v);
    }, cljs.core.PersistentArrayMap.EMPTY, m);
  }
};
taoensso.encore.as_map = function() {
  var as_map__delegate = function(kvs, p__22599) {
    var vec__22605 = p__22599;
    var kf = cljs.core.nth.call(null, vec__22605, 0, null);
    var vf = cljs.core.nth.call(null, vec__22605, 1, null);
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function(vec__22605, kf, vf) {
        return function() {
          return kvs;
        };
      }(vec__22605, kf, vf), null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), cljs.core.nil_QMARK_, cljs.core.sequential_QMARK_], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, 
      "sequential?", "sequential?", 1102351463, null)], null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "sequential?", "sequential?", 1102351463, null)], null), new cljs.core.Symbol(null, "kvs", "kvs", 
      -1695980277, null))))].join(""));
    }
    if (function() {
      new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function(vec__22605, kf, vf) {
        return function() {
          return kf;
        };
      }(vec__22605, kf, vf), null), new cljs.core.Symbol(null, "kf", "kf", -1046348180, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), cljs.core.nil_QMARK_, cljs.core.ifn_QMARK_], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, 
      "ifn?", "ifn?", -2106461064, null)], null)), taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function(vec__22605, kf, vf) {
        return function() {
          return vf;
        };
      }(vec__22605, kf, vf), null), new cljs.core.Symbol(null, "vf", "vf", 1319108258, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), cljs.core.nil_QMARK_, cljs.core.ifn_QMARK_], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, 
      "ifn?", "ifn?", -2106461064, null)], null))], null);
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null)], null), new cljs.core.Symbol(null, "kf", "kf", -1046348180, null), 
      new cljs.core.Symbol(null, "vf", "vf", 1319108258, null))))].join(""));
    }
    var _PERCENT_ = cljs.core.empty_QMARK_.call(null, kvs) ? cljs.core.PersistentArrayMap.EMPTY : function() {
      var kf__$1 = cljs.core.not.call(null, taoensso.encore.kw_identical_QMARK_.call(null, kf, new cljs.core.Keyword(null, "keywordize", "keywordize", 1381210758))) ? kf : function(vec__22605, kf, vf) {
        return function(k, _) {
          return cljs.core.keyword.call(null, k);
        };
      }(vec__22605, kf, vf);
      var m = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      var G__22607 = kvs;
      var vec__22608 = G__22607;
      var k = cljs.core.nth.call(null, vec__22608, 0, null);
      var v = cljs.core.nth.call(null, vec__22608, 1, null);
      var s = vec__22608;
      var m__$1 = m;
      var G__22607__$1 = G__22607;
      while (true) {
        var m__$2 = m__$1;
        var vec__22609 = G__22607__$1;
        var k__$1 = cljs.core.nth.call(null, vec__22609, 0, null);
        var v__$1 = cljs.core.nth.call(null, vec__22609, 1, null);
        var s__$1 = vec__22609;
        var k__$2 = cljs.core.not.call(null, kf__$1) ? k__$1 : kf__$1.call(null, k__$1, v__$1);
        var v__$2 = cljs.core.not.call(null, vf) ? v__$1 : vf.call(null, k__$2, v__$1);
        var new_m = cljs.core.assoc_BANG_.call(null, m__$2, k__$2, v__$2);
        var temp__4124__auto__ = cljs.core.nnext.call(null, s__$1);
        if (temp__4124__auto__) {
          var n = temp__4124__auto__;
          var G__22610 = new_m;
          var G__22611 = n;
          m__$1 = G__22610;
          G__22607__$1 = G__22611;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, new_m);
        }
        break;
      }
    }();
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function(_PERCENT_, vec__22605, kf, vf) {
        return function() {
          return _PERCENT_;
        };
      }(_PERCENT_, vec__22605, kf, vf), null), new cljs.core.Symbol(null, "%", "%", -950237169, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), cljs.core.nil_QMARK_, cljs.core.map_QMARK_], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, 
      "map?", "map?", -1780568534, null)], null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "map?", "map?", -1780568534, null)], null), new cljs.core.Symbol(null, "%", "%", -950237169, null))))].join(""));
    }
    return _PERCENT_;
  };
  var as_map = function(kvs, var_args) {
    var p__22599 = null;
    if (arguments.length > 1) {
      p__22599 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return as_map__delegate.call(this, kvs, p__22599);
  };
  as_map.cljs$lang$maxFixedArity = 1;
  as_map.cljs$lang$applyTo = function(arglist__22612) {
    var kvs = cljs.core.first(arglist__22612);
    var p__22599 = cljs.core.rest(arglist__22612);
    return as_map__delegate(kvs, p__22599);
  };
  as_map.cljs$core$IFn$_invoke$arity$variadic = as_map__delegate;
  return as_map;
}();
taoensso.encore.fzipmap = function fzipmap(ks, vs) {
  var m = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks__$1 = cljs.core.seq.call(null, ks);
  var vs__$1 = cljs.core.seq.call(null, vs);
  while (true) {
    if (!(ks__$1 && vs__$1)) {
      return cljs.core.persistent_BANG_.call(null, m);
    } else {
      var G__22613 = cljs.core.assoc_BANG_.call(null, m, cljs.core.first.call(null, ks__$1), cljs.core.first.call(null, vs__$1));
      var G__22614 = cljs.core.next.call(null, ks__$1);
      var G__22615 = cljs.core.next.call(null, vs__$1);
      m = G__22613;
      ks__$1 = G__22614;
      vs__$1 = G__22615;
      continue;
    }
    break;
  }
};
taoensso.encore.into_all = function() {
  var into_all = null;
  var into_all__2 = function(to, from) {
    return cljs.core.into.call(null, to, from);
  };
  var into_all__3 = function() {
    var G__22616__delegate = function(to, from, more) {
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.into.call(null, to, from), more);
    };
    var G__22616 = function(to, from, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22616__delegate.call(this, to, from, more);
    };
    G__22616.cljs$lang$maxFixedArity = 2;
    G__22616.cljs$lang$applyTo = function(arglist__22617) {
      var to = cljs.core.first(arglist__22617);
      arglist__22617 = cljs.core.next(arglist__22617);
      var from = cljs.core.first(arglist__22617);
      var more = cljs.core.rest(arglist__22617);
      return G__22616__delegate(to, from, more);
    };
    G__22616.cljs$core$IFn$_invoke$arity$variadic = G__22616__delegate;
    return G__22616;
  }();
  into_all = function(to, from, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return into_all__2.call(this, to, from);
      default:
        return into_all__3.cljs$core$IFn$_invoke$arity$variadic(to, from, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_all.cljs$lang$maxFixedArity = 2;
  into_all.cljs$lang$applyTo = into_all__3.cljs$lang$applyTo;
  into_all.cljs$core$IFn$_invoke$arity$2 = into_all__2;
  into_all.cljs$core$IFn$_invoke$arity$variadic = into_all__3.cljs$core$IFn$_invoke$arity$variadic;
  return into_all;
}();
taoensso.encore.interleave_all = function() {
  var interleave_all = null;
  var interleave_all__0 = function() {
    return cljs.core.List.EMPTY;
  };
  var interleave_all__1 = function(c1) {
    return new cljs.core.LazySeq(null, function() {
      return c1;
    }, null, null);
  };
  var interleave_all__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave_all.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        if (s1) {
          return s1;
        } else {
          if (s2) {
            return s2;
          } else {
            return null;
          }
        }
      }
    }, null, null);
  };
  var interleave_all__3 = function() {
    var G__22618__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.filter.call(null, cljs.core.identity, cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1)));
        return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave_all, cljs.core.map.call(null, cljs.core.rest, ss)));
      }, null, null);
    };
    var G__22618 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22618__delegate.call(this, c1, c2, colls);
    };
    G__22618.cljs$lang$maxFixedArity = 2;
    G__22618.cljs$lang$applyTo = function(arglist__22619) {
      var c1 = cljs.core.first(arglist__22619);
      arglist__22619 = cljs.core.next(arglist__22619);
      var c2 = cljs.core.first(arglist__22619);
      var colls = cljs.core.rest(arglist__22619);
      return G__22618__delegate(c1, c2, colls);
    };
    G__22618.cljs$core$IFn$_invoke$arity$variadic = G__22618__delegate;
    return G__22618;
  }();
  interleave_all = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 0:
        return interleave_all__0.call(this);
      case 1:
        return interleave_all__1.call(this, c1);
      case 2:
        return interleave_all__2.call(this, c1, c2);
      default:
        return interleave_all__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave_all.cljs$lang$maxFixedArity = 2;
  interleave_all.cljs$lang$applyTo = interleave_all__3.cljs$lang$applyTo;
  interleave_all.cljs$core$IFn$_invoke$arity$0 = interleave_all__0;
  interleave_all.cljs$core$IFn$_invoke$arity$1 = interleave_all__1;
  interleave_all.cljs$core$IFn$_invoke$arity$2 = interleave_all__2;
  interleave_all.cljs$core$IFn$_invoke$arity$variadic = interleave_all__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave_all;
}();
taoensso.encore.takev = function takev(n, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    return taoensso.encore.subvec_STAR_.call(null, coll, 0, n);
  } else {
    return cljs.core.vec.call(null, cljs.core.take.call(null, n, coll));
  }
};
taoensso.encore.distinctv = function() {
  var distinctv = null;
  var distinctv__1 = function(coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.nth.call(null, cljs.core.reduce.call(null, function(p__22624, in$) {
      var vec__22625 = p__22624;
      var v = cljs.core.nth.call(null, vec__22625, 0, null);
      var seen = cljs.core.nth.call(null, vec__22625, 1, null);
      if (!cljs.core.contains_QMARK_.call(null, seen, in$)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj_BANG_.call(null, v, in$), cljs.core.conj.call(null, seen, in$)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, seen], null);
      }
    }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), cljs.core.PersistentHashSet.EMPTY], null), coll), 0));
  };
  var distinctv__2 = function(keyfn, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.nth.call(null, cljs.core.reduce.call(null, function(p__22626, in$) {
      var vec__22627 = p__22626;
      var v = cljs.core.nth.call(null, vec__22627, 0, null);
      var seen = cljs.core.nth.call(null, vec__22627, 1, null);
      var in_STAR_ = keyfn.call(null, in$);
      if (!cljs.core.contains_QMARK_.call(null, seen, in_STAR_)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj_BANG_.call(null, v, in$), cljs.core.conj.call(null, seen, in_STAR_)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, seen], null);
      }
    }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), cljs.core.PersistentHashSet.EMPTY], null), coll), 0));
  };
  distinctv = function(keyfn, coll) {
    switch(arguments.length) {
      case 1:
        return distinctv__1.call(this, keyfn);
      case 2:
        return distinctv__2.call(this, keyfn, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinctv.cljs$core$IFn$_invoke$arity$1 = distinctv__1;
  distinctv.cljs$core$IFn$_invoke$arity$2 = distinctv__2;
  return distinctv;
}();
taoensso.encore.distinct_by = function distinct_by(keyfn, coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__22634, seen__$1) {
        while (true) {
          var vec__22635 = p__22634;
          var v = cljs.core.nth.call(null, vec__22635, 0, null);
          var xs__$1 = vec__22635;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            var v_STAR_ = keyfn.call(null, v);
            if (cljs.core.contains_QMARK_.call(null, seen__$1, v_STAR_)) {
              var G__22636 = cljs.core.rest.call(null, s);
              var G__22637 = seen__$1;
              p__22634 = G__22636;
              seen__$1 = G__22637;
              continue;
            } else {
              return cljs.core.cons.call(null, v, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, v_STAR_)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
taoensso.encore.rcompare = function rcompare(x, y) {
  return cljs.core.compare.call(null, y, x);
};
taoensso.encore.nested_merge_with = function() {
  var nested_merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.key.call(null, e);
        var rv = cljs.core.val.call(null, e);
        if (!cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, rv);
        } else {
          var lv = cljs.core.get.call(null, m, k);
          if (cljs.core.map_QMARK_.call(null, lv) && cljs.core.map_QMARK_.call(null, rv)) {
            return cljs.core.assoc.call(null, m, k, nested_merge_with.call(null, f, lv, rv));
          } else {
            return cljs.core.assoc.call(null, m, k, f.call(null, lv, rv));
          }
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3761__auto__ = m1;
            if (cljs.core.truth_(or__3761__auto__)) {
              return or__3761__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var nested_merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return nested_merge_with__delegate.call(this, f, maps);
  };
  nested_merge_with.cljs$lang$maxFixedArity = 1;
  nested_merge_with.cljs$lang$applyTo = function(arglist__22639) {
    var f = cljs.core.first(arglist__22639);
    var maps = cljs.core.rest(arglist__22639);
    return nested_merge_with__delegate(f, maps);
  };
  nested_merge_with.cljs$core$IFn$_invoke$arity$variadic = nested_merge_with__delegate;
  return nested_merge_with;
}();
taoensso.encore.nested_merge = cljs.core.partial.call(null, taoensso.encore.nested_merge_with, function(x, y) {
  if (cljs.core.map_QMARK_.call(null, x) && y == null) {
    return x;
  } else {
    return y;
  }
});
taoensso.encore.greatest = function() {
  var greatest__delegate = function(coll, p__22642) {
    var vec__22644 = p__22642;
    var _QMARK_comparator = cljs.core.nth.call(null, vec__22644, 0, null);
    var comparator = function() {
      var or__3761__auto__ = _QMARK_comparator;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return taoensso.encore.rcompare;
      }
    }();
    return cljs.core.reduce.call(null, function(comparator, vec__22644, _QMARK_comparator) {
      return function(p1__22640_SHARP_, p2__22641_SHARP_) {
        if (comparator.call(null, p1__22640_SHARP_, p2__22641_SHARP_) > 0) {
          return p2__22641_SHARP_;
        } else {
          return p1__22640_SHARP_;
        }
      };
    }(comparator, vec__22644, _QMARK_comparator), coll);
  };
  var greatest = function(coll, var_args) {
    var p__22642 = null;
    if (arguments.length > 1) {
      p__22642 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return greatest__delegate.call(this, coll, p__22642);
  };
  greatest.cljs$lang$maxFixedArity = 1;
  greatest.cljs$lang$applyTo = function(arglist__22645) {
    var coll = cljs.core.first(arglist__22645);
    var p__22642 = cljs.core.rest(arglist__22645);
    return greatest__delegate(coll, p__22642);
  };
  greatest.cljs$core$IFn$_invoke$arity$variadic = greatest__delegate;
  return greatest;
}();
taoensso.encore.least = function() {
  var least__delegate = function(coll, p__22648) {
    var vec__22650 = p__22648;
    var _QMARK_comparator = cljs.core.nth.call(null, vec__22650, 0, null);
    var comparator = function() {
      var or__3761__auto__ = _QMARK_comparator;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return taoensso.encore.rcompare;
      }
    }();
    return cljs.core.reduce.call(null, function(comparator, vec__22650, _QMARK_comparator) {
      return function(p1__22646_SHARP_, p2__22647_SHARP_) {
        if (comparator.call(null, p1__22646_SHARP_, p2__22647_SHARP_) < 0) {
          return p2__22647_SHARP_;
        } else {
          return p1__22646_SHARP_;
        }
      };
    }(comparator, vec__22650, _QMARK_comparator), coll);
  };
  var least = function(coll, var_args) {
    var p__22648 = null;
    if (arguments.length > 1) {
      p__22648 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return least__delegate.call(this, coll, p__22648);
  };
  least.cljs$lang$maxFixedArity = 1;
  least.cljs$lang$applyTo = function(arglist__22651) {
    var coll = cljs.core.first(arglist__22651);
    var p__22648 = cljs.core.rest(arglist__22651);
    return least__delegate(coll, p__22648);
  };
  least.cljs$core$IFn$_invoke$arity$variadic = least__delegate;
  return least;
}();
taoensso.encore.repeatedly_into = function repeatedly_into(coll, n, f) {
  if (coll instanceof clojure.lang.IEditableCollection) {
    var v = cljs.core.transient$.call(null, coll);
    var idx = 0;
    while (true) {
      if (idx >= n) {
        return cljs.core.persistent_BANG_.call(null, v);
      } else {
        var G__22652 = cljs.core.conj_BANG_.call(null, v, f.call(null));
        var G__22653 = idx + 1;
        v = G__22652;
        idx = G__22653;
        continue;
      }
      break;
    }
  } else {
    var v = coll;
    var idx = 0;
    while (true) {
      if (idx >= n) {
        return v;
      } else {
        var G__22654 = cljs.core.conj.call(null, v, f.call(null));
        var G__22655 = idx + 1;
        v = G__22654;
        idx = G__22655;
        continue;
      }
      break;
    }
  }
};
taoensso.encore.undefined__GT_nil = function undefined__GT_nil(x) {
  if (void 0 === x) {
    return null;
  } else {
    return x;
  }
};
taoensso.encore.nil__GT_str = function nil__GT_str(x) {
  if (void 0 === x || x == null) {
    return "nil";
  } else {
    return x;
  }
};
taoensso.encore.spaced_str_with_nils = function spaced_str_with_nils(xs) {
  return clojure.string.join.call(null, " ", cljs.core.mapv.call(null, taoensso.encore.nil__GT_str, xs));
};
taoensso.encore.spaced_str = function spaced_str(xs) {
  return clojure.string.join.call(null, " ", cljs.core.mapv.call(null, taoensso.encore.undefined__GT_nil, xs));
};
taoensso.encore.format_STAR_ = function format_STAR_(fmt, args) {
  var fmt__$1 = function() {
    var or__3761__auto__ = fmt;
    if (cljs.core.truth_(or__3761__auto__)) {
      return or__3761__auto__;
    } else {
      return "";
    }
  }();
  var args__$1 = cljs.core.mapv.call(null, taoensso.encore.nil__GT_str, args);
  return cljs.core.apply.call(null, goog.string.format, fmt__$1, args__$1);
};
taoensso.encore.format = function() {
  var format__delegate = function(fmt, args) {
    return taoensso.encore.format_STAR_.call(null, fmt, args);
  };
  var format = function(fmt, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return format__delegate.call(this, fmt, args);
  };
  format.cljs$lang$maxFixedArity = 1;
  format.cljs$lang$applyTo = function(arglist__22656) {
    var fmt = cljs.core.first(arglist__22656);
    var args = cljs.core.rest(arglist__22656);
    return format__delegate(fmt, args);
  };
  format.cljs$core$IFn$_invoke$arity$variadic = format__delegate;
  return format;
}();
taoensso.encore.str_replace = function str_replace(s, match, replacement) {
  var replacement__$1 = !cljs.core.fn_QMARK_.call(null, replacement) ? replacement : function() {
    var G__22657__delegate = function(args) {
      return replacement.call(null, cljs.core.vec.call(null, args));
    };
    var G__22657 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__22657__delegate.call(this, args);
    };
    G__22657.cljs$lang$maxFixedArity = 0;
    G__22657.cljs$lang$applyTo = function(arglist__22658) {
      var args = cljs.core.seq(arglist__22658);
      return G__22657__delegate(args);
    };
    G__22657.cljs$core$IFn$_invoke$arity$variadic = G__22657__delegate;
    return G__22657;
  }();
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement__$1);
  } else {
    if (match instanceof RegExp) {
      var flags = [cljs.core.str("g"), cljs.core.str(cljs.core.truth_(match.ignoreCase) ? "i" : null), cljs.core.str(cljs.core.truth_(match.multiline) ? "m" : null)].join("");
      return s.replace(new RegExp(match.source, flags), replacement__$1);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
taoensso.encore.substr = function() {
  var substr__delegate = function(s, start_idx, p__22659) {
    var vec__22662 = p__22659;
    var _QMARK_max_len = cljs.core.nth.call(null, vec__22662, 0, null);
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function(vec__22662, _QMARK_max_len) {
        return function() {
          return s;
        };
      }(vec__22662, _QMARK_max_len), null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.string_QMARK_, new cljs.core.Symbol(null, "string?", "string?", -1129175764, null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "s", "s", -948495851, null))))].join(""));
    }
    var vec__22663 = taoensso.encore.sub_indexes.call(null, s, start_idx, new cljs.core.Keyword(null, "max-len", "max-len", -18846016), _QMARK_max_len);
    var start_idx_STAR_ = cljs.core.nth.call(null, vec__22663, 0, null);
    var end_idx_STAR_ = cljs.core.nth.call(null, vec__22663, 1, null);
    return s.substring(start_idx_STAR_, end_idx_STAR_);
  };
  var substr = function(s, start_idx, var_args) {
    var p__22659 = null;
    if (arguments.length > 2) {
      p__22659 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return substr__delegate.call(this, s, start_idx, p__22659);
  };
  substr.cljs$lang$maxFixedArity = 2;
  substr.cljs$lang$applyTo = function(arglist__22664) {
    var s = cljs.core.first(arglist__22664);
    arglist__22664 = cljs.core.next(arglist__22664);
    var start_idx = cljs.core.first(arglist__22664);
    var p__22659 = cljs.core.rest(arglist__22664);
    return substr__delegate(s, start_idx, p__22659);
  };
  substr.cljs$core$IFn$_invoke$arity$variadic = substr__delegate;
  return substr;
}();
taoensso.encore.str_contains_QMARK_ = function str_contains_QMARK_(s, substr) {
  return cljs.core.not_EQ_.call(null, -1, s.indexOf(substr));
};
taoensso.encore.str_starts_with_QMARK_ = function str_starts_with_QMARK_(s, substr) {
  return s.indexOf(substr) === 0;
};
taoensso.encore.str_ends_with_QMARK_ = function str_ends_with_QMARK_(s, substr) {
  var s_len = s.length;
  var substr_len = substr.length;
  if (s_len >= substr_len) {
    return cljs.core.not_EQ_.call(null, -1, s.indexOf(substr, s_len - substr_len));
  } else {
    return null;
  }
};
taoensso.encore.str__QMARK_index = function() {
  var str__QMARK_index__delegate = function(s, substr, p__22665) {
    var vec__22667 = p__22665;
    var start_idx = cljs.core.nth.call(null, vec__22667, 0, null);
    var last_QMARK_ = cljs.core.nth.call(null, vec__22667, 1, null);
    var start_idx__$1 = function() {
      var or__3761__auto__ = start_idx;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 0;
      }
    }() | 0;
    var result = (cljs.core.truth_(last_QMARK_) ? s.lastIndexOf(substr, start_idx__$1) : s.indexOf(substr, start_idx__$1)) | 0;
    if (cljs.core.not_EQ_.call(null, result, -1)) {
      return result;
    } else {
      return null;
    }
  };
  var str__QMARK_index = function(s, substr, var_args) {
    var p__22665 = null;
    if (arguments.length > 2) {
      p__22665 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return str__QMARK_index__delegate.call(this, s, substr, p__22665);
  };
  str__QMARK_index.cljs$lang$maxFixedArity = 2;
  str__QMARK_index.cljs$lang$applyTo = function(arglist__22668) {
    var s = cljs.core.first(arglist__22668);
    arglist__22668 = cljs.core.next(arglist__22668);
    var substr = cljs.core.first(arglist__22668);
    var p__22665 = cljs.core.rest(arglist__22668);
    return str__QMARK_index__delegate(s, substr, p__22665);
  };
  str__QMARK_index.cljs$core$IFn$_invoke$arity$variadic = str__QMARK_index__delegate;
  return str__QMARK_index;
}();
taoensso.encore.join_once = function() {
  var join_once__delegate = function(separator, coll) {
    return cljs.core.reduce.call(null, function(s1, s2) {
      var s1__$1 = [cljs.core.str(s1)].join("");
      var s2__$1 = [cljs.core.str(s2)].join("");
      if (cljs.core.truth_(taoensso.encore.str_ends_with_QMARK_.call(null, s1__$1, separator))) {
        if (taoensso.encore.str_starts_with_QMARK_.call(null, s2__$1, separator)) {
          return[cljs.core.str(s1__$1), cljs.core.str(s2__$1.substring(1))].join("");
        } else {
          return[cljs.core.str(s1__$1), cljs.core.str(s2__$1)].join("");
        }
      } else {
        if (taoensso.encore.str_starts_with_QMARK_.call(null, s2__$1, separator)) {
          return[cljs.core.str(s1__$1), cljs.core.str(s2__$1)].join("");
        } else {
          if (cljs.core._EQ_.call(null, s1__$1, "") || cljs.core._EQ_.call(null, s2__$1, "")) {
            return[cljs.core.str(s1__$1), cljs.core.str(s2__$1)].join("");
          } else {
            return[cljs.core.str(s1__$1), cljs.core.str(separator), cljs.core.str(s2__$1)].join("");
          }
        }
      }
    }, null, coll);
  };
  var join_once = function(separator, var_args) {
    var coll = null;
    if (arguments.length > 1) {
      coll = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return join_once__delegate.call(this, separator, coll);
  };
  join_once.cljs$lang$maxFixedArity = 1;
  join_once.cljs$lang$applyTo = function(arglist__22669) {
    var separator = cljs.core.first(arglist__22669);
    var coll = cljs.core.rest(arglist__22669);
    return join_once__delegate(separator, coll);
  };
  join_once.cljs$core$IFn$_invoke$arity$variadic = join_once__delegate;
  return join_once;
}();
taoensso.encore.path = function() {
  var path__delegate = function(parts) {
    return cljs.core.apply.call(null, taoensso.encore.join_once, "/", parts);
  };
  var path = function(var_args) {
    var parts = null;
    if (arguments.length > 0) {
      parts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return path__delegate.call(this, parts);
  };
  path.cljs$lang$maxFixedArity = 0;
  path.cljs$lang$applyTo = function(arglist__22670) {
    var parts = cljs.core.seq(arglist__22670);
    return path__delegate(parts);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
taoensso.encore.norm_word_breaks = function norm_word_breaks(s) {
  return clojure.string.replace.call(null, [cljs.core.str(s)].join(""), /\s+/, " ");
};
taoensso.encore.count_words = function count_words(s) {
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
    return 0;
  } else {
    return cljs.core.count.call(null, clojure.string.split.call(null, s, /\s+/));
  }
};
taoensso.encore.uuid_str = function() {
  var uuid_str = null;
  var uuid_str__0 = function() {
    var hex = function() {
      return cljs.core.rand_int.call(null, 15).toString(16);
    };
    var rhex = (8 | 3 & cljs.core.rand_int.call(null, 14)).toString(16);
    return[cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str("-"), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), 
    cljs.core.str(hex.call(null)), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str("-"), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), cljs.core.str(hex.call(null)), 
    cljs.core.str(hex.call(null))].join("");
  };
  var uuid_str__1 = function(max_length) {
    return taoensso.encore.substr.call(null, uuid_str.call(null), 0, max_length);
  };
  uuid_str = function(max_length) {
    switch(arguments.length) {
      case 0:
        return uuid_str__0.call(this);
      case 1:
        return uuid_str__1.call(this, max_length);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  uuid_str.cljs$core$IFn$_invoke$arity$0 = uuid_str__0;
  uuid_str.cljs$core$IFn$_invoke$arity$1 = uuid_str__1;
  return uuid_str;
}();
taoensso.encore.gc_rate = 1 / 16E3;
taoensso.encore.gc_now_QMARK_ = function gc_now_QMARK_() {
  return cljs.core.rand.call(null) <= taoensso.encore.gc_rate;
};
taoensso.encore.swap_val_BANG_ = function swap_val_BANG_(atom_, k, f) {
  while (true) {
    var old_m = cljs.core.deref.call(null, atom_);
    var new_v = f.call(null, cljs.core.get.call(null, old_m, k));
    var new_m = cljs.core.assoc.call(null, old_m, k, new_v);
    if (cljs.core.compare_and_set_BANG_.call(null, atom_, old_m, new_m)) {
      return new_v;
    } else {
      continue;
    }
    break;
  }
};
taoensso.encore.memoize_ = function memoize_(f) {
  var cache_ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(cache_) {
    return function() {
      var G__22671__delegate = function(args) {
        return cljs.core.deref.call(null, function() {
          var or__3761__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, cache_), args);
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return taoensso.encore.swap_val_BANG_.call(null, cache_, args, function(or__3761__auto__, cache_) {
              return function(_QMARK_dv) {
                if (cljs.core.truth_(_QMARK_dv)) {
                  return _QMARK_dv;
                } else {
                  return new cljs.core.Delay(function(or__3761__auto__, cache_) {
                    return function() {
                      return cljs.core.apply.call(null, f, args);
                    };
                  }(or__3761__auto__, cache_), null);
                }
              };
            }(or__3761__auto__, cache_));
          }
        }());
      };
      var G__22671 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__22671__delegate.call(this, args);
      };
      G__22671.cljs$lang$maxFixedArity = 0;
      G__22671.cljs$lang$applyTo = function(arglist__22672) {
        var args = cljs.core.seq(arglist__22672);
        return G__22671__delegate(args);
      };
      G__22671.cljs$core$IFn$_invoke$arity$variadic = G__22671__delegate;
      return G__22671;
    }();
  }(cache_);
};
taoensso.encore.memoize1 = function memoize1(f) {
  var cache_ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(cache_) {
    return function() {
      var G__22673__delegate = function(args) {
        return cljs.core.deref.call(null, function() {
          var or__3761__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, cache_), args);
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, cache_, function(or__3761__auto__, cache_) {
              return function(cache) {
                if (cljs.core.truth_(cljs.core.get.call(null, cache, args))) {
                  return cache;
                } else {
                  return new cljs.core.PersistentArrayMap.fromArray([args, new cljs.core.Delay(function(or__3761__auto__, cache_) {
                    return function() {
                      return cljs.core.apply.call(null, f, args);
                    };
                  }(or__3761__auto__, cache_), null)], true, false);
                }
              };
            }(or__3761__auto__, cache_)), args);
          }
        }());
      };
      var G__22673 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__22673__delegate.call(this, args);
      };
      G__22673.cljs$lang$maxFixedArity = 0;
      G__22673.cljs$lang$applyTo = function(arglist__22674) {
        var args = cljs.core.seq(arglist__22674);
        return G__22673__delegate(args);
      };
      G__22673.cljs$core$IFn$_invoke$arity$variadic = G__22673__delegate;
      return G__22673;
    }();
  }(cache_);
};
taoensso.encore.memoized = function() {
  var memoized__delegate = function(cache, f, args) {
    if (cljs.core.not.call(null, cache)) {
      return cljs.core.apply.call(null, f, args);
    } else {
      return cljs.core.deref.call(null, taoensso.encore.swap_val_BANG_.call(null, cache, args, function(p1__22675_SHARP_) {
        if (cljs.core.truth_(p1__22675_SHARP_)) {
          return p1__22675_SHARP_;
        } else {
          return new cljs.core.Delay(function() {
            return cljs.core.apply.call(null, f, args);
          }, null);
        }
      }));
    }
  };
  var memoized = function(cache, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return memoized__delegate.call(this, cache, f, args);
  };
  memoized.cljs$lang$maxFixedArity = 2;
  memoized.cljs$lang$applyTo = function(arglist__22676) {
    var cache = cljs.core.first(arglist__22676);
    arglist__22676 = cljs.core.next(arglist__22676);
    var f = cljs.core.first(arglist__22676);
    var args = cljs.core.rest(arglist__22676);
    return memoized__delegate(cache, f, args);
  };
  memoized.cljs$core$IFn$_invoke$arity$variadic = memoized__delegate;
  return memoized;
}();
taoensso.encore.memoize_STAR_ = function() {
  var memoize_STAR_ = null;
  var memoize_STAR___1 = function(f) {
    var cache_ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    return function(cache_) {
      return function() {
        var G__22719__delegate = function(p__22699) {
          var vec__22700 = p__22699;
          var arg1 = cljs.core.nth.call(null, vec__22700, 0, null);
          var argn = cljs.core.nthnext.call(null, vec__22700, 1);
          var args = vec__22700;
          if (cljs.core.truth_(taoensso.encore.kw_identical_QMARK_.call(null, arg1, new cljs.core.Keyword("mem", "del", "mem/del", 574870667)))) {
            if (cljs.core.truth_(taoensso.encore.kw_identical_QMARK_.call(null, cljs.core.first.call(null, argn), new cljs.core.Keyword("mem", "all", "mem/all", 892075139)))) {
              cljs.core.reset_BANG_.call(null, cache_, cljs.core.PersistentArrayMap.EMPTY);
            } else {
              cljs.core.swap_BANG_.call(null, cache_, cljs.core.dissoc, argn);
            }
            return null;
          } else {
            var fresh_QMARK_ = taoensso.encore.kw_identical_QMARK_.call(null, arg1, new cljs.core.Keyword("mem", "fresh", "mem/fresh", -1179989133));
            var args__$1 = cljs.core.truth_(fresh_QMARK_) ? argn : args;
            return cljs.core.deref.call(null, function() {
              var or__3761__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, cache_), args__$1);
              if (cljs.core.truth_(or__3761__auto__)) {
                return or__3761__auto__;
              } else {
                return taoensso.encore.swap_val_BANG_.call(null, cache_, args__$1, function(or__3761__auto__, fresh_QMARK_, args__$1, vec__22700, arg1, argn, args, cache_) {
                  return function(_QMARK_dv) {
                    if (cljs.core.truth_(function() {
                      var and__3749__auto__ = _QMARK_dv;
                      if (cljs.core.truth_(and__3749__auto__)) {
                        return cljs.core.not.call(null, fresh_QMARK_);
                      } else {
                        return and__3749__auto__;
                      }
                    }())) {
                      return _QMARK_dv;
                    } else {
                      return new cljs.core.Delay(function(or__3761__auto__, fresh_QMARK_, args__$1, vec__22700, arg1, argn, args, cache_) {
                        return function() {
                          return cljs.core.apply.call(null, f, args__$1);
                        };
                      }(or__3761__auto__, fresh_QMARK_, args__$1, vec__22700, arg1, argn, args, cache_), null);
                    }
                  };
                }(or__3761__auto__, fresh_QMARK_, args__$1, vec__22700, arg1, argn, args, cache_));
              }
            }());
          }
        };
        var G__22719 = function(var_args) {
          var p__22699 = null;
          if (arguments.length > 0) {
            p__22699 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__22719__delegate.call(this, p__22699);
        };
        G__22719.cljs$lang$maxFixedArity = 0;
        G__22719.cljs$lang$applyTo = function(arglist__22720) {
          var p__22699 = cljs.core.seq(arglist__22720);
          return G__22719__delegate(p__22699);
        };
        G__22719.cljs$core$IFn$_invoke$arity$variadic = G__22719__delegate;
        return G__22719;
      }();
    }(cache_);
  };
  var memoize_STAR___2 = function(ttl_ms, f) {
    taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function() {
      return ttl_ms;
    }, null), new cljs.core.Symbol(null, "ttl-ms", "ttl-ms", -1349172894, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), cljs.core.nil_QMARK_, taoensso.encore.pos_int_QMARK_], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, 
    "pos-int?", "pos-int?", -1205815015, null)], null));
    var cache = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    return function(cache) {
      return function() {
        var G__22721__delegate = function(p__22701) {
          var vec__22702 = p__22701;
          var arg1 = cljs.core.nth.call(null, vec__22702, 0, null);
          var argn = cljs.core.nthnext.call(null, vec__22702, 1);
          var args = vec__22702;
          if (cljs.core.truth_(taoensso.encore.kw_identical_QMARK_.call(null, arg1, new cljs.core.Keyword("mem", "del", "mem/del", 574870667)))) {
            if (cljs.core.truth_(taoensso.encore.kw_identical_QMARK_.call(null, cljs.core.first.call(null, argn), new cljs.core.Keyword("mem", "all", "mem/all", 892075139)))) {
              cljs.core.reset_BANG_.call(null, cache, cljs.core.PersistentArrayMap.EMPTY);
            } else {
              cljs.core.swap_BANG_.call(null, cache, cljs.core.dissoc, argn);
            }
            return null;
          } else {
            if (taoensso.encore.gc_now_QMARK_.call(null)) {
              var instant_22722 = taoensso.encore.now_udt.call(null);
              cljs.core.swap_BANG_.call(null, cache, function(instant_22722, vec__22702, arg1, argn, args, cache) {
                return function(m) {
                  return cljs.core.reduce_kv.call(null, function(instant_22722, vec__22702, arg1, argn, args, cache) {
                    return function(m_STAR_, k, p__22703) {
                      var vec__22704 = p__22703;
                      var dv = cljs.core.nth.call(null, vec__22704, 0, null);
                      var udt = cljs.core.nth.call(null, vec__22704, 1, null);
                      var cv = vec__22704;
                      if (instant_22722 - udt > ttl_ms) {
                        return m_STAR_;
                      } else {
                        return cljs.core.assoc.call(null, m_STAR_, k, cv);
                      }
                    };
                  }(instant_22722, vec__22702, arg1, argn, args, cache), cljs.core.PersistentArrayMap.EMPTY, taoensso.encore.clj1098.call(null, m));
                };
              }(instant_22722, vec__22702, arg1, argn, args, cache));
            } else {
            }
            var fresh_QMARK_ = taoensso.encore.kw_identical_QMARK_.call(null, arg1, new cljs.core.Keyword("mem", "fresh", "mem/fresh", -1179989133));
            var args__$1 = cljs.core.truth_(fresh_QMARK_) ? argn : args;
            var instant = taoensso.encore.now_udt.call(null);
            var vec__22705 = taoensso.encore.swap_val_BANG_.call(null, cache, args__$1, function(fresh_QMARK_, args__$1, instant, vec__22702, arg1, argn, args, cache) {
              return function(_QMARK_cv) {
                if (cljs.core.truth_(function() {
                  var and__3749__auto__ = _QMARK_cv;
                  if (cljs.core.truth_(and__3749__auto__)) {
                    var and__3749__auto____$1 = cljs.core.not.call(null, fresh_QMARK_);
                    if (and__3749__auto____$1) {
                      var vec__22707 = _QMARK_cv;
                      var _dv = cljs.core.nth.call(null, vec__22707, 0, null);
                      var udt = cljs.core.nth.call(null, vec__22707, 1, null);
                      return instant - udt < ttl_ms;
                    } else {
                      return and__3749__auto____$1;
                    }
                  } else {
                    return and__3749__auto__;
                  }
                }())) {
                  return _QMARK_cv;
                } else {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Delay(function(fresh_QMARK_, args__$1, instant, vec__22702, arg1, argn, args, cache) {
                    return function() {
                      return cljs.core.apply.call(null, f, args__$1);
                    };
                  }(fresh_QMARK_, args__$1, instant, vec__22702, arg1, argn, args, cache), null), instant], null);
                }
              };
            }(fresh_QMARK_, args__$1, instant, vec__22702, arg1, argn, args, cache));
            var dv = cljs.core.nth.call(null, vec__22705, 0, null);
            return cljs.core.deref.call(null, dv);
          }
        };
        var G__22721 = function(var_args) {
          var p__22701 = null;
          if (arguments.length > 0) {
            p__22701 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__22721__delegate.call(this, p__22701);
        };
        G__22721.cljs$lang$maxFixedArity = 0;
        G__22721.cljs$lang$applyTo = function(arglist__22723) {
          var p__22701 = cljs.core.seq(arglist__22723);
          return G__22721__delegate(p__22701);
        };
        G__22721.cljs$core$IFn$_invoke$arity$variadic = G__22721__delegate;
        return G__22721;
      }();
    }(cache);
  };
  var memoize_STAR___3 = function(cache_size, ttl_ms, f) {
    taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function() {
      return ttl_ms;
    }, null), new cljs.core.Symbol(null, "ttl-ms", "ttl-ms", -1349172894, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), cljs.core.nil_QMARK_, taoensso.encore.pos_int_QMARK_], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, 
    "pos-int?", "pos-int?", -1205815015, null)], null));
    taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function() {
      return cache_size;
    }, null), new cljs.core.Symbol(null, "cache-size", "cache-size", 1049002054, null), taoensso.encore.pos_int_QMARK_, new cljs.core.Symbol(null, "pos-int?", "pos-int?", -1205815015, null));
    var state = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tick", "tick", -835886976), 0], null));
    return function(state) {
      return function() {
        var G__22724__delegate = function(p__22708) {
          var vec__22709 = p__22708;
          var arg1 = cljs.core.nth.call(null, vec__22709, 0, null);
          var argn = cljs.core.nthnext.call(null, vec__22709, 1);
          var args = vec__22709;
          if (cljs.core.truth_(taoensso.encore.kw_identical_QMARK_.call(null, arg1, new cljs.core.Keyword("mem", "del", "mem/del", 574870667)))) {
            if (cljs.core.truth_(taoensso.encore.kw_identical_QMARK_.call(null, cljs.core.first.call(null, argn), new cljs.core.Keyword("mem", "all", "mem/all", 892075139)))) {
              cljs.core.reset_BANG_.call(null, state, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tick", "tick", -835886976), 0], null));
            } else {
              cljs.core.swap_BANG_.call(null, state, cljs.core.dissoc, argn);
            }
            return null;
          } else {
            if (taoensso.encore.gc_now_QMARK_.call(null)) {
              var instant_22725 = taoensso.encore.now_udt.call(null);
              cljs.core.swap_BANG_.call(null, state, function(instant_22725, vec__22709, arg1, argn, args, state) {
                return function(m) {
                  var m_STAR_ = cljs.core.dissoc.call(null, m, new cljs.core.Keyword(null, "tick", "tick", -835886976));
                  var m_STAR___$1 = cljs.core.not.call(null, ttl_ms) ? m_STAR_ : cljs.core.reduce_kv.call(null, function(m_STAR_, instant_22725, vec__22709, arg1, argn, args, state) {
                    return function(m_STAR___$1, k, p__22710) {
                      var vec__22711 = p__22710;
                      var dv = cljs.core.nth.call(null, vec__22711, 0, null);
                      var udt = cljs.core.nth.call(null, vec__22711, 1, null);
                      var _ = cljs.core.nth.call(null, vec__22711, 2, null);
                      var ___$1 = cljs.core.nth.call(null, vec__22711, 3, null);
                      var cv = vec__22711;
                      if (instant_22725 - udt > ttl_ms) {
                        return m_STAR___$1;
                      } else {
                        return cljs.core.assoc.call(null, m_STAR___$1, k, cv);
                      }
                    };
                  }(m_STAR_, instant_22725, vec__22709, arg1, argn, args, state), cljs.core.PersistentArrayMap.EMPTY, taoensso.encore.clj1098.call(null, m_STAR_));
                  var n_to_prune = cljs.core.count.call(null, m_STAR___$1) - cache_size;
                  var m_STAR___$2 = !(n_to_prune > 0) ? m_STAR___$1 : cljs.core.apply.call(null, cljs.core.dissoc, m_STAR___$1, cljs.core.mapv.call(null, function(m_STAR_, m_STAR___$1, n_to_prune, instant_22725, vec__22709, arg1, argn, args, state) {
                    return function(p1__22678_SHARP_) {
                      return cljs.core.nth.call(null, p1__22678_SHARP_, 1);
                    };
                  }(m_STAR_, m_STAR___$1, n_to_prune, instant_22725, vec__22709, arg1, argn, args, state), cljs.core.take.call(null, n_to_prune, cljs.core.sort_by.call(null, function(m_STAR_, m_STAR___$1, n_to_prune, instant_22725, vec__22709, arg1, argn, args, state) {
                    return function(p1__22677_SHARP_) {
                      return cljs.core.nth.call(null, p1__22677_SHARP_, 0);
                    };
                  }(m_STAR_, m_STAR___$1, n_to_prune, instant_22725, vec__22709, arg1, argn, args, state), cljs.core.mapv.call(null, function(m_STAR_, m_STAR___$1, n_to_prune, instant_22725, vec__22709, arg1, argn, args, state) {
                    return function(k) {
                      var vec__22712 = m_STAR___$1.call(null, k);
                      var _ = cljs.core.nth.call(null, vec__22712, 0, null);
                      var ___$1 = cljs.core.nth.call(null, vec__22712, 1, null);
                      var tick_lru = cljs.core.nth.call(null, vec__22712, 2, null);
                      var tick_lfu = cljs.core.nth.call(null, vec__22712, 3, null);
                      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tick_lru + tick_lfu, k], null);
                    };
                  }(m_STAR_, m_STAR___$1, n_to_prune, instant_22725, vec__22709, arg1, argn, args, state), cljs.core.keys.call(null, m_STAR___$1))))));
                  return cljs.core.assoc.call(null, m_STAR___$2, new cljs.core.Keyword(null, "tick", "tick", -835886976), (new cljs.core.Keyword(null, "tick", "tick", -835886976)).cljs$core$IFn$_invoke$arity$1(m));
                };
              }(instant_22725, vec__22709, arg1, argn, args, state));
            } else {
            }
            var fresh_QMARK_ = taoensso.encore.kw_identical_QMARK_.call(null, arg1, new cljs.core.Keyword("mem", "fresh", "mem/fresh", -1179989133));
            var args__$1 = cljs.core.truth_(fresh_QMARK_) ? argn : args;
            var _QMARK_instant = cljs.core.truth_(ttl_ms) ? taoensso.encore.now_udt.call(null) : null;
            var tick_SINGLEQUOTE_ = (new cljs.core.Keyword(null, "tick", "tick", -835886976)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state));
            var vec__22713 = taoensso.encore.swap_val_BANG_.call(null, state, args__$1, function(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_, vec__22709, arg1, argn, args, state) {
              return function(_QMARK_cv) {
                if (cljs.core.truth_(function() {
                  var and__3749__auto__ = _QMARK_cv;
                  if (cljs.core.truth_(and__3749__auto__)) {
                    var and__3749__auto____$1 = cljs.core.not.call(null, fresh_QMARK_);
                    if (and__3749__auto____$1) {
                      var or__3761__auto__ = _QMARK_instant == null;
                      if (or__3761__auto__) {
                        return or__3761__auto__;
                      } else {
                        var vec__22717 = _QMARK_cv;
                        var _dv = cljs.core.nth.call(null, vec__22717, 0, null);
                        var udt = cljs.core.nth.call(null, vec__22717, 1, null);
                        return _QMARK_instant - udt < ttl_ms;
                      }
                    } else {
                      return and__3749__auto____$1;
                    }
                  } else {
                    return and__3749__auto__;
                  }
                }())) {
                  return _QMARK_cv;
                } else {
                  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Delay(function(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_, vec__22709, arg1, argn, args, state) {
                    return function() {
                      return cljs.core.apply.call(null, f, args__$1);
                    };
                  }(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_, vec__22709, arg1, argn, args, state), null), _QMARK_instant, tick_SINGLEQUOTE_, 1], null);
                }
              };
            }(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_, vec__22709, arg1, argn, args, state));
            var dv = cljs.core.nth.call(null, vec__22713, 0, null);
            cljs.core.swap_BANG_.call(null, state, function(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_, vec__22713, dv, vec__22709, arg1, argn, args, state) {
              return function(m) {
                var temp__4126__auto__ = cljs.core.get.call(null, m, args__$1);
                if (cljs.core.truth_(temp__4126__auto__)) {
                  var vec__22718 = temp__4126__auto__;
                  var dv__$1 = cljs.core.nth.call(null, vec__22718, 0, null);
                  var _QMARK_udt = cljs.core.nth.call(null, vec__22718, 1, null);
                  var tick_lru = cljs.core.nth.call(null, vec__22718, 2, null);
                  var tick_lfu = cljs.core.nth.call(null, vec__22718, 3, null);
                  var cv = vec__22718;
                  return cljs.core.merge.call(null, m, new cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "tick", "tick", -835886976), tick_SINGLEQUOTE_ + 1, args__$1, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [dv__$1, _QMARK_udt, tick_SINGLEQUOTE_, tick_lfu + 1], null)], true, false));
                } else {
                  return null;
                }
              };
            }(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_, vec__22713, dv, vec__22709, arg1, argn, args, state));
            return cljs.core.deref.call(null, dv);
          }
        };
        var G__22724 = function(var_args) {
          var p__22708 = null;
          if (arguments.length > 0) {
            p__22708 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__22724__delegate.call(this, p__22708);
        };
        G__22724.cljs$lang$maxFixedArity = 0;
        G__22724.cljs$lang$applyTo = function(arglist__22726) {
          var p__22708 = cljs.core.seq(arglist__22726);
          return G__22724__delegate(p__22708);
        };
        G__22724.cljs$core$IFn$_invoke$arity$variadic = G__22724__delegate;
        return G__22724;
      }();
    }(state);
  };
  memoize_STAR_ = function(cache_size, ttl_ms, f) {
    switch(arguments.length) {
      case 1:
        return memoize_STAR___1.call(this, cache_size);
      case 2:
        return memoize_STAR___2.call(this, cache_size, ttl_ms);
      case 3:
        return memoize_STAR___3.call(this, cache_size, ttl_ms, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  memoize_STAR_.cljs$core$IFn$_invoke$arity$1 = memoize_STAR___1;
  memoize_STAR_.cljs$core$IFn$_invoke$arity$2 = memoize_STAR___2;
  memoize_STAR_.cljs$core$IFn$_invoke$arity$3 = memoize_STAR___3;
  return memoize_STAR_;
}();
taoensso.encore.rate_limiter_STAR_ = function rate_limiter_STAR_(specs) {
  if (cljs.core.empty_QMARK_.call(null, specs)) {
    return cljs.core.constantly.call(null, null);
  } else {
    var vspecs = cljs.core.vec.call(null, specs);
    var vstates_ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var max_win_ms = cljs.core.reduce.call(null, cljs.core.max, 0, cljs.core.mapv.call(null, function(vspecs, vstates_) {
      return function(p__22762) {
        var vec__22763 = p__22762;
        var _ = cljs.core.nth.call(null, vec__22763, 0, null);
        var win_ms = cljs.core.nth.call(null, vec__22763, 1, null);
        var ___$1 = cljs.core.nth.call(null, vec__22763, 2, null);
        var spec = vec__22763;
        return win_ms;
      };
    }(vspecs, vstates_), vspecs));
    var nspecs = cljs.core.count.call(null, vspecs);
    var nid_specs = cljs.core.count.call(null, cljs.core.filterv.call(null, function(vspecs, vstates_, max_win_ms, nspecs) {
      return function(p__22764) {
        var vec__22765 = p__22764;
        var _ = cljs.core.nth.call(null, vec__22765, 0, null);
        var ___$1 = cljs.core.nth.call(null, vec__22765, 1, null);
        var id = cljs.core.nth.call(null, vec__22765, 2, null);
        return id;
      };
    }(vspecs, vstates_, max_win_ms, nspecs), vspecs));
    var _ = nid_specs === 0 || cljs.core._EQ_.call(null, nid_specs, nspecs) ? null : function() {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "zero?", "zero?", 325758897, null), new cljs.core.Symbol(null, "nid-specs", "nid-specs", -1204406222, null)), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), new cljs.core.Symbol(null, "nid-specs", "nid-specs", -1204406222, null), new cljs.core.Symbol(null, 
      "nspecs", "nspecs", -1621596945, null)))))].join(""));
    }();
    var return_ids_QMARK_ = !(nid_specs === 0);
    return function(vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_) {
      return function() {
        var check_rate_limits__delegate = function(p__22766) {
          var vec__22782 = p__22766;
          var req_id = cljs.core.nth.call(null, vec__22782, 0, null);
          var instant = taoensso.encore.now_udt.call(null);
          if (cljs.core.truth_(function() {
            var and__3749__auto__ = req_id;
            if (cljs.core.truth_(and__3749__auto__)) {
              return taoensso.encore.gc_now_QMARK_.call(null);
            } else {
              return and__3749__auto__;
            }
          }())) {
            taoensso.encore.swap_in_BANG_.call(null, vstates_, cljs.core.PersistentVector.EMPTY, function(instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_) {
              return function gc(m) {
                var m__$1 = taoensso.encore.clj1098.call(null, m);
                return cljs.core.reduce_kv.call(null, function(m__$1, instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_) {
                  return function(m_STAR_, req_id__$1, vstate) {
                    var max_udt_win_start = cljs.core.reduce.call(null, function(m__$1, instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_) {
                      return function(acc, p__22785) {
                        var vec__22786 = p__22785;
                        var ___$1 = cljs.core.nth.call(null, vec__22786, 0, null);
                        var udt = cljs.core.nth.call(null, vec__22786, 1, null);
                        var ___$2 = cljs.core.nth.call(null, vec__22786, 2, null);
                        var x__4073__auto__ = acc;
                        var y__4074__auto__ = udt;
                        return x__4073__auto__ > y__4074__auto__ ? x__4073__auto__ : y__4074__auto__;
                      };
                    }(m__$1, instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_), 0, vstate);
                    var min_win_ms_elapsed = instant - max_udt_win_start;
                    if (min_win_ms_elapsed > max_win_ms) {
                      return cljs.core.dissoc.call(null, m_STAR_, req_id__$1);
                    } else {
                      return m_STAR_;
                    }
                  };
                }(m__$1, instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_), m__$1, m__$1);
              };
            }(instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_));
          } else {
          }
          return taoensso.encore.swap_in_BANG_.call(null, vstates_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [req_id], null), function(instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_) {
            return function(_QMARK_vstate) {
              if (cljs.core.not.call(null, _QMARK_vstate)) {
                return taoensso.encore.swapped.call(null, cljs.core.vec.call(null, cljs.core.repeat.call(null, nspecs, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, instant], null))), null);
              } else {
                var vec__22787 = function() {
                  var in_vspecs = vspecs;
                  var in_vstate = _QMARK_vstate;
                  var out_vstate = cljs.core.PersistentVector.EMPTY;
                  var _QMARK_worst_limit_offence = null;
                  while (true) {
                    var vec__22788 = in_vspecs;
                    var vec__22789 = cljs.core.nth.call(null, vec__22788, 0, null);
                    var ncalls_limit = cljs.core.nth.call(null, vec__22789, 0, null);
                    var win_ms = cljs.core.nth.call(null, vec__22789, 1, null);
                    var _QMARK_spec_id = cljs.core.nth.call(null, vec__22789, 2, null);
                    var next_in_vspecs = cljs.core.nthnext.call(null, vec__22788, 1);
                    var vec__22790 = in_vstate;
                    var vec__22791 = cljs.core.nth.call(null, vec__22790, 0, null);
                    var ncalls = cljs.core.nth.call(null, vec__22791, 0, null);
                    var udt_win_start = cljs.core.nth.call(null, vec__22791, 1, null);
                    var next_in_vstate = cljs.core.nthnext.call(null, vec__22790, 1);
                    var win_ms_elapsed = instant - udt_win_start;
                    var reset_due_QMARK_ = win_ms_elapsed >= win_ms;
                    var rate_limited_QMARK_ = !reset_due_QMARK_ && ncalls >= ncalls_limit;
                    var new_out_vstate = cljs.core.conj.call(null, out_vstate, reset_due_QMARK_ ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, instant], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ncalls, udt_win_start], null));
                    var new__QMARK_worst_limit_offence = !rate_limited_QMARK_ ? _QMARK_worst_limit_offence : function() {
                      var ms_wait = win_ms - win_ms_elapsed;
                      if (function() {
                        var or__3761__auto__ = _QMARK_worst_limit_offence == null;
                        if (or__3761__auto__) {
                          return or__3761__auto__;
                        } else {
                          var vec__22793 = _QMARK_worst_limit_offence;
                          var max_ms_wait = cljs.core.nth.call(null, vec__22793, 0, null);
                          var ___$1 = cljs.core.nth.call(null, vec__22793, 1, null);
                          return ms_wait > max_ms_wait;
                        }
                      }()) {
                        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ms_wait, _QMARK_spec_id], null);
                      } else {
                        return _QMARK_worst_limit_offence;
                      }
                    }();
                    if (cljs.core.not.call(null, next_in_vspecs)) {
                      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_out_vstate, new__QMARK_worst_limit_offence], null);
                    } else {
                      var G__22797 = next_in_vspecs;
                      var G__22798 = next_in_vstate;
                      var G__22799 = new_out_vstate;
                      var G__22800 = new__QMARK_worst_limit_offence;
                      in_vspecs = G__22797;
                      in_vstate = G__22798;
                      out_vstate = G__22799;
                      _QMARK_worst_limit_offence = G__22800;
                      continue;
                    }
                    break;
                  }
                }();
                var vstate_with_resets = cljs.core.nth.call(null, vec__22787, 0, null);
                var _QMARK_worst_limit_offence = cljs.core.nth.call(null, vec__22787, 1, null);
                var all_limits_pass_QMARK_ = _QMARK_worst_limit_offence == null;
                var new_vstate = !all_limits_pass_QMARK_ ? vstate_with_resets : cljs.core.mapv.call(null, function(vec__22787, vstate_with_resets, _QMARK_worst_limit_offence, all_limits_pass_QMARK_, instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_) {
                  return function(p__22794) {
                    var vec__22795 = p__22794;
                    var ncalls = cljs.core.nth.call(null, vec__22795, 0, null);
                    var udt_win_start = cljs.core.nth.call(null, vec__22795, 1, null);
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ncalls + 1, udt_win_start], null);
                  };
                }(vec__22787, vstate_with_resets, _QMARK_worst_limit_offence, all_limits_pass_QMARK_, instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_), vstate_with_resets);
                var result = function() {
                  var temp__4126__auto__ = _QMARK_worst_limit_offence;
                  if (cljs.core.truth_(temp__4126__auto__)) {
                    var wlo = temp__4126__auto__;
                    if (return_ids_QMARK_) {
                      return wlo;
                    } else {
                      var vec__22796 = wlo;
                      var ms_wait = cljs.core.nth.call(null, vec__22796, 0, null);
                      var ___$1 = cljs.core.nth.call(null, vec__22796, 1, null);
                      return ms_wait;
                    }
                  } else {
                    return null;
                  }
                }();
                return taoensso.encore.swapped.call(null, new_vstate, result);
              }
            };
          }(instant, vec__22782, req_id, vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_));
        };
        var check_rate_limits = function(var_args) {
          var p__22766 = null;
          if (arguments.length > 0) {
            p__22766 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return check_rate_limits__delegate.call(this, p__22766);
        };
        check_rate_limits.cljs$lang$maxFixedArity = 0;
        check_rate_limits.cljs$lang$applyTo = function(arglist__22801) {
          var p__22766 = cljs.core.seq(arglist__22801);
          return check_rate_limits__delegate(p__22766);
        };
        check_rate_limits.cljs$core$IFn$_invoke$arity$variadic = check_rate_limits__delegate;
        return check_rate_limits;
      }();
    }(vspecs, vstates_, max_win_ms, nspecs, nid_specs, _, return_ids_QMARK_);
  }
};
taoensso.encore.rate_limit = function rate_limit(specs, f) {
  var rl = taoensso.encore.rate_limiter_STAR_.call(null, specs);
  return function(rl) {
    return function() {
      var G__22802__delegate = function(args) {
        var temp__4124__auto__ = rl.call(null);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var backoff = temp__4124__auto__;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, backoff], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), null], null);
        }
      };
      var G__22802 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__22802__delegate.call(this, args);
      };
      G__22802.cljs$lang$maxFixedArity = 0;
      G__22802.cljs$lang$applyTo = function(arglist__22803) {
        var args = cljs.core.seq(arglist__22803);
        return G__22802__delegate(args);
      };
      G__22802.cljs$core$IFn$_invoke$arity$variadic = G__22802__delegate;
      return G__22802;
    }();
  }(rl);
};
taoensso.encore.nano_time = function() {
  var temp__4124__auto__ = function() {
    var and__3749__auto__ = typeof window !== "undefined";
    if (and__3749__auto__) {
      return window["performance"];
    } else {
      return and__3749__auto__;
    }
  }();
  if (cljs.core.truth_(temp__4124__auto__)) {
    var perf = temp__4124__auto__;
    var temp__4124__auto____$1 = function() {
      var or__3761__auto__ = perf["now"];
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = perf["mozNow"];
        if (cljs.core.truth_(or__3761__auto____$1)) {
          return or__3761__auto____$1;
        } else {
          var or__3761__auto____$2 = perf["msNow"];
          if (cljs.core.truth_(or__3761__auto____$2)) {
            return or__3761__auto____$2;
          } else {
            var or__3761__auto____$3 = perf["oNow"];
            if (cljs.core.truth_(or__3761__auto____$3)) {
              return or__3761__auto____$3;
            } else {
              return perf["webkitNow"];
            }
          }
        }
      }
    }();
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var f = temp__4124__auto____$1;
      return function(f, temp__4124__auto____$1, perf, temp__4124__auto__) {
        return function() {
          return cljs.core.long$.call(null, 1E6 * f.call(perf));
        };
      }(f, temp__4124__auto____$1, perf, temp__4124__auto__);
    } else {
      return function(temp__4124__auto____$1, perf, temp__4124__auto__) {
        return function() {
          return 1E6 * taoensso.encore.now_udt.call(null);
        };
      }(temp__4124__auto____$1, perf, temp__4124__auto__);
    }
  } else {
    return function(temp__4124__auto__) {
      return function() {
        return 1E6 * taoensso.encore.now_udt.call(null);
      };
    }(temp__4124__auto__);
  }
}();
taoensso.encore.qb_min_times = function qb_min_times(times) {
  return cljs.core.apply.call(null, cljs.core.min, times);
};
taoensso.encore.console_log = function() {
  var temp__4124__auto__ = function() {
    var and__3749__auto__ = typeof console !== "undefined";
    if (and__3749__auto__) {
      return console.log;
    } else {
      return and__3749__auto__;
    }
  }();
  if (cljs.core.truth_(temp__4124__auto__)) {
    var f = temp__4124__auto__;
    return function(f, temp__4124__auto__) {
      return function(xs) {
        return f.apply(console, cljs.core.into_array.call(null, xs));
      };
    }(f, temp__4124__auto__);
  } else {
    return function(temp__4124__auto__) {
      return function(xs) {
        return null;
      };
    }(temp__4124__auto__);
  }
}();
taoensso.encore.log = function() {
  var log__delegate = function(xs) {
    return taoensso.encore.console_log.call(null, xs);
  };
  var log = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, xs);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__22804) {
    var xs = cljs.core.seq(arglist__22804);
    return log__delegate(xs);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
taoensso.encore.logp = function() {
  var logp__delegate = function(xs) {
    return taoensso.encore.console_log.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [taoensso.encore.spaced_str.call(null, xs)], null));
  };
  var logp = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return logp__delegate.call(this, xs);
  };
  logp.cljs$lang$maxFixedArity = 0;
  logp.cljs$lang$applyTo = function(arglist__22805) {
    var xs = cljs.core.seq(arglist__22805);
    return logp__delegate(xs);
  };
  logp.cljs$core$IFn$_invoke$arity$variadic = logp__delegate;
  return logp;
}();
taoensso.encore.logf = function() {
  var logf__delegate = function(fmt, xs) {
    return taoensso.encore.console_log.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [taoensso.encore.format_STAR_.call(null, fmt, xs)], null));
  };
  var logf = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return logf__delegate.call(this, fmt, xs);
  };
  logf.cljs$lang$maxFixedArity = 1;
  logf.cljs$lang$applyTo = function(arglist__22806) {
    var fmt = cljs.core.first(arglist__22806);
    var xs = cljs.core.rest(arglist__22806);
    return logf__delegate(fmt, xs);
  };
  logf.cljs$core$IFn$_invoke$arity$variadic = logf__delegate;
  return logf;
}();
taoensso.encore.sayp = function() {
  var sayp__delegate = function(xs) {
    return alert(taoensso.encore.spaced_str.call(null, xs));
  };
  var sayp = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sayp__delegate.call(this, xs);
  };
  sayp.cljs$lang$maxFixedArity = 0;
  sayp.cljs$lang$applyTo = function(arglist__22807) {
    var xs = cljs.core.seq(arglist__22807);
    return sayp__delegate(xs);
  };
  sayp.cljs$core$IFn$_invoke$arity$variadic = sayp__delegate;
  return sayp;
}();
taoensso.encore.sayf = function() {
  var sayf__delegate = function(fmt, xs) {
    return alert(taoensso.encore.format_STAR_.call(null, fmt, xs));
  };
  var sayf = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sayf__delegate.call(this, fmt, xs);
  };
  sayf.cljs$lang$maxFixedArity = 1;
  sayf.cljs$lang$applyTo = function(arglist__22808) {
    var fmt = cljs.core.first(arglist__22808);
    var xs = cljs.core.rest(arglist__22808);
    return sayf__delegate(fmt, xs);
  };
  sayf.cljs$core$IFn$_invoke$arity$variadic = sayf__delegate;
  return sayf;
}();
taoensso.encore.get_window_location = function get_window_location() {
  var loc_STAR_ = window.location;
  var loc = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "href", "href", -793805698), loc_STAR_.href, new cljs.core.Keyword(null, "protocol", "protocol", 652470118), loc_STAR_.protocol, new cljs.core.Keyword(null, "hostname", "hostname", 2105669933), loc_STAR_.hostname, new cljs.core.Keyword(null, "host", "host", -1558485167), loc_STAR_.host, new cljs.core.Keyword(null, "pathname", "pathname", -1420497528), loc_STAR_.pathname, new cljs.core.Keyword(null, "search", "search", 
  1564939822), loc_STAR_.search, new cljs.core.Keyword(null, "hash", "hash", -13781596), loc_STAR_.hash], null);
  return loc;
};
taoensso.encore.xhr_pool_ = new cljs.core.Delay(function() {
  return new goog.net.XhrIoPool;
}, null);
taoensso.encore.get_pooled_xhr_BANG_ = function get_pooled_xhr_BANG_() {
  var result = cljs.core.deref.call(null, taoensso.encore.xhr_pool_).getObject();
  if (void 0 === result) {
    return null;
  } else {
    return result;
  }
};
taoensso.encore.coerce_xhr_params = function coerce_xhr_params(uri, method, params) {
  if (function() {
    taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function() {
      return params;
    }, null), new cljs.core.Symbol(null, "params", "params", -1943919534, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), cljs.core.nil_QMARK_, cljs.core.map_QMARK_], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "map?", "map?", 
    -1780568534, null)], null));
    return true;
  }()) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "map?", "map?", -1780568534, null)], null), new cljs.core.Symbol(null, "params", "params", -1943919534, 
    null))))].join(""));
  }
  var _QMARK_pstr = cljs.core.empty_QMARK_.call(null, params) ? null : function() {
    var s = goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
    if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
      return null;
    } else {
      return s;
    }
  }();
  var G__22810 = method instanceof cljs.core.Keyword ? method.fqn : null;
  switch(G__22810) {
    case "put":
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, _QMARK_pstr], null);
      break;
    case "post":
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, _QMARK_pstr], null);
      break;
    case "get":
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(_QMARK_pstr) ? [cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(_QMARK_pstr)].join("") : uri, null], null);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(method)].join(""));;
  }
};
taoensso.encore.ajax_lite = function ajax_lite(uri, p__22814, callback) {
  var map__22831 = p__22814;
  var map__22831__$1 = cljs.core.seq_QMARK_.call(null, map__22831) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22831) : map__22831;
  var opts = map__22831__$1;
  var errorf = cljs.core.get.call(null, map__22831__$1, new cljs.core.Keyword(null, "errorf", "errorf", -620376044), taoensso.encore.logf);
  var progress_fn = cljs.core.get.call(null, map__22831__$1, new cljs.core.Keyword(null, "progress-fn", "progress-fn", -1146547855));
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__22831__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var resp_type = cljs.core.get.call(null, map__22831__$1, new cljs.core.Keyword(null, "resp-type", "resp-type", 1050675962), new cljs.core.Keyword(null, "auto", "auto", -566279492));
  var timeout_ms = cljs.core.get.call(null, map__22831__$1, new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), 1E4);
  var headers = cljs.core.get.call(null, map__22831__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var params = cljs.core.get.call(null, map__22831__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var method = cljs.core.get.call(null, map__22831__$1, new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755));
  if (function() {
    taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function(map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method) {
      return function() {
        return timeout_ms;
      };
    }(map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method), null), new cljs.core.Symbol(null, "timeout-ms", "timeout-ms", -1900214363, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), cljs.core.nil_QMARK_, taoensso.encore.nneg_int_QMARK_], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
    "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "nneg-int?", "nneg-int?", 803479360, null)], null));
    return true;
  }()) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "or", "or", 235744169), new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "nneg-int?", "nneg-int?", 803479360, null)], null), new cljs.core.Symbol(null, "timeout-ms", "timeout-ms", 
    -1900214363, null))))].join(""));
  }
  var temp__4124__auto__ = taoensso.encore.get_pooled_xhr_BANG_.call(null);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var xhr = temp__4124__auto__;
    try {
      var timeout_ms__$1 = function() {
        var or__3761__auto__ = (new cljs.core.Keyword(null, "timeout", "timeout", -318625318)).cljs$core$IFn$_invoke$arity$1(opts);
        if (cljs.core.truth_(or__3761__auto__)) {
          return or__3761__auto__;
        } else {
          return timeout_ms;
        }
      }();
      var method_STAR_ = function() {
        var G__22834 = method instanceof cljs.core.Keyword ? method.fqn : null;
        switch(G__22834) {
          case "put":
            return "PUT";
            break;
          case "post":
            return "POST";
            break;
          case "get":
            return "GET";
            break;
          default:
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(method)].join(""));;
        }
      }();
      var params__$1 = taoensso.encore.map_keys.call(null, cljs.core.name, params);
      var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["X-Requested-With", "XMLHTTPRequest"], null), taoensso.encore.map_keys.call(null, cljs.core.name, headers));
      var vec__22833 = taoensso.encore.coerce_xhr_params.call(null, uri, method, params__$1);
      var uri_STAR_ = cljs.core.nth.call(null, vec__22833, 0, null);
      var post_content_STAR_ = cljs.core.nth.call(null, vec__22833, 1, null);
      var headers_STAR_ = cljs.core.clj__GT_js.call(null, cljs.core.not.call(null, post_content_STAR_) ? headers__$1 : cljs.core.assoc.call(null, headers__$1, "Content-Type", "application/x-www-form-urlencoded; charset\x3dUTF-8"));
      var G__22835_22848 = xhr;
      goog.events.listenOnce(G__22835_22848, goog.net.EventType.READY, function(G__22835_22848, timeout_ms__$1, method_STAR_, params__$1, headers__$1, vec__22833, uri_STAR_, post_content_STAR_, headers_STAR_, xhr, temp__4124__auto__, map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method) {
        return function(_) {
          return cljs.core.deref.call(null, taoensso.encore.xhr_pool_).releaseObject(xhr);
        };
      }(G__22835_22848, timeout_ms__$1, method_STAR_, params__$1, headers__$1, vec__22833, uri_STAR_, post_content_STAR_, headers_STAR_, xhr, temp__4124__auto__, map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method));
      goog.events.listenOnce(G__22835_22848, goog.net.EventType.COMPLETE, function(G__22835_22848, timeout_ms__$1, method_STAR_, params__$1, headers__$1, vec__22833, uri_STAR_, post_content_STAR_, headers_STAR_, xhr, temp__4124__auto__, map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method) {
        return function wrapped_callback(resp) {
          var status = xhr.getStatus();
          var success_QMARK_ = xhr.isSuccess();
          var _QMARK_http_status = cljs.core.not_EQ_.call(null, status, -1) ? status : null;
          var _QMARK_content_type = cljs.core.truth_(_QMARK_http_status) ? xhr.getResponseHeader("Content-Type") : null;
          var _QMARK_content = cljs.core.truth_(_QMARK_http_status) ? function() {
            var resp_type__$1 = !cljs.core._EQ_.call(null, resp_type, new cljs.core.Keyword(null, "auto", "auto", -566279492)) ? resp_type : function() {
              var pred__22841 = function(status, success_QMARK_, _QMARK_http_status, _QMARK_content_type, G__22835_22848, timeout_ms__$1, method_STAR_, params__$1, headers__$1, vec__22833, uri_STAR_, post_content_STAR_, headers_STAR_, xhr, temp__4124__auto__, map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method) {
                return function(p1__22813_SHARP_, p2__22812_SHARP_) {
                  return taoensso.encore.str_contains_QMARK_.call(null, p2__22812_SHARP_, p1__22813_SHARP_);
                };
              }(status, success_QMARK_, _QMARK_http_status, _QMARK_content_type, G__22835_22848, timeout_ms__$1, method_STAR_, params__$1, headers__$1, vec__22833, uri_STAR_, post_content_STAR_, headers_STAR_, xhr, temp__4124__auto__, map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method);
              var expr__22842 = [cljs.core.str(_QMARK_content_type)].join("");
              if (pred__22841.call(null, "/edn", expr__22842)) {
                return new cljs.core.Keyword(null, "edn", "edn", 1317840885);
              } else {
                if (pred__22841.call(null, "/json", expr__22842)) {
                  return new cljs.core.Keyword(null, "json", "json", 1279968570);
                } else {
                  if (pred__22841.call(null, "/xml", expr__22842)) {
                    return new cljs.core.Keyword(null, "xml", "xml", -1170142052);
                  } else {
                    if (pred__22841.call(null, "/html", expr__22842)) {
                      return new cljs.core.Keyword(null, "text", "text", -1790561697);
                    } else {
                      return new cljs.core.Keyword(null, "text", "text", -1790561697);
                    }
                  }
                }
              }
            }();
            try {
              var G__22845 = resp_type__$1 instanceof cljs.core.Keyword ? resp_type__$1.fqn : null;
              switch(G__22845) {
                case "edn":
                  return cljs.reader.read_string.call(null, xhr.getResponseText());
                  break;
                case "xml":
                  return xhr.getResponseXml();
                  break;
                case "json":
                  return xhr.getResponseJson();
                  break;
                case "text":
                  return xhr.getResponseText();
                  break;
                default:
                  throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(resp_type__$1)].join(""));;
              }
            } catch (e22844) {
              if (e22844 instanceof Error) {
                var e = e22844;
                return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("ajax", "bad-response-type", "ajax/bad-response-type", 789441015), resp_type__$1, new cljs.core.Keyword("ajax", "resp-as-text", "ajax/resp-as-text", 141416819), xhr.getResponseText()], null);
              } else {
                throw e22844;
              }
            }
          }() : null;
          var cb_arg = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "raw-resp", "raw-resp", -1924342506), resp, new cljs.core.Keyword(null, "xhr", "xhr", -177710851), xhr, new cljs.core.Keyword(null, "success?", "success?", -122854052), success_QMARK_, new cljs.core.Keyword(null, "?content-type", "?content-type", -2129759049), cljs.core.truth_(_QMARK_http_status) ? _QMARK_content_type : null, new cljs.core.Keyword(null, "?content", "?content", 1697782054), _QMARK_content, 
          new cljs.core.Keyword(null, "?status", "?status", 938730360), _QMARK_http_status, new cljs.core.Keyword(null, "?error", "?error", 1070752222), function() {
            var or__3761__auto__ = cljs.core.truth_(_QMARK_http_status) ? function() {
              var n = _QMARK_http_status;
              if (cljs.core.truth_(success_QMARK_)) {
                return null;
              } else {
                return _QMARK_http_status;
              }
            }() : cljs.core.get.call(null, new cljs.core.PersistentArrayMap.fromArray([goog.net.ErrorCode.EXCEPTION, new cljs.core.Keyword(null, "exception", "exception", -335277064), goog.net.ErrorCode.HTTP_ERROR, new cljs.core.Keyword(null, "http-error", "http-error", -1040049553), goog.net.ErrorCode.ABORT, new cljs.core.Keyword(null, "abort", "abort", 521193198), goog.net.ErrorCode.TIMEOUT, new cljs.core.Keyword(null, "timeout", "timeout", -318625318)], true, false), xhr.getLastErrorCode(), new cljs.core.Keyword(null, 
            "unknown", "unknown", -935977881));
            if (cljs.core.truth_(or__3761__auto__)) {
              return or__3761__auto__;
            } else {
              if (_QMARK_content == null && cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [204, null, 1223, null], null), null)).call(null, _QMARK_http_status))) {
                return new cljs.core.Keyword(null, "no-content", "no-content", -1860206018);
              } else {
                return null;
              }
            }
          }()], null);
          return callback.call(null, cb_arg);
        };
      }(G__22835_22848, timeout_ms__$1, method_STAR_, params__$1, headers__$1, vec__22833, uri_STAR_, post_content_STAR_, headers_STAR_, xhr, temp__4124__auto__, map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method));
      var temp__4126__auto___22850 = progress_fn;
      if (cljs.core.truth_(temp__4126__auto___22850)) {
        var pf_22851 = temp__4126__auto___22850;
        goog.events.listen(xhr, goog.net.EventType.PROGRESS, function(pf_22851, temp__4126__auto___22850, timeout_ms__$1, method_STAR_, params__$1, headers__$1, vec__22833, uri_STAR_, post_content_STAR_, headers_STAR_, xhr, temp__4124__auto__, map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method) {
          return function(ev) {
            var length_computable_QMARK_ = ev.lengthComputable;
            var loaded = ev.loaded;
            var total = ev.total;
            var _QMARK_ratio = cljs.core.truth_(function() {
              var and__3749__auto__ = length_computable_QMARK_;
              if (cljs.core.truth_(and__3749__auto__)) {
                return cljs.core.not_EQ_.call(null, total, 0);
              } else {
                return and__3749__auto__;
              }
            }()) ? loaded / total : null;
            return pf_22851.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "?ratio", "?ratio", -1275760831), _QMARK_ratio, new cljs.core.Keyword(null, "length-computable?", "length-computable?", 1915473276), length_computable_QMARK_, new cljs.core.Keyword(null, "loaded", "loaded", -1246482293), loaded, new cljs.core.Keyword(null, "total", "total", 1916810418), total, new cljs.core.Keyword(null, "ev", "ev", -406827324), ev], null));
          };
        }(pf_22851, temp__4126__auto___22850, timeout_ms__$1, method_STAR_, params__$1, headers__$1, vec__22833, uri_STAR_, post_content_STAR_, headers_STAR_, xhr, temp__4124__auto__, map__22831, map__22831__$1, opts, errorf, progress_fn, with_credentials_QMARK_, resp_type, timeout_ms, headers, params, method));
      } else {
      }
      var G__22846_22852 = xhr;
      var temp__4126__auto___22853 = new cljs.core.Keyword(null, "always", "always", -1772028770);
      if (cljs.core.truth_(temp__4126__auto___22853)) {
        var x_22854 = temp__4126__auto___22853;
        G__22846_22852.setTimeoutInterval(function() {
          var or__3761__auto__ = timeout_ms__$1;
          if (cljs.core.truth_(or__3761__auto__)) {
            return or__3761__auto__;
          } else {
            return 0;
          }
        }());
      } else {
      }
      var temp__4126__auto___22855 = with_credentials_QMARK_;
      if (cljs.core.truth_(temp__4126__auto___22855)) {
        var x_22856 = temp__4126__auto___22855;
        G__22846_22852.setWithCredentials(true);
      } else {
      }
      var temp__4126__auto___22857 = new cljs.core.Keyword(null, "always", "always", -1772028770);
      if (cljs.core.truth_(temp__4126__auto___22857)) {
        var x_22858 = temp__4126__auto___22857;
        G__22846_22852.send(uri_STAR_, method_STAR_, post_content_STAR_, headers_STAR_);
      } else {
      }
      return xhr;
    } catch (e22832) {
      if (e22832 instanceof Error) {
        var e = e22832;
        cljs.core.deref.call(null, taoensso.encore.xhr_pool_).releaseObject(xhr);
        return null;
      } else {
        throw e22832;
      }
    }
  } else {
    callback.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "?error", "?error", 1070752222), new cljs.core.Keyword(null, "xhr-pool-depleted", "xhr-pool-depleted", -1812092376)], null));
    return null;
  }
};
taoensso.encore.url_encode = function url_encode(s) {
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, clojure.string.replace.call(null, encodeURIComponent([cljs.core.str(s)].join(""), s), "*", "%2A"), "'", "%27");
  } else {
    return null;
  }
};
taoensso.encore.url_decode = function() {
  var url_decode__delegate = function(s, p__22859) {
    var vec__22861 = p__22859;
    var encoding = cljs.core.nth.call(null, vec__22861, 0, null);
    if (cljs.core.truth_(s)) {
      return decodeURIComponent(s);
    } else {
      return null;
    }
  };
  var url_decode = function(s, var_args) {
    var p__22859 = null;
    if (arguments.length > 1) {
      p__22859 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return url_decode__delegate.call(this, s, p__22859);
  };
  url_decode.cljs$lang$maxFixedArity = 1;
  url_decode.cljs$lang$applyTo = function(arglist__22862) {
    var s = cljs.core.first(arglist__22862);
    var p__22859 = cljs.core.rest(arglist__22862);
    return url_decode__delegate(s, p__22859);
  };
  url_decode.cljs$core$IFn$_invoke$arity$variadic = url_decode__delegate;
  return url_decode;
}();
taoensso.encore.format_query_string = function format_query_string(m) {
  var param = function(k, v) {
    return[cljs.core.str(taoensso.encore.url_encode.call(null, cljs.core.name.call(null, k))), cljs.core.str("\x3d"), cljs.core.str(taoensso.encore.url_encode.call(null, v))].join("");
  };
  var join = function(param) {
    return function(strs) {
      return clojure.string.join.call(null, "\x26", strs);
    };
  }(param);
  if (cljs.core.empty_QMARK_.call(null, m)) {
    return null;
  } else {
    return join.call(null, function() {
      var iter__4512__auto__ = function(param, join) {
        return function iter__22871(s__22872) {
          return new cljs.core.LazySeq(null, function(param, join) {
            return function() {
              var s__22872__$1 = s__22872;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__22872__$1);
                if (temp__4126__auto__) {
                  var s__22872__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__22872__$2)) {
                    var c__4510__auto__ = cljs.core.chunk_first.call(null, s__22872__$2);
                    var size__4511__auto__ = cljs.core.count.call(null, c__4510__auto__);
                    var b__22874 = cljs.core.chunk_buffer.call(null, size__4511__auto__);
                    if (function() {
                      var i__22873 = 0;
                      while (true) {
                        if (i__22873 < size__4511__auto__) {
                          var vec__22877 = cljs.core._nth.call(null, c__4510__auto__, i__22873);
                          var k = cljs.core.nth.call(null, vec__22877, 0, null);
                          var v = cljs.core.nth.call(null, vec__22877, 1, null);
                          cljs.core.chunk_append.call(null, b__22874, cljs.core.sequential_QMARK_.call(null, v) ? join.call(null, cljs.core.mapv.call(null, cljs.core.partial.call(null, param, k), function() {
                            var or__3761__auto__ = cljs.core.seq.call(null, v);
                            if (or__3761__auto__) {
                              return or__3761__auto__;
                            } else {
                              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [""], null);
                            }
                          }())) : param.call(null, k, v));
                          var G__22879 = i__22873 + 1;
                          i__22873 = G__22879;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22874), iter__22871.call(null, cljs.core.chunk_rest.call(null, s__22872__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22874), null);
                    }
                  } else {
                    var vec__22878 = cljs.core.first.call(null, s__22872__$2);
                    var k = cljs.core.nth.call(null, vec__22878, 0, null);
                    var v = cljs.core.nth.call(null, vec__22878, 1, null);
                    return cljs.core.cons.call(null, cljs.core.sequential_QMARK_.call(null, v) ? join.call(null, cljs.core.mapv.call(null, cljs.core.partial.call(null, param, k), function() {
                      var or__3761__auto__ = cljs.core.seq.call(null, v);
                      if (or__3761__auto__) {
                        return or__3761__auto__;
                      } else {
                        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [""], null);
                      }
                    }())) : param.call(null, k, v), iter__22871.call(null, cljs.core.rest.call(null, s__22872__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(param, join), null, null);
        };
      }(param, join);
      return iter__4512__auto__.call(null, m);
    }());
  }
};
taoensso.encore.assoc_conj = function assoc_conj(m, k, v) {
  return cljs.core.assoc.call(null, m, k, function() {
    var temp__4124__auto__ = cljs.core.get.call(null, m, k);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var cur = temp__4124__auto__;
      if (cljs.core.vector_QMARK_.call(null, cur)) {
        return cljs.core.conj.call(null, cur, v);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cur, v], null);
      }
    } else {
      return v;
    }
  }());
};
taoensso.encore.parse_query_params = function() {
  var parse_query_params__delegate = function(s, p__22880) {
    var vec__22883 = p__22880;
    var keywordize_QMARK_ = cljs.core.nth.call(null, vec__22883, 0, null);
    var encoding = cljs.core.nth.call(null, vec__22883, 1, null);
    var _PERCENT_ = cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s)) ? cljs.core.PersistentArrayMap.EMPTY : function() {
      var s__$1 = taoensso.encore.str_starts_with_QMARK_.call(null, s, "?") ? taoensso.encore.substr.call(null, s, 1) : s;
      if (!taoensso.encore.str_contains_QMARK_.call(null, s__$1, "\x3d")) {
        return cljs.core.PersistentArrayMap.EMPTY;
      } else {
        var m = cljs.core.reduce.call(null, function(s__$1, vec__22883, keywordize_QMARK_, encoding) {
          return function(m, param) {
            var temp__4124__auto__ = clojure.string.split.call(null, param, /=/, 2);
            if (cljs.core.truth_(temp__4124__auto__)) {
              var vec__22884 = temp__4124__auto__;
              var k = cljs.core.nth.call(null, vec__22884, 0, null);
              var v = cljs.core.nth.call(null, vec__22884, 1, null);
              return taoensso.encore.assoc_conj.call(null, m, taoensso.encore.url_decode.call(null, k, encoding), taoensso.encore.url_decode.call(null, v, encoding));
            } else {
              return m;
            }
          };
        }(s__$1, vec__22883, keywordize_QMARK_, encoding), cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, s__$1, /&/));
        if (cljs.core.not.call(null, keywordize_QMARK_)) {
          return m;
        } else {
          return taoensso.encore.keywordize_map.call(null, m);
        }
      }
    }();
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.encore", null, new cljs.core.Delay(function(_PERCENT_, vec__22883, keywordize_QMARK_, encoding) {
        return function() {
          return _PERCENT_;
        };
      }(_PERCENT_, vec__22883, keywordize_QMARK_, encoding), null), new cljs.core.Symbol(null, "%", "%", -950237169, null), cljs.core.map_QMARK_, new cljs.core.Symbol(null, "map?", "map?", -1780568534, null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "%", "%", -950237169, null))))].join(""));
    }
    return _PERCENT_;
  };
  var parse_query_params = function(s, var_args) {
    var p__22880 = null;
    if (arguments.length > 1) {
      p__22880 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return parse_query_params__delegate.call(this, s, p__22880);
  };
  parse_query_params.cljs$lang$maxFixedArity = 1;
  parse_query_params.cljs$lang$applyTo = function(arglist__22885) {
    var s = cljs.core.first(arglist__22885);
    var p__22880 = cljs.core.rest(arglist__22885);
    return parse_query_params__delegate(s, p__22880);
  };
  parse_query_params.cljs$core$IFn$_invoke$arity$variadic = parse_query_params__delegate;
  return parse_query_params;
}();
taoensso.encore.merge_url_with_query_string = function merge_url_with_query_string(url, m) {
  var vec__22887 = clojure.string.split.call(null, [cljs.core.str(url)].join(""), /\?/, 2);
  var url__$1 = cljs.core.nth.call(null, vec__22887, 0, null);
  var _QMARK_qstr = cljs.core.nth.call(null, vec__22887, 1, null);
  var qmap = cljs.core.merge.call(null, cljs.core.truth_(_QMARK_qstr) ? taoensso.encore.keywordize_map.call(null, taoensso.encore.parse_query_params.call(null, _QMARK_qstr)) : null, taoensso.encore.keywordize_map.call(null, m));
  return[cljs.core.str(url__$1), cljs.core.str(function() {
    var temp__4126__auto__ = taoensso.encore.format_query_string.call(null, qmap);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var qstr = temp__4126__auto__;
      return[cljs.core.str("?"), cljs.core.str(qstr)].join("");
    } else {
      return null;
    }
  }())].join("");
};
taoensso.encore.memoize_1 = taoensso.encore.memoize1;
taoensso.encore.logging_level = cljs.core.atom.call(null, new cljs.core.Keyword(null, "debug", "debug", -1608172596));
taoensso.encore.set_exp_backoff_timeout_BANG_ = function() {
  var set_exp_backoff_timeout_BANG___delegate = function(nullary_f, p__22888) {
    var vec__22890 = p__22888;
    var nattempt = cljs.core.nth.call(null, vec__22890, 0, null);
    return window.setTimeout(nullary_f, taoensso.encore.exp_backoff.call(null, function() {
      var or__3761__auto__ = nattempt;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 0;
      }
    }()));
  };
  var set_exp_backoff_timeout_BANG_ = function(nullary_f, var_args) {
    var p__22888 = null;
    if (arguments.length > 1) {
      p__22888 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_exp_backoff_timeout_BANG___delegate.call(this, nullary_f, p__22888);
  };
  set_exp_backoff_timeout_BANG_.cljs$lang$maxFixedArity = 1;
  set_exp_backoff_timeout_BANG_.cljs$lang$applyTo = function(arglist__22891) {
    var nullary_f = cljs.core.first(arglist__22891);
    var p__22888 = cljs.core.rest(arglist__22891);
    return set_exp_backoff_timeout_BANG___delegate(nullary_f, p__22888);
  };
  set_exp_backoff_timeout_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_exp_backoff_timeout_BANG___delegate;
  return set_exp_backoff_timeout_BANG_;
}();
taoensso.encore.keys_EQ_ = function keys_EQ_(m, ks) {
  return taoensso.encore.ks_EQ_.call(null, ks, m);
};
taoensso.encore.keys_LT__EQ_ = function keys_LT__EQ_(m, ks) {
  return taoensso.encore.ks_LT__EQ_.call(null, ks, m);
};
taoensso.encore.keys_GT__EQ_ = function keys_GT__EQ_(m, ks) {
  return taoensso.encore.ks_GT__EQ_.call(null, ks, m);
};
taoensso.encore.keys_EQ_nnil_QMARK_ = function keys_EQ_nnil_QMARK_(m, ks) {
  return taoensso.encore.ks_nnil_QMARK_.call(null, ks, m);
};
taoensso.encore.parse_bool = taoensso.encore.as__QMARK_bool;
taoensso.encore.parse_int = taoensso.encore.as__QMARK_int;
taoensso.encore.parse_float = taoensso.encore.as__QMARK_float;
taoensso.encore.as_bool = function as_bool(x) {
  if (cljs.core.truth_(x)) {
    return taoensso.encore.hcond.call(null, false, "taoensso.encore", 2191, new cljs.core.Delay(function() {
      return taoensso.encore.as__QMARK_bool.call(null, x);
    }, null), cljs.core.list(new cljs.core.Symbol(null, "as-?bool", "as-?bool", 1645711161, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), taoensso.encore.nnil_QMARK_, new cljs.core.Symbol("taoensso.encore", "nnil?", "taoensso.encore/nnil?", -1813154343, null));
  } else {
    return null;
  }
};
taoensso.encore.as_int = function as_int(x) {
  if (cljs.core.truth_(x)) {
    return taoensso.encore.hcond.call(null, false, "taoensso.encore", 2192, new cljs.core.Delay(function() {
      return taoensso.encore.as__QMARK_int.call(null, x);
    }, null), cljs.core.list(new cljs.core.Symbol(null, "as-?int", "as-?int", 2107097360, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), taoensso.encore.nnil_QMARK_, new cljs.core.Symbol("taoensso.encore", "nnil?", "taoensso.encore/nnil?", -1813154343, null));
  } else {
    return null;
  }
};
taoensso.encore.as_float = function as_float(x) {
  if (cljs.core.truth_(x)) {
    return taoensso.encore.hcond.call(null, false, "taoensso.encore", 2193, new cljs.core.Delay(function() {
      return taoensso.encore.as__QMARK_float.call(null, x);
    }, null), cljs.core.list(new cljs.core.Symbol(null, "as-?float", "as-?float", 2124831706, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), taoensso.encore.nnil_QMARK_, new cljs.core.Symbol("taoensso.encore", "nnil?", "taoensso.encore/nnil?", -1813154343, null));
  } else {
    return null;
  }
};
taoensso.encore.merge_deep_with = taoensso.encore.nested_merge_with;
taoensso.encore.merge_deep = taoensso.encore.nested_merge;
taoensso.encore.rate_limiter = function rate_limiter(ncalls_limit, window_ms) {
  return taoensso.encore.rate_limiter_STAR_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ncalls_limit, window_ms], null)], null));
};
taoensso.encore.rate_limited = function rate_limited(ncalls_limit, window_ms, f) {
  var rl = taoensso.encore.rate_limiter_STAR_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ncalls_limit, window_ms], null)], null));
  return function(rl) {
    return function() {
      var G__22892__delegate = function(args) {
        var temp__4124__auto__ = rl.call(null);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var backoff_ms = temp__4124__auto__;
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "backoff-ms", "backoff-ms", 1679281507), backoff_ms], null);
        } else {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "result", "result", 1415092211), f.call(null)], null);
        }
      };
      var G__22892 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__22892__delegate.call(this, args);
      };
      G__22892.cljs$lang$maxFixedArity = 0;
      G__22892.cljs$lang$applyTo = function(arglist__22893) {
        var args = cljs.core.seq(arglist__22893);
        return G__22892__delegate(args);
      };
      G__22892.cljs$core$IFn$_invoke$arity$variadic = G__22892__delegate;
      return G__22892;
    }();
  }(rl);
};
if (typeof taoensso.encore._STAR_log_level_STAR_ !== "undefined") {
} else {
  taoensso.encore._STAR_log_level_STAR_ = new cljs.core.Keyword(null, "debug", "debug", -1608172596);
}
taoensso.encore.log_QMARK_ = function() {
  var __GT_n = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "trace", "trace", -1082747415), 1, new cljs.core.Keyword(null, "debug", "debug", -1608172596), 2, new cljs.core.Keyword(null, "info", "info", -317069002), 3, new cljs.core.Keyword(null, "warn", "warn", -436710552), 4, new cljs.core.Keyword(null, "error", "error", -978969032), 5, new cljs.core.Keyword(null, "fatal", "fatal", 1874419888), 6, new cljs.core.Keyword(null, "report", "report", 1394055010), 7], null);
  return function(__GT_n) {
    return function(level) {
      return __GT_n.call(null, level) >= __GT_n.call(null, taoensso.encore._STAR_log_level_STAR_);
    };
  }(__GT_n);
}();
taoensso.encore.tracef = function() {
  var tracef__delegate = function(fmt, xs) {
    if (cljs.core.truth_(taoensso.encore.log_QMARK_.call(null, new cljs.core.Keyword(null, "trace", "trace", -1082747415)))) {
      return cljs.core.apply.call(null, taoensso.encore.logf, fmt, xs);
    } else {
      return null;
    }
  };
  var tracef = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tracef__delegate.call(this, fmt, xs);
  };
  tracef.cljs$lang$maxFixedArity = 1;
  tracef.cljs$lang$applyTo = function(arglist__22894) {
    var fmt = cljs.core.first(arglist__22894);
    var xs = cljs.core.rest(arglist__22894);
    return tracef__delegate(fmt, xs);
  };
  tracef.cljs$core$IFn$_invoke$arity$variadic = tracef__delegate;
  return tracef;
}();
taoensso.encore.debugf = function() {
  var debugf__delegate = function(fmt, xs) {
    if (cljs.core.truth_(taoensso.encore.log_QMARK_.call(null, new cljs.core.Keyword(null, "debug", "debug", -1608172596)))) {
      return cljs.core.apply.call(null, taoensso.encore.logf, fmt, xs);
    } else {
      return null;
    }
  };
  var debugf = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return debugf__delegate.call(this, fmt, xs);
  };
  debugf.cljs$lang$maxFixedArity = 1;
  debugf.cljs$lang$applyTo = function(arglist__22895) {
    var fmt = cljs.core.first(arglist__22895);
    var xs = cljs.core.rest(arglist__22895);
    return debugf__delegate(fmt, xs);
  };
  debugf.cljs$core$IFn$_invoke$arity$variadic = debugf__delegate;
  return debugf;
}();
taoensso.encore.infof = function() {
  var infof__delegate = function(fmt, xs) {
    if (cljs.core.truth_(taoensso.encore.log_QMARK_.call(null, new cljs.core.Keyword(null, "info", "info", -317069002)))) {
      return cljs.core.apply.call(null, taoensso.encore.logf, fmt, xs);
    } else {
      return null;
    }
  };
  var infof = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return infof__delegate.call(this, fmt, xs);
  };
  infof.cljs$lang$maxFixedArity = 1;
  infof.cljs$lang$applyTo = function(arglist__22896) {
    var fmt = cljs.core.first(arglist__22896);
    var xs = cljs.core.rest(arglist__22896);
    return infof__delegate(fmt, xs);
  };
  infof.cljs$core$IFn$_invoke$arity$variadic = infof__delegate;
  return infof;
}();
taoensso.encore.warnf = function() {
  var warnf__delegate = function(fmt, xs) {
    if (cljs.core.truth_(taoensso.encore.log_QMARK_.call(null, new cljs.core.Keyword(null, "warn", "warn", -436710552)))) {
      return cljs.core.apply.call(null, taoensso.encore.logf, [cljs.core.str("WARN: "), cljs.core.str(fmt)].join(""), xs);
    } else {
      return null;
    }
  };
  var warnf = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return warnf__delegate.call(this, fmt, xs);
  };
  warnf.cljs$lang$maxFixedArity = 1;
  warnf.cljs$lang$applyTo = function(arglist__22897) {
    var fmt = cljs.core.first(arglist__22897);
    var xs = cljs.core.rest(arglist__22897);
    return warnf__delegate(fmt, xs);
  };
  warnf.cljs$core$IFn$_invoke$arity$variadic = warnf__delegate;
  return warnf;
}();
taoensso.encore.errorf = function() {
  var errorf__delegate = function(fmt, xs) {
    if (cljs.core.truth_(taoensso.encore.log_QMARK_.call(null, new cljs.core.Keyword(null, "error", "error", -978969032)))) {
      return cljs.core.apply.call(null, taoensso.encore.logf, [cljs.core.str("ERROR: "), cljs.core.str(fmt)].join(""), xs);
    } else {
      return null;
    }
  };
  var errorf = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return errorf__delegate.call(this, fmt, xs);
  };
  errorf.cljs$lang$maxFixedArity = 1;
  errorf.cljs$lang$applyTo = function(arglist__22898) {
    var fmt = cljs.core.first(arglist__22898);
    var xs = cljs.core.rest(arglist__22898);
    return errorf__delegate(fmt, xs);
  };
  errorf.cljs$core$IFn$_invoke$arity$variadic = errorf__delegate;
  return errorf;
}();
taoensso.encore.fatalf = function() {
  var fatalf__delegate = function(fmt, xs) {
    if (cljs.core.truth_(taoensso.encore.log_QMARK_.call(null, new cljs.core.Keyword(null, "fatal", "fatal", 1874419888)))) {
      return cljs.core.apply.call(null, taoensso.encore.logf, [cljs.core.str("FATAL: "), cljs.core.str(fmt)].join(""), xs);
    } else {
      return null;
    }
  };
  var fatalf = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fatalf__delegate.call(this, fmt, xs);
  };
  fatalf.cljs$lang$maxFixedArity = 1;
  fatalf.cljs$lang$applyTo = function(arglist__22899) {
    var fmt = cljs.core.first(arglist__22899);
    var xs = cljs.core.rest(arglist__22899);
    return fatalf__delegate(fmt, xs);
  };
  fatalf.cljs$core$IFn$_invoke$arity$variadic = fatalf__delegate;
  return fatalf;
}();
taoensso.encore.reportf = function() {
  var reportf__delegate = function(fmt, xs) {
    if (cljs.core.truth_(taoensso.encore.log_QMARK_.call(null, new cljs.core.Keyword(null, "report", "report", 1394055010)))) {
      return cljs.core.apply.call(null, taoensso.encore.logf, fmt, xs);
    } else {
      return null;
    }
  };
  var reportf = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reportf__delegate.call(this, fmt, xs);
  };
  reportf.cljs$lang$maxFixedArity = 1;
  reportf.cljs$lang$applyTo = function(arglist__22900) {
    var fmt = cljs.core.first(arglist__22900);
    var xs = cljs.core.rest(arglist__22900);
    return reportf__delegate(fmt, xs);
  };
  reportf.cljs$core$IFn$_invoke$arity$variadic = reportf__delegate;
  return reportf;
}();
goog.provide("taoensso.sente");
goog.require("cljs.core");
goog.require("taoensso.encore");
goog.require("cljs.core.async");
goog.require("taoensso.sente.interfaces");
goog.require("taoensso.sente.interfaces");
goog.require("taoensso.encore");
goog.require("taoensso.encore");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("clojure.string");
goog.require("clojure.string");
taoensso.sente.set_logging_level_BANG_ = function set_logging_level_BANG_(level) {
  return taoensso.encore._STAR_log_level_STAR_ = level;
};
taoensso.sente.ajax_call = taoensso.encore.ajax_lite;
taoensso.sente.validate_event = function validate_event(x) {
  if (!cljs.core.vector_QMARK_.call(null, x)) {
    return new cljs.core.Keyword(null, "wrong-type", "wrong-type", 929556915);
  } else {
    if (cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [1, null, 2, null], null), null)).call(null, cljs.core.count.call(null, x)))) {
      return new cljs.core.Keyword(null, "wrong-length", "wrong-length", 1367572281);
    } else {
      var vec__21936 = x;
      var ev_id = cljs.core.nth.call(null, vec__21936, 0, null);
      var _ = cljs.core.nth.call(null, vec__21936, 1, null);
      if (!(ev_id instanceof cljs.core.Keyword)) {
        return new cljs.core.Keyword(null, "wrong-id-type", "wrong-id-type", -1213601689);
      } else {
        if (cljs.core.not.call(null, cljs.core.namespace.call(null, ev_id))) {
          return new cljs.core.Keyword(null, "unnamespaced-id", "unnamespaced-id", 1976189772);
        } else {
          return null;
        }
      }
    }
  }
};
taoensso.sente.event_QMARK_ = function event_QMARK_(x) {
  return taoensso.sente.validate_event.call(null, x) == null;
};
taoensso.sente.as_event = function as_event(x) {
  if (taoensso.sente.event_QMARK_.call(null, x)) {
    return x;
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("chsk", "bad-event", "chsk/bad-event", -565206930), x], null);
  }
};
taoensso.sente.assert_event = function assert_event(x) {
  var temp__4126__auto__ = taoensso.sente.validate_event.call(null, x);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var _QMARK_err = temp__4126__auto__;
    var err_fmt = [cljs.core.str(function() {
      var G__21938 = _QMARK_err instanceof cljs.core.Keyword ? _QMARK_err.fqn : null;
      switch(G__21938) {
        case "else":
          return "Malformed event (unknown error).";
          break;
        case "unnamespaced-id":
          return "Malformed event (`ev-id` should be a namespaced keyword).";
          break;
        case "wrong-id-type":
          return "Malformed event (`ev-id` should be a namespaced keyword).";
          break;
        case "wrong-length":
          return "Malformed event (wrong length).";
          break;
        case "wrong-type":
          return "Malformed event (wrong type).";
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(_QMARK_err)].join(""));;
      }
    }()), cljs.core.str(" Event should be of `[ev-id ?ev-data]` form: %s")].join("");
    throw cljs.core.ex_info.call(null, taoensso.encore.format.call(null, err_fmt, [cljs.core.str(x)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "malformed-event", "malformed-event", -2090896605), x], null));
  } else {
    return null;
  }
};
taoensso.sente.event_msg_QMARK_ = function event_msg_QMARK_(x) {
  var and__3749__auto__ = cljs.core.map_QMARK_.call(null, x);
  if (and__3749__auto__) {
    var and__3749__auto____$1 = taoensso.encore.keys_EQ_.call(null, x, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "ch-recv", "ch-recv", -990916861), null, new cljs.core.Keyword(null, "state", "state", -1988618099), null, new cljs.core.Keyword(null, "event", "event", 301435442), null, new cljs.core.Keyword(null, "id", "id", -1388402092), null, new cljs.core.Keyword(null, "?data", "?data", -9471433), null, new cljs.core.Keyword(null, 
    "send-fn", "send-fn", 351002041), null], null), null));
    if (and__3749__auto____$1) {
      var map__21945 = x;
      var map__21945__$1 = cljs.core.seq_QMARK_.call(null, map__21945) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21945) : map__21945;
      var event = cljs.core.get.call(null, map__21945__$1, new cljs.core.Keyword(null, "event", "event", 301435442));
      var state = cljs.core.get.call(null, map__21945__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
      var send_fn = cljs.core.get.call(null, map__21945__$1, new cljs.core.Keyword(null, "send-fn", "send-fn", 351002041));
      var ch_recv = cljs.core.get.call(null, map__21945__$1, new cljs.core.Keyword(null, "ch-recv", "ch-recv", -990916861));
      return taoensso.encore.chan_QMARK_.call(null, ch_recv) && cljs.core.ifn_QMARK_.call(null, send_fn) && taoensso.encore.atom_QMARK_.call(null, state) && taoensso.sente.event_QMARK_.call(null, event);
    } else {
      return and__3749__auto____$1;
    }
  } else {
    return and__3749__auto__;
  }
};
taoensso.sente.cb_success_QMARK_ = function cb_success_QMARK_(cb_reply_clj) {
  return cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("chsk", "closed", "chsk/closed", -922855264), null, new cljs.core.Keyword("chsk", "error", "chsk/error", -984175439), null, new cljs.core.Keyword("chsk", "timeout", "chsk/timeout", -319776489), null], null), null)).call(null, cb_reply_clj));
};
taoensso.sente.unpack_STAR_ = function unpack_STAR_(packer, pstr) {
  try {
    return taoensso.sente.interfaces.unpack.call(null, packer, taoensso.encore.hcond.call(null, false, "taoensso.sente", 215, new cljs.core.Delay(function() {
      return pstr;
    }, null), new cljs.core.Symbol(null, "pstr", "pstr", 221763868, null), cljs.core.string_QMARK_, new cljs.core.Symbol(null, "string?", "string?", -1129175764, null)));
  } catch (e21947) {
    var t = e21947;
    taoensso.encore.debugf.call(null, "Bad package: %s (%s)", pstr, t);
    throw t;
  }
};
taoensso.sente.with__QMARK_meta = function with__QMARK_meta(x, _QMARK_m) {
  if (cljs.core.seq.call(null, _QMARK_m)) {
    return cljs.core.with_meta.call(null, x, _QMARK_m);
  } else {
    return x;
  }
};
taoensso.sente.pack_STAR_ = function() {
  var pack_STAR_ = null;
  var pack_STAR___3 = function(packer, _QMARK_packer_meta, clj) {
    return[cljs.core.str("-"), cljs.core.str(taoensso.sente.interfaces.pack.call(null, packer, taoensso.sente.with__QMARK_meta.call(null, clj, _QMARK_packer_meta)))].join("");
  };
  var pack_STAR___4 = function(packer, _QMARK_packer_meta, clj, _QMARK_cb_uuid) {
    var _QMARK_cb_uuid__$1 = cljs.core._EQ_.call(null, _QMARK_cb_uuid, new cljs.core.Keyword(null, "ajax-cb", "ajax-cb", -807060321)) ? 0 : _QMARK_cb_uuid;
    var wrapped_clj = cljs.core.truth_(_QMARK_cb_uuid__$1) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clj, _QMARK_cb_uuid__$1], null) : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [clj], null);
    return[cljs.core.str("+"), cljs.core.str(taoensso.sente.interfaces.pack.call(null, packer, taoensso.sente.with__QMARK_meta.call(null, wrapped_clj, _QMARK_packer_meta)))].join("");
  };
  pack_STAR_ = function(packer, _QMARK_packer_meta, clj, _QMARK_cb_uuid) {
    switch(arguments.length) {
      case 3:
        return pack_STAR___3.call(this, packer, _QMARK_packer_meta, clj);
      case 4:
        return pack_STAR___4.call(this, packer, _QMARK_packer_meta, clj, _QMARK_cb_uuid);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pack_STAR_.cljs$core$IFn$_invoke$arity$3 = pack_STAR___3;
  pack_STAR_.cljs$core$IFn$_invoke$arity$4 = pack_STAR___4;
  return pack_STAR_;
}();
taoensso.sente.pack = function() {
  var pack__delegate = function(args) {
    var pstr = cljs.core.apply.call(null, taoensso.sente.pack_STAR_, args);
    taoensso.encore.tracef.call(null, "Packing: %s -\x3e %s", args, pstr);
    return pstr;
  };
  var pack = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pack__delegate.call(this, args);
  };
  pack.cljs$lang$maxFixedArity = 0;
  pack.cljs$lang$applyTo = function(arglist__21948) {
    var args = cljs.core.seq(arglist__21948);
    return pack__delegate(args);
  };
  pack.cljs$core$IFn$_invoke$arity$variadic = pack__delegate;
  return pack;
}();
taoensso.sente.unpack = function unpack(packer, prefixed_pstr) {
  taoensso.encore.hcond.call(null, false, "taoensso.sente", null, new cljs.core.Delay(function() {
    return prefixed_pstr;
  }, null), new cljs.core.Symbol(null, "prefixed-pstr", "prefixed-pstr", -515747107, null), cljs.core.string_QMARK_, new cljs.core.Symbol(null, "string?", "string?", -1129175764, null));
  var prefix = taoensso.encore.substr.call(null, prefixed_pstr, 0, 1);
  var pstr = taoensso.encore.substr.call(null, prefixed_pstr, 1);
  var clj = taoensso.sente.unpack_STAR_.call(null, packer, pstr);
  var wrapped_QMARK_ = function() {
    var G__21952 = prefix;
    switch(G__21952) {
      case "-":
        return false;
        break;
      case "+":
        return true;
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(prefix)].join(""));;
    }
  }();
  var vec__21951 = cljs.core.truth_(wrapped_QMARK_) ? clj : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clj, null], null);
  var clj__$1 = cljs.core.nth.call(null, vec__21951, 0, null);
  var _QMARK_cb_uuid = cljs.core.nth.call(null, vec__21951, 1, null);
  var _QMARK_cb_uuid__$1 = cljs.core._EQ_.call(null, 0, _QMARK_cb_uuid) ? new cljs.core.Keyword(null, "ajax-cb", "ajax-cb", -807060321) : _QMARK_cb_uuid;
  taoensso.encore.tracef.call(null, "Unpacking: %s -\x3e %s", prefixed_pstr, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clj__$1, _QMARK_cb_uuid__$1], null));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clj__$1, _QMARK_cb_uuid__$1], null);
};
taoensso.sente.IChSocket = function() {
  var obj21955 = {};
  return obj21955;
}();
taoensso.sente.chsk_init_BANG_ = function chsk_init_BANG_(chsk) {
  if (function() {
    var and__3749__auto__ = chsk;
    if (and__3749__auto__) {
      return chsk.taoensso$sente$IChSocket$chsk_init_BANG_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return chsk.taoensso$sente$IChSocket$chsk_init_BANG_$arity$1(chsk);
  } else {
    var x__4400__auto__ = chsk == null ? null : chsk;
    return function() {
      var or__3761__auto__ = taoensso.sente.chsk_init_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = taoensso.sente.chsk_init_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChSocket.chsk-init!", chsk);
        }
      }
    }().call(null, chsk);
  }
};
taoensso.sente.chsk_destroy_BANG_ = function chsk_destroy_BANG_(chsk) {
  if (function() {
    var and__3749__auto__ = chsk;
    if (and__3749__auto__) {
      return chsk.taoensso$sente$IChSocket$chsk_destroy_BANG_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return chsk.taoensso$sente$IChSocket$chsk_destroy_BANG_$arity$1(chsk);
  } else {
    var x__4400__auto__ = chsk == null ? null : chsk;
    return function() {
      var or__3761__auto__ = taoensso.sente.chsk_destroy_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = taoensso.sente.chsk_destroy_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChSocket.chsk-destroy!", chsk);
        }
      }
    }().call(null, chsk);
  }
};
taoensso.sente.chsk_reconnect_BANG_ = function chsk_reconnect_BANG_(chsk) {
  if (function() {
    var and__3749__auto__ = chsk;
    if (and__3749__auto__) {
      return chsk.taoensso$sente$IChSocket$chsk_reconnect_BANG_$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return chsk.taoensso$sente$IChSocket$chsk_reconnect_BANG_$arity$1(chsk);
  } else {
    var x__4400__auto__ = chsk == null ? null : chsk;
    return function() {
      var or__3761__auto__ = taoensso.sente.chsk_reconnect_BANG_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = taoensso.sente.chsk_reconnect_BANG_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChSocket.chsk-reconnect!", chsk);
        }
      }
    }().call(null, chsk);
  }
};
taoensso.sente.chsk_send_BANG__STAR_ = function chsk_send_BANG__STAR_(chsk, ev, opts) {
  if (function() {
    var and__3749__auto__ = chsk;
    if (and__3749__auto__) {
      return chsk.taoensso$sente$IChSocket$chsk_send_BANG__STAR_$arity$3;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return chsk.taoensso$sente$IChSocket$chsk_send_BANG__STAR_$arity$3(chsk, ev, opts);
  } else {
    var x__4400__auto__ = chsk == null ? null : chsk;
    return function() {
      var or__3761__auto__ = taoensso.sente.chsk_send_BANG__STAR_[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = taoensso.sente.chsk_send_BANG__STAR_["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChSocket.chsk-send!*", chsk);
        }
      }
    }().call(null, chsk, ev, opts);
  }
};
taoensso.sente.chsk_send_BANG_ = function() {
  var chsk_send_BANG_ = null;
  var chsk_send_BANG___2 = function(chsk, ev) {
    return chsk_send_BANG_.call(null, chsk, ev, cljs.core.PersistentArrayMap.EMPTY);
  };
  var chsk_send_BANG___3 = function(chsk, ev, opts) {
    taoensso.encore.tracef.call(null, "Chsk send: (%s) %s", cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "cb", "cb", 589947841), cljs.core.boolean$.call(null, (new cljs.core.Keyword(null, "cb", "cb", 589947841)).cljs$core$IFn$_invoke$arity$1(opts))), ev);
    return taoensso.sente.chsk_send_BANG__STAR_.call(null, chsk, ev, opts);
  };
  var chsk_send_BANG___4 = function(chsk, ev, _QMARK_timeout_ms, _QMARK_cb) {
    return chsk_send_BANG_.call(null, chsk, ev, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), _QMARK_timeout_ms, new cljs.core.Keyword(null, "cb", "cb", 589947841), _QMARK_cb], null));
  };
  chsk_send_BANG_ = function(chsk, ev, _QMARK_timeout_ms, _QMARK_cb) {
    switch(arguments.length) {
      case 2:
        return chsk_send_BANG___2.call(this, chsk, ev);
      case 3:
        return chsk_send_BANG___3.call(this, chsk, ev, _QMARK_timeout_ms);
      case 4:
        return chsk_send_BANG___4.call(this, chsk, ev, _QMARK_timeout_ms, _QMARK_cb);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chsk_send_BANG_.cljs$core$IFn$_invoke$arity$2 = chsk_send_BANG___2;
  chsk_send_BANG_.cljs$core$IFn$_invoke$arity$3 = chsk_send_BANG___3;
  chsk_send_BANG_.cljs$core$IFn$_invoke$arity$4 = chsk_send_BANG___4;
  return chsk_send_BANG_;
}();
taoensso.sente.assert_send_args = function assert_send_args(x, _QMARK_timeout_ms, _QMARK_cb) {
  taoensso.sente.assert_event.call(null, x);
  if (_QMARK_timeout_ms == null && _QMARK_cb == null || taoensso.encore.nneg_int_QMARK_.call(null, _QMARK_timeout_ms)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(taoensso.encore.format.call(null, "cb requires a timeout; timeout-ms should be a +ive integer: %s", _QMARK_timeout_ms)), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, 
    "?timeout-ms", "?timeout-ms", -651193632, null)), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "?cb", "?cb", -1346810436, null))), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol("enc", "nneg-int?", "enc/nneg-int?", 803640858, null), new cljs.core.Symbol(null, "?timeout-ms", "?timeout-ms", -651193632, null))))))].join(""));
  }
  if (_QMARK_cb == null || cljs.core.ifn_QMARK_.call(null, _QMARK_cb) || taoensso.encore.chan_QMARK_.call(null, _QMARK_cb)) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(taoensso.encore.format.call(null, "cb should be nil, an ifn, or a channel: %s", cljs.core.type.call(null, _QMARK_cb))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "?cb", "?cb", -1346810436, null)), cljs.core.list(new cljs.core.Symbol(null, 
    "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "?cb", "?cb", -1346810436, null)), cljs.core.list(new cljs.core.Symbol("enc", "chan?", "enc/chan?", 1377166, null), new cljs.core.Symbol(null, "?cb", "?cb", -1346810436, null)))))].join(""));
  }
};
taoensso.sente.pull_unused_cb_fn_BANG_ = function pull_unused_cb_fn_BANG_(cbs_waiting_, _QMARK_cb_uuid) {
  var temp__4126__auto__ = _QMARK_cb_uuid;
  if (cljs.core.truth_(temp__4126__auto__)) {
    var cb_uuid = temp__4126__auto__;
    return taoensso.encore.swap_in_BANG_.call(null, cbs_waiting_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cb_uuid], null), function(cb_uuid, temp__4126__auto__) {
      return function(_QMARK_f) {
        return taoensso.encore.swapped.call(null, new cljs.core.Keyword("swap", "dissoc", "swap/dissoc", -605373782), _QMARK_f);
      };
    }(cb_uuid, temp__4126__auto__));
  } else {
    return null;
  }
};
taoensso.sente.merge_GT_chsk_state_BANG_ = function merge_GT_chsk_state_BANG_(p__21956, merge_state) {
  var map__21959 = p__21956;
  var map__21959__$1 = cljs.core.seq_QMARK_.call(null, map__21959) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21959) : map__21959;
  var chsk = map__21959__$1;
  var state_ = cljs.core.get.call(null, map__21959__$1, new cljs.core.Keyword(null, "state_", "state_", 957667102));
  var chs = cljs.core.get.call(null, map__21959__$1, new cljs.core.Keyword(null, "chs", "chs", 376886120));
  var vec__21960 = taoensso.encore.swap_in_BANG_.call(null, state_, cljs.core.PersistentVector.EMPTY, function(map__21959, map__21959__$1, chsk, state_, chs) {
    return function(old_state) {
      var new_state = cljs.core.merge.call(null, old_state, merge_state);
      var new_state__$1 = cljs.core.not.call(null, function() {
        var and__3749__auto__ = (new cljs.core.Keyword(null, "requested-reconnect-pending?", "requested-reconnect-pending?", -299841116)).cljs$core$IFn$_invoke$arity$1(old_state);
        if (cljs.core.truth_(and__3749__auto__)) {
          var and__3749__auto____$1 = (new cljs.core.Keyword(null, "open?", "open?", 1238443125)).cljs$core$IFn$_invoke$arity$1(new_state);
          if (cljs.core.truth_(and__3749__auto____$1)) {
            return cljs.core.not.call(null, (new cljs.core.Keyword(null, "open?", "open?", 1238443125)).cljs$core$IFn$_invoke$arity$1(old_state));
          } else {
            return and__3749__auto____$1;
          }
        } else {
          return and__3749__auto__;
        }
      }()) ? new_state : cljs.core.assoc.call(null, cljs.core.dissoc.call(null, new_state, new cljs.core.Keyword(null, "requested-reconnect-pending?", "requested-reconnect-pending?", -299841116)), new cljs.core.Keyword(null, "requested-reconnect?", "requested-reconnect?", -1504983666), true);
      return taoensso.encore.swapped.call(null, new_state__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old_state, new_state__$1], null));
    };
  }(map__21959, map__21959__$1, chsk, state_, chs));
  var old_state = cljs.core.nth.call(null, vec__21960, 0, null);
  var new_state = cljs.core.nth.call(null, vec__21960, 1, null);
  if (cljs.core.not_EQ_.call(null, old_state, new_state)) {
    cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(chs), new_state);
    return new_state;
  } else {
    return null;
  }
};
taoensso.sente.cb_chan_as_fn = function cb_chan_as_fn(_QMARK_cb, ev) {
  if (_QMARK_cb == null || cljs.core.ifn_QMARK_.call(null, _QMARK_cb)) {
    return _QMARK_cb;
  } else {
    taoensso.encore.hcond.call(null, false, "taoensso.sente", null, new cljs.core.Delay(function() {
      return _QMARK_cb;
    }, null), new cljs.core.Symbol(null, "?cb", "?cb", -1346810436, null), taoensso.encore.chan_QMARK_, new cljs.core.Symbol("enc", "chan?", "enc/chan?", 1377166, null));
    taoensso.sente.assert_event.call(null, ev);
    var vec__21962 = ev;
    var ev_id = cljs.core.nth.call(null, vec__21962, 0, null);
    var _ = cljs.core.nth.call(null, vec__21962, 1, null);
    var cb_ch = _QMARK_cb;
    return function(vec__21962, ev_id, _, cb_ch) {
      return function(reply) {
        return cljs.core.async.put_BANG_.call(null, cb_ch, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, [cljs.core.str(taoensso.encore.fq_name.call(null, ev_id)), cljs.core.str(".cb")].join("")), reply], null));
      };
    }(vec__21962, ev_id, _, cb_ch);
  }
};
taoensso.sente.receive_buffered_evs_BANG_ = function receive_buffered_evs_BANG_(chs, clj) {
  taoensso.encore.tracef.call(null, "receive-buffered-evs!: %s", clj);
  var buffered_evs = taoensso.encore.hcond.call(null, false, "taoensso.sente", 739, new cljs.core.Delay(function() {
    return clj;
  }, null), new cljs.core.Symbol(null, "clj", "clj", 980036099, null), cljs.core.vector_QMARK_, new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null));
  var seq__21967 = cljs.core.seq.call(null, buffered_evs);
  var chunk__21968 = null;
  var count__21969 = 0;
  var i__21970 = 0;
  while (true) {
    if (i__21970 < count__21969) {
      var ev = cljs.core._nth.call(null, chunk__21968, i__21970);
      taoensso.sente.assert_event.call(null, ev);
      cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "\x3cserver", "\x3cserver", -2135373537)).cljs$core$IFn$_invoke$arity$1(chs), ev);
      var G__21971 = seq__21967;
      var G__21972 = chunk__21968;
      var G__21973 = count__21969;
      var G__21974 = i__21970 + 1;
      seq__21967 = G__21971;
      chunk__21968 = G__21972;
      count__21969 = G__21973;
      i__21970 = G__21974;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__21967);
      if (temp__4126__auto__) {
        var seq__21967__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__21967__$1)) {
          var c__4543__auto__ = cljs.core.chunk_first.call(null, seq__21967__$1);
          var G__21975 = cljs.core.chunk_rest.call(null, seq__21967__$1);
          var G__21976 = c__4543__auto__;
          var G__21977 = cljs.core.count.call(null, c__4543__auto__);
          var G__21978 = 0;
          seq__21967 = G__21975;
          chunk__21968 = G__21976;
          count__21969 = G__21977;
          i__21970 = G__21978;
          continue;
        } else {
          var ev = cljs.core.first.call(null, seq__21967__$1);
          taoensso.sente.assert_event.call(null, ev);
          cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "\x3cserver", "\x3cserver", -2135373537)).cljs$core$IFn$_invoke$arity$1(chs), ev);
          var G__21979 = cljs.core.next.call(null, seq__21967__$1);
          var G__21980 = null;
          var G__21981 = 0;
          var G__21982 = 0;
          seq__21967 = G__21979;
          chunk__21968 = G__21980;
          count__21969 = G__21981;
          i__21970 = G__21982;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
taoensso.sente.handle_when_handshake_BANG_ = function handle_when_handshake_BANG_(chsk, chs, clj) {
  var handshake_QMARK_ = cljs.core.vector_QMARK_.call(null, clj) && cljs.core._EQ_.call(null, cljs.core.first.call(null, clj), new cljs.core.Keyword("chsk", "handshake", "chsk/handshake", 64910686));
  taoensso.encore.tracef.call(null, "handle-when-handshake (%s): %s", handshake_QMARK_ ? new cljs.core.Keyword(null, "handshake", "handshake", 68079331) : new cljs.core.Keyword(null, "non-handshake", "non-handshake", 576986062), clj);
  if (handshake_QMARK_) {
    var vec__21985 = clj;
    var _ = cljs.core.nth.call(null, vec__21985, 0, null);
    var vec__21986 = cljs.core.nth.call(null, vec__21985, 1, null);
    var _QMARK_uid = cljs.core.nth.call(null, vec__21986, 0, null);
    var _QMARK_csrf_token = cljs.core.nth.call(null, vec__21986, 1, null);
    var _QMARK_handshake_data = cljs.core.nth.call(null, vec__21986, 2, null);
    var handshake_ev = vec__21985;
    if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, _QMARK_csrf_token))) {
      taoensso.encore.warnf.call(null, "SECURITY WARNING: no CSRF token available for use by Sente");
    } else {
    }
    taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), true, new cljs.core.Keyword(null, "uid", "uid", -1447769400), _QMARK_uid, new cljs.core.Keyword(null, "csrf-token", "csrf-token", -1872302856), _QMARK_csrf_token], null));
    taoensso.sente.assert_event.call(null, handshake_ev);
    cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "internal", "internal", -854870097)).cljs$core$IFn$_invoke$arity$1(chs), handshake_ev);
    return new cljs.core.Keyword(null, "handled", "handled", 1889700151);
  } else {
    return null;
  }
};
taoensso.sente.set_exp_backoff_timeout_BANG_ = function() {
  var set_exp_backoff_timeout_BANG___delegate = function(nullary_f, p__21987) {
    var vec__21989 = p__21987;
    var nattempt = cljs.core.nth.call(null, vec__21989, 0, null);
    return window.setTimeout(nullary_f, taoensso.encore.exp_backoff.call(null, function() {
      var or__3761__auto__ = nattempt;
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return 0;
      }
    }()));
  };
  var set_exp_backoff_timeout_BANG_ = function(nullary_f, var_args) {
    var p__21987 = null;
    if (arguments.length > 1) {
      p__21987 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_exp_backoff_timeout_BANG___delegate.call(this, nullary_f, p__21987);
  };
  set_exp_backoff_timeout_BANG_.cljs$lang$maxFixedArity = 1;
  set_exp_backoff_timeout_BANG_.cljs$lang$applyTo = function(arglist__21990) {
    var nullary_f = cljs.core.first(arglist__21990);
    var p__21987 = cljs.core.rest(arglist__21990);
    return set_exp_backoff_timeout_BANG___delegate(nullary_f, p__21987);
  };
  set_exp_backoff_timeout_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_exp_backoff_timeout_BANG___delegate;
  return set_exp_backoff_timeout_BANG_;
}();
taoensso.sente.ChWebSocket = function(client_id, url, chs, socket_, kalive_ms, kalive_timer_, kalive_due_QMARK__, nattempt_, cbs_waiting_, state_, packer, __meta, __extmap) {
  this.client_id = client_id;
  this.url = url;
  this.chs = chs;
  this.socket_ = socket_;
  this.kalive_ms = kalive_ms;
  this.kalive_timer_ = kalive_timer_;
  this.kalive_due_QMARK__ = kalive_due_QMARK__;
  this.nattempt_ = nattempt_;
  this.cbs_waiting_ = cbs_waiting_;
  this.state_ = state_;
  this.packer = packer;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 11) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4359__auto__, k__4360__auto__) {
  var self__ = this;
  var this__4359__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4359__auto____$1, k__4360__auto__, null);
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4361__auto__, k21992, else__4362__auto__) {
  var self__ = this;
  var this__4361__auto____$1 = this;
  var G__21994 = k21992 instanceof cljs.core.Keyword ? k21992.fqn : null;
  switch(G__21994) {
    case "client-id":
      return self__.client_id;
      break;
    case "kalive-ms":
      return self__.kalive_ms;
      break;
    case "nattempt_":
      return self__.nattempt_;
      break;
    case "packer":
      return self__.packer;
      break;
    case "chs":
      return self__.chs;
      break;
    case "socket_":
      return self__.socket_;
      break;
    case "url":
      return self__.url;
      break;
    case "kalive-due?_":
      return self__.kalive_due_QMARK__;
      break;
    case "cbs-waiting_":
      return self__.cbs_waiting_;
      break;
    case "kalive-timer_":
      return self__.kalive_timer_;
      break;
    case "state_":
      return self__.state_;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k21992, else__4362__auto__);
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4373__auto__, writer__4374__auto__, opts__4375__auto__) {
  var self__ = this;
  var this__4373__auto____$1 = this;
  var pr_pair__4376__auto__ = function(this__4373__auto____$1) {
    return function(keyval__4377__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4374__auto__, cljs.core.pr_writer, "", " ", "", opts__4375__auto__, keyval__4377__auto__);
    };
  }(this__4373__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4374__auto__, pr_pair__4376__auto__, "#taoensso.sente.ChWebSocket{", ", ", "}", opts__4375__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "client-id", "client-id", -464622140), self__.client_id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "url", "url", 276297046), self__.url], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "chs", "chs", 376886120), self__.chs], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "socket_", "socket_", -361048908), self__.socket_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "kalive-ms", "kalive-ms", 210734021), self__.kalive_ms], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1558413149), self__.kalive_timer_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 39438072), self__.kalive_due_QMARK__], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "nattempt_", "nattempt_", 1980196552), self__.nattempt_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", -1519029061), self__.cbs_waiting_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state_", "state_", 957667102), self__.state_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "packer", "packer", 66077544), self__.packer], null)], null), self__.__extmap));
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4357__auto__) {
  var self__ = this;
  var this__4357__auto____$1 = this;
  return self__.__meta;
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4353__auto__) {
  var self__ = this;
  var this__4353__auto____$1 = this;
  return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, self__.__extmap, self__.__hash);
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4363__auto__) {
  var self__ = this;
  var this__4363__auto____$1 = this;
  return 11 + cljs.core.count.call(null, self__.__extmap);
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4354__auto__) {
  var self__ = this;
  var this__4354__auto____$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_imap.call(null, this__4354__auto____$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4355__auto__, other__4356__auto__) {
  var self__ = this;
  var this__4355__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3749__auto__ = other__4356__auto__;
    if (cljs.core.truth_(and__3749__auto__)) {
      return this__4355__auto____$1.constructor === other__4356__auto__.constructor && cljs.core.equiv_map.call(null, this__4355__auto____$1, other__4356__auto__);
    } else {
      return and__3749__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4368__auto__, k__4369__auto__) {
  var self__ = this;
  var this__4368__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [new cljs.core.Keyword(null, "client-id", "client-id", -464622140), null, new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 210734021), null, new cljs.core.Keyword(null, "nattempt_", "nattempt_", 1980196552), null, new cljs.core.Keyword(null, "packer", "packer", 66077544), null, new cljs.core.Keyword(null, "chs", "chs", 376886120), null, new cljs.core.Keyword(null, "socket_", 
  "socket_", -361048908), null, new cljs.core.Keyword(null, "url", "url", 276297046), null, new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 39438072), null, new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", -1519029061), null, new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1558413149), null, new cljs.core.Keyword(null, "state_", "state_", 957667102), null], null), null), k__4369__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4368__auto____$1), self__.__meta), k__4369__auto__);
  } else {
    return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4369__auto__)), null);
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4366__auto__, k__4367__auto__, G__21991) {
  var self__ = this;
  var this__4366__auto____$1 = this;
  var pred__21995 = cljs.core.keyword_identical_QMARK_;
  var expr__21996 = k__4367__auto__;
  if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "client-id", "client-id", -464622140), expr__21996))) {
    return new taoensso.sente.ChWebSocket(G__21991, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "url", "url", 276297046), expr__21996))) {
      return new taoensso.sente.ChWebSocket(self__.client_id, G__21991, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "chs", "chs", 376886120), expr__21996))) {
        return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, G__21991, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "socket_", "socket_", -361048908), expr__21996))) {
          return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, G__21991, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 210734021), expr__21996))) {
            return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, G__21991, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1558413149), expr__21996))) {
              return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, G__21991, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 39438072), expr__21996))) {
                return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, G__21991, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "nattempt_", "nattempt_", 1980196552), expr__21996))) {
                  return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, G__21991, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
                } else {
                  if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", -1519029061), expr__21996))) {
                    return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, G__21991, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
                  } else {
                    if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "state_", "state_", 957667102), expr__21996))) {
                      return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, G__21991, self__.packer, self__.__meta, self__.__extmap, null);
                    } else {
                      if (cljs.core.truth_(pred__21995.call(null, new cljs.core.Keyword(null, "packer", "packer", 66077544), expr__21996))) {
                        return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, G__21991, self__.__meta, self__.__extmap, null);
                      } else {
                        return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4367__auto__, G__21991), null);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4371__auto__) {
  var self__ = this;
  var this__4371__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "client-id", "client-id", -464622140), self__.client_id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "url", "url", 276297046), self__.url], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "chs", "chs", 376886120), self__.chs], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "socket_", "socket_", -361048908), self__.socket_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 210734021), self__.kalive_ms], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1558413149), self__.kalive_timer_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 39438072), self__.kalive_due_QMARK__], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nattempt_", "nattempt_", 1980196552), self__.nattempt_], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", -1519029061), self__.cbs_waiting_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state_", "state_", 957667102), self__.state_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "packer", "packer", 66077544), 
  self__.packer], null)], null), self__.__extmap));
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4358__auto__, G__21991) {
  var self__ = this;
  var this__4358__auto____$1 = this;
  return new taoensso.sente.ChWebSocket(self__.client_id, self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.nattempt_, self__.cbs_waiting_, self__.state_, self__.packer, G__21991, self__.__extmap, self__.__hash);
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4364__auto__, entry__4365__auto__) {
  var self__ = this;
  var this__4364__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4365__auto__)) {
    return cljs.core._assoc.call(null, this__4364__auto____$1, cljs.core._nth.call(null, entry__4365__auto__, 0), cljs.core._nth.call(null, entry__4365__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4364__auto____$1, entry__4365__auto__);
  }
};
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$ = true;
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$chsk_send_BANG__STAR_$arity$3 = function(chsk, ev, p__21998) {
  var self__ = this;
  var map__21999 = p__21998;
  var map__21999__$1 = cljs.core.seq_QMARK_.call(null, map__21999) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21999) : map__21999;
  var opts = map__21999__$1;
  var flush_QMARK_ = cljs.core.get.call(null, map__21999__$1, new cljs.core.Keyword(null, "flush?", "flush?", -108887231));
  var _QMARK_timeout_ms = cljs.core.get.call(null, map__21999__$1, new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406));
  var _QMARK_cb = cljs.core.get.call(null, map__21999__$1, new cljs.core.Keyword(null, "cb", "cb", 589947841));
  var chsk__$1 = this;
  taoensso.sente.assert_send_args.call(null, ev, _QMARK_timeout_ms, _QMARK_cb);
  var _QMARK_cb_fn = taoensso.sente.cb_chan_as_fn.call(null, _QMARK_cb, ev);
  if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "open?", "open?", 1238443125)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state_)))) {
    taoensso.encore.warnf.call(null, "Chsk send against closed chsk.");
    if (cljs.core.truth_(_QMARK_cb_fn)) {
      return _QMARK_cb_fn.call(null, new cljs.core.Keyword("chsk", "closed", "chsk/closed", -922855264));
    } else {
      return null;
    }
  } else {
    var _QMARK_cb_uuid = cljs.core.truth_(_QMARK_cb_fn) ? taoensso.encore.uuid_str.call(null, 6) : null;
    var ppstr = taoensso.sente.pack.call(null, self__.packer, cljs.core.meta.call(null, ev), ev, _QMARK_cb_uuid);
    var temp__4126__auto___22032 = _QMARK_cb_uuid;
    if (cljs.core.truth_(temp__4126__auto___22032)) {
      var cb_uuid_22033 = temp__4126__auto___22032;
      taoensso.encore.reset_in_BANG_.call(null, self__.cbs_waiting_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cb_uuid_22033], null), taoensso.encore.hcond.call(null, false, "taoensso.sente", 804, new cljs.core.Delay(function(cb_uuid_22033, temp__4126__auto___22032, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb) {
        return function() {
          return _QMARK_cb_fn;
        };
      }(cb_uuid_22033, temp__4126__auto___22032, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb), null), new cljs.core.Symbol(null, "?cb-fn", "?cb-fn", -1734331361, null), taoensso.encore.nnil_QMARK_, new cljs.core.Symbol("taoensso.encore", "nnil?", "taoensso.encore/nnil?", -1813154343, null)));
      var temp__4126__auto___22034__$1 = _QMARK_timeout_ms;
      if (cljs.core.truth_(temp__4126__auto___22034__$1)) {
        var timeout_ms_22035 = temp__4126__auto___22034__$1;
        var c__6474__auto___22036 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___22036, timeout_ms_22035, temp__4126__auto___22034__$1, cb_uuid_22033, temp__4126__auto___22032, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb) {
          return function() {
            var f__6475__auto__ = function() {
              var switch__6459__auto__ = function(c__6474__auto___22036, timeout_ms_22035, temp__4126__auto___22034__$1, cb_uuid_22033, temp__4126__auto___22032, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb) {
                return function(state_22010) {
                  var state_val_22011 = state_22010[1];
                  if (state_val_22011 === 5) {
                    var inst_22008 = state_22010[2];
                    var state_22010__$1 = state_22010;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22010__$1, inst_22008);
                  } else {
                    if (state_val_22011 === 4) {
                      var state_22010__$1 = state_22010;
                      var statearr_22012_22037 = state_22010__$1;
                      statearr_22012_22037[2] = null;
                      statearr_22012_22037[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_22011 === 3) {
                        var inst_22003 = state_22010[7];
                        var inst_22005 = inst_22003.call(null, new cljs.core.Keyword("chsk", "timeout", "chsk/timeout", -319776489));
                        var state_22010__$1 = state_22010;
                        var statearr_22013_22038 = state_22010__$1;
                        statearr_22013_22038[2] = inst_22005;
                        statearr_22013_22038[1] = 5;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_22011 === 2) {
                          var inst_22003 = state_22010[7];
                          var inst_22002 = state_22010[2];
                          var inst_22003__$1 = taoensso.sente.pull_unused_cb_fn_BANG_.call(null, self__.cbs_waiting_, _QMARK_cb_uuid);
                          var state_22010__$1 = function() {
                            var statearr_22014 = state_22010;
                            statearr_22014[7] = inst_22003__$1;
                            statearr_22014[8] = inst_22002;
                            return statearr_22014;
                          }();
                          if (cljs.core.truth_(inst_22003__$1)) {
                            var statearr_22015_22039 = state_22010__$1;
                            statearr_22015_22039[1] = 3;
                          } else {
                            var statearr_22016_22040 = state_22010__$1;
                            statearr_22016_22040[1] = 4;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_22011 === 1) {
                            var inst_22000 = cljs.core.async.timeout.call(null, timeout_ms_22035);
                            var state_22010__$1 = state_22010;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22010__$1, 2, inst_22000);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                };
              }(c__6474__auto___22036, timeout_ms_22035, temp__4126__auto___22034__$1, cb_uuid_22033, temp__4126__auto___22032, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb);
              return function(switch__6459__auto__, c__6474__auto___22036, timeout_ms_22035, temp__4126__auto___22034__$1, cb_uuid_22033, temp__4126__auto___22032, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb) {
                return function() {
                  var state_machine__6460__auto__ = null;
                  var state_machine__6460__auto____0 = function() {
                    var statearr_22020 = [null, null, null, null, null, null, null, null, null];
                    statearr_22020[0] = state_machine__6460__auto__;
                    statearr_22020[1] = 1;
                    return statearr_22020;
                  };
                  var state_machine__6460__auto____1 = function(state_22010) {
                    while (true) {
                      var ret_value__6461__auto__ = function() {
                        try {
                          while (true) {
                            var result__6462__auto__ = switch__6459__auto__.call(null, state_22010);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__6462__auto__;
                            }
                            break;
                          }
                        } catch (e22021) {
                          if (e22021 instanceof Object) {
                            var ex__6463__auto__ = e22021;
                            var statearr_22022_22041 = state_22010;
                            statearr_22022_22041[5] = ex__6463__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22010);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e22021;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__22042 = state_22010;
                        state_22010 = G__22042;
                        continue;
                      } else {
                        return ret_value__6461__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__6460__auto__ = function(state_22010) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__6460__auto____0.call(this);
                      case 1:
                        return state_machine__6460__auto____1.call(this, state_22010);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
                  state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
                  return state_machine__6460__auto__;
                }();
              }(switch__6459__auto__, c__6474__auto___22036, timeout_ms_22035, temp__4126__auto___22034__$1, cb_uuid_22033, temp__4126__auto___22032, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb);
            }();
            var state__6476__auto__ = function() {
              var statearr_22023 = f__6475__auto__.call(null);
              statearr_22023[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___22036;
              return statearr_22023;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
          };
        }(c__6474__auto___22036, timeout_ms_22035, temp__4126__auto___22034__$1, cb_uuid_22033, temp__4126__auto___22032, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb));
      } else {
      }
    } else {
    }
    try {
      cljs.core.deref.call(null, self__.socket_).send(ppstr);
      cljs.core.reset_BANG_.call(null, self__.kalive_due_QMARK__, false);
      return new cljs.core.Keyword(null, "apparent-success", "apparent-success", 242592222);
    } catch (e22024) {
      if (e22024 instanceof Error) {
        var e = e22024;
        taoensso.encore.errorf.call(null, "Chsk send error: %s", e);
        var temp__4126__auto___22043 = _QMARK_cb_uuid;
        if (cljs.core.truth_(temp__4126__auto___22043)) {
          var cb_uuid_22044 = temp__4126__auto___22043;
          var cb_fn_STAR__22045 = function() {
            var or__3761__auto__ = taoensso.sente.pull_unused_cb_fn_BANG_.call(null, self__.cbs_waiting_, cb_uuid_22044);
            if (cljs.core.truth_(or__3761__auto__)) {
              return or__3761__auto__;
            } else {
              return taoensso.encore.hcond.call(null, false, "taoensso.sente", 818, new cljs.core.Delay(function(or__3761__auto__, cb_uuid_22044, temp__4126__auto___22043, e, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb) {
                return function() {
                  return _QMARK_cb_fn;
                };
              }(or__3761__auto__, cb_uuid_22044, temp__4126__auto___22043, e, _QMARK_cb_uuid, ppstr, _QMARK_cb_fn, chsk__$1, map__21999, map__21999__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb), null), new cljs.core.Symbol(null, "?cb-fn", "?cb-fn", -1734331361, null), taoensso.encore.nnil_QMARK_, new cljs.core.Symbol("taoensso.encore", "nnil?", "taoensso.encore/nnil?", -1813154343, null));
            }
          }();
          cb_fn_STAR__22045.call(null, new cljs.core.Keyword("chsk", "error", "chsk/error", -984175439));
        } else {
        }
        return false;
      } else {
        throw e22024;
      }
    }
  }
};
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$chsk_reconnect_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), false, new cljs.core.Keyword(null, "requested-reconnect-pending?", "requested-reconnect-pending?", -299841116), true], null));
  var temp__4126__auto__ = cljs.core.deref.call(null, self__.socket_);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var s = temp__4126__auto__;
    return s.close(3E3, "SENTE_RECONNECT");
  } else {
    return null;
  }
};
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$chsk_destroy_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), false, new cljs.core.Keyword(null, "destroyed?", "destroyed?", 1049634064), true], null));
  var temp__4126__auto__ = cljs.core.deref.call(null, self__.socket_);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var s = temp__4126__auto__;
    return s.close(1E3, "CLOSE_NORMAL");
  } else {
    return null;
  }
};
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$chsk_init_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  var temp__4126__auto__ = function() {
    var or__3761__auto__ = window["WebSocket"];
    if (cljs.core.truth_(or__3761__auto__)) {
      return or__3761__auto__;
    } else {
      return window["MozWebSocket"];
    }
  }();
  if (cljs.core.truth_(temp__4126__auto__)) {
    var WebSocket = temp__4126__auto__;
    (function(WebSocket, temp__4126__auto__, chsk__$1) {
      return function connect_BANG_() {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "destroyed?", "destroyed?", 1049634064)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state_)))) {
          return null;
        } else {
          var retry_BANG_ = function(WebSocket, temp__4126__auto__, chsk__$1) {
            return function() {
              var nattempt_STAR_ = cljs.core.swap_BANG_.call(null, self__.nattempt_, cljs.core.inc);
              window.clearInterval(cljs.core.deref.call(null, self__.kalive_timer_));
              taoensso.encore.warnf.call(null, "Chsk is closed: will try reconnect (%s).", nattempt_STAR_);
              return taoensso.sente.set_exp_backoff_timeout_BANG_.call(null, connect_BANG_, nattempt_STAR_);
            };
          }(WebSocket, temp__4126__auto__, chsk__$1);
          var temp__4124__auto__ = function() {
            try {
              return new WebSocket(taoensso.encore.merge_url_with_query_string.call(null, self__.url, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "client-id", "client-id", -464622140), self__.client_id], null)));
            } catch (e22028) {
              if (e22028 instanceof Error) {
                var e = e22028;
                taoensso.encore.errorf.call(null, "WebSocket js/Error: %s", e);
                return null;
              } else {
                throw e22028;
              }
            }
          }();
          if (cljs.core.truth_(temp__4124__auto__)) {
            var socket = temp__4124__auto__;
            return cljs.core.reset_BANG_.call(null, self__.socket_, function() {
              var G__22029 = socket;
              G__22029["onerror"] = function(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1) {
                return function(ws_ev) {
                  return taoensso.encore.errorf.call(null, "WebSocket error: %s", ws_ev);
                };
              }(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1);
              G__22029["onmessage"] = function(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1) {
                return function(ws_ev) {
                  var ppstr = ws_ev["data"];
                  var vec__22030 = taoensso.sente.unpack.call(null, self__.packer, ppstr);
                  var clj = cljs.core.nth.call(null, vec__22030, 0, null);
                  var _QMARK_cb_uuid = cljs.core.nth.call(null, vec__22030, 1, null);
                  var or__3761__auto__ = function() {
                    var and__3749__auto__ = taoensso.sente.handle_when_handshake_BANG_.call(null, chsk__$1, self__.chs, clj);
                    if (cljs.core.truth_(and__3749__auto__)) {
                      return cljs.core.reset_BANG_.call(null, self__.nattempt_, 0);
                    } else {
                      return and__3749__auto__;
                    }
                  }();
                  if (cljs.core.truth_(or__3761__auto__)) {
                    return or__3761__auto__;
                  } else {
                    var temp__4124__auto____$1 = _QMARK_cb_uuid;
                    if (cljs.core.truth_(temp__4124__auto____$1)) {
                      var cb_uuid = temp__4124__auto____$1;
                      var temp__4124__auto____$2 = taoensso.sente.pull_unused_cb_fn_BANG_.call(null, self__.cbs_waiting_, cb_uuid);
                      if (cljs.core.truth_(temp__4124__auto____$2)) {
                        var cb_fn = temp__4124__auto____$2;
                        return cb_fn.call(null, clj);
                      } else {
                        return taoensso.encore.warnf.call(null, "Cb reply w/o local cb-fn: %s", clj);
                      }
                    } else {
                      var buffered_evs = clj;
                      return taoensso.sente.receive_buffered_evs_BANG_.call(null, self__.chs, buffered_evs);
                    }
                  }
                };
              }(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1);
              G__22029["onopen"] = function(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1) {
                return function(_ws_ev) {
                  return cljs.core.reset_BANG_.call(null, self__.kalive_timer_, window.setInterval(function(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1) {
                    return function() {
                      if (cljs.core.truth_(cljs.core.deref.call(null, self__.kalive_due_QMARK__))) {
                        taoensso.sente.chsk_send_BANG_.call(null, chsk__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("chsk", "ws-ping", "chsk/ws-ping", 191675304)], null));
                      } else {
                      }
                      return cljs.core.reset_BANG_.call(null, self__.kalive_due_QMARK__, true);
                    };
                  }(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1), self__.kalive_ms));
                };
              }(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1);
              G__22029["onclose"] = function(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1) {
                return function(_ws_ev) {
                  taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), false], null));
                  return retry_BANG_.call(null);
                };
              }(G__22029, socket, temp__4124__auto__, retry_BANG_, WebSocket, temp__4126__auto__, chsk__$1);
              return G__22029;
            }());
          } else {
            return retry_BANG_.call(null);
          }
        }
      };
    })(WebSocket, temp__4126__auto__, chsk__$1).call(null);
    return chsk__$1;
  } else {
    return null;
  }
};
taoensso.sente.ChWebSocket.cljs$lang$type = true;
taoensso.sente.ChWebSocket.cljs$lang$ctorPrSeq = function(this__4393__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "taoensso.sente/ChWebSocket");
};
taoensso.sente.ChWebSocket.cljs$lang$ctorPrWriter = function(this__4393__auto__, writer__4394__auto__) {
  return cljs.core._write.call(null, writer__4394__auto__, "taoensso.sente/ChWebSocket");
};
taoensso.sente.__GT_ChWebSocket = function __GT_ChWebSocket(client_id, url, chs, socket_, kalive_ms, kalive_timer_, kalive_due_QMARK__, nattempt_, cbs_waiting_, state_, packer) {
  return new taoensso.sente.ChWebSocket(client_id, url, chs, socket_, kalive_ms, kalive_timer_, kalive_due_QMARK__, nattempt_, cbs_waiting_, state_, packer);
};
taoensso.sente.map__GT_ChWebSocket = function map__GT_ChWebSocket(G__21993) {
  return new taoensso.sente.ChWebSocket((new cljs.core.Keyword(null, "client-id", "client-id", -464622140)).cljs$core$IFn$_invoke$arity$1(G__21993), (new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(G__21993), (new cljs.core.Keyword(null, "chs", "chs", 376886120)).cljs$core$IFn$_invoke$arity$1(G__21993), (new cljs.core.Keyword(null, "socket_", "socket_", -361048908)).cljs$core$IFn$_invoke$arity$1(G__21993), (new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 
  210734021)).cljs$core$IFn$_invoke$arity$1(G__21993), (new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1558413149)).cljs$core$IFn$_invoke$arity$1(G__21993), (new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 39438072)).cljs$core$IFn$_invoke$arity$1(G__21993), (new cljs.core.Keyword(null, "nattempt_", "nattempt_", 1980196552)).cljs$core$IFn$_invoke$arity$1(G__21993), (new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", -1519029061)).cljs$core$IFn$_invoke$arity$1(G__21993), 
  (new cljs.core.Keyword(null, "state_", "state_", 957667102)).cljs$core$IFn$_invoke$arity$1(G__21993), (new cljs.core.Keyword(null, "packer", "packer", 66077544)).cljs$core$IFn$_invoke$arity$1(G__21993), null, cljs.core.dissoc.call(null, G__21993, new cljs.core.Keyword(null, "client-id", "client-id", -464622140), new cljs.core.Keyword(null, "url", "url", 276297046), new cljs.core.Keyword(null, "chs", "chs", 376886120), new cljs.core.Keyword(null, "socket_", "socket_", -361048908), new cljs.core.Keyword(null, 
  "kalive-ms", "kalive-ms", 210734021), new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1558413149), new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 39438072), new cljs.core.Keyword(null, "nattempt_", "nattempt_", 1980196552), new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", -1519029061), new cljs.core.Keyword(null, "state_", "state_", 957667102), new cljs.core.Keyword(null, "packer", "packer", 66077544)));
};
taoensso.sente.ChAjaxSocket = function(client_id, url, chs, timeout_ms, ajax_opts, curr_xhr_, state_, packer, __meta, __extmap) {
  this.client_id = client_id;
  this.url = url;
  this.chs = chs;
  this.timeout_ms = timeout_ms;
  this.ajax_opts = ajax_opts;
  this.curr_xhr_ = curr_xhr_;
  this.state_ = state_;
  this.packer = packer;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 8) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4359__auto__, k__4360__auto__) {
  var self__ = this;
  var this__4359__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4359__auto____$1, k__4360__auto__, null);
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4361__auto__, k22047, else__4362__auto__) {
  var self__ = this;
  var this__4361__auto____$1 = this;
  var G__22049 = k22047 instanceof cljs.core.Keyword ? k22047.fqn : null;
  switch(G__22049) {
    case "packer":
      return self__.packer;
      break;
    case "state_":
      return self__.state_;
      break;
    case "curr-xhr_":
      return self__.curr_xhr_;
      break;
    case "ajax-opts":
      return self__.ajax_opts;
      break;
    case "timeout-ms":
      return self__.timeout_ms;
      break;
    case "chs":
      return self__.chs;
      break;
    case "url":
      return self__.url;
      break;
    case "client-id":
      return self__.client_id;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k22047, else__4362__auto__);
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4373__auto__, writer__4374__auto__, opts__4375__auto__) {
  var self__ = this;
  var this__4373__auto____$1 = this;
  var pr_pair__4376__auto__ = function(this__4373__auto____$1) {
    return function(keyval__4377__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4374__auto__, cljs.core.pr_writer, "", " ", "", opts__4375__auto__, keyval__4377__auto__);
    };
  }(this__4373__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4374__auto__, pr_pair__4376__auto__, "#taoensso.sente.ChAjaxSocket{", ", ", "}", opts__4375__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "client-id", "client-id", -464622140), self__.client_id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "url", "url", 276297046), self__.url], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "chs", "chs", 376886120), self__.chs], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), self__.timeout_ms], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "ajax-opts", "ajax-opts", -518239109), self__.ajax_opts], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", -1318773696), self__.curr_xhr_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state_", "state_", 957667102), self__.state_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "packer", "packer", 66077544), self__.packer], null)], null), self__.__extmap));
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4357__auto__) {
  var self__ = this;
  var this__4357__auto____$1 = this;
  return self__.__meta;
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4353__auto__) {
  var self__ = this;
  var this__4353__auto____$1 = this;
  return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, self__.chs, self__.timeout_ms, self__.ajax_opts, self__.curr_xhr_, self__.state_, self__.packer, self__.__meta, self__.__extmap, self__.__hash);
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4363__auto__) {
  var self__ = this;
  var this__4363__auto____$1 = this;
  return 8 + cljs.core.count.call(null, self__.__extmap);
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4354__auto__) {
  var self__ = this;
  var this__4354__auto____$1 = this;
  var h__4177__auto__ = self__.__hash;
  if (!(h__4177__auto__ == null)) {
    return h__4177__auto__;
  } else {
    var h__4177__auto____$1 = cljs.core.hash_imap.call(null, this__4354__auto____$1);
    self__.__hash = h__4177__auto____$1;
    return h__4177__auto____$1;
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4355__auto__, other__4356__auto__) {
  var self__ = this;
  var this__4355__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3749__auto__ = other__4356__auto__;
    if (cljs.core.truth_(and__3749__auto__)) {
      return this__4355__auto____$1.constructor === other__4356__auto__.constructor && cljs.core.equiv_map.call(null, this__4355__auto____$1, other__4356__auto__);
    } else {
      return and__3749__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4368__auto__, k__4369__auto__) {
  var self__ = this;
  var this__4368__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", -1318773696), null, new cljs.core.Keyword(null, "client-id", "client-id", -464622140), null, new cljs.core.Keyword(null, "packer", "packer", 66077544), null, new cljs.core.Keyword(null, "chs", "chs", 376886120), null, new cljs.core.Keyword(null, "url", "url", 276297046), null, new cljs.core.Keyword(null, "ajax-opts", "ajax-opts", 
  -518239109), null, new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), null, new cljs.core.Keyword(null, "state_", "state_", 957667102), null], null), null), k__4369__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4368__auto____$1), self__.__meta), k__4369__auto__);
  } else {
    return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, self__.chs, self__.timeout_ms, self__.ajax_opts, self__.curr_xhr_, self__.state_, self__.packer, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4369__auto__)), null);
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4366__auto__, k__4367__auto__, G__22046) {
  var self__ = this;
  var this__4366__auto____$1 = this;
  var pred__22050 = cljs.core.keyword_identical_QMARK_;
  var expr__22051 = k__4367__auto__;
  if (cljs.core.truth_(pred__22050.call(null, new cljs.core.Keyword(null, "client-id", "client-id", -464622140), expr__22051))) {
    return new taoensso.sente.ChAjaxSocket(G__22046, self__.url, self__.chs, self__.timeout_ms, self__.ajax_opts, self__.curr_xhr_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__22050.call(null, new cljs.core.Keyword(null, "url", "url", 276297046), expr__22051))) {
      return new taoensso.sente.ChAjaxSocket(self__.client_id, G__22046, self__.chs, self__.timeout_ms, self__.ajax_opts, self__.curr_xhr_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__22050.call(null, new cljs.core.Keyword(null, "chs", "chs", 376886120), expr__22051))) {
        return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, G__22046, self__.timeout_ms, self__.ajax_opts, self__.curr_xhr_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__22050.call(null, new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), expr__22051))) {
          return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, self__.chs, G__22046, self__.ajax_opts, self__.curr_xhr_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__22050.call(null, new cljs.core.Keyword(null, "ajax-opts", "ajax-opts", -518239109), expr__22051))) {
            return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, self__.chs, self__.timeout_ms, G__22046, self__.curr_xhr_, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__22050.call(null, new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", -1318773696), expr__22051))) {
              return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, self__.chs, self__.timeout_ms, self__.ajax_opts, G__22046, self__.state_, self__.packer, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__22050.call(null, new cljs.core.Keyword(null, "state_", "state_", 957667102), expr__22051))) {
                return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, self__.chs, self__.timeout_ms, self__.ajax_opts, self__.curr_xhr_, G__22046, self__.packer, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__22050.call(null, new cljs.core.Keyword(null, "packer", "packer", 66077544), expr__22051))) {
                  return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, self__.chs, self__.timeout_ms, self__.ajax_opts, self__.curr_xhr_, self__.state_, G__22046, self__.__meta, self__.__extmap, null);
                } else {
                  return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, self__.chs, self__.timeout_ms, self__.ajax_opts, self__.curr_xhr_, self__.state_, self__.packer, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4367__auto__, G__22046), null);
                }
              }
            }
          }
        }
      }
    }
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4371__auto__) {
  var self__ = this;
  var this__4371__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "client-id", "client-id", -464622140), self__.client_id], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "url", "url", 276297046), self__.url], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "chs", "chs", 376886120), self__.chs], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), self__.timeout_ms], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ajax-opts", "ajax-opts", -518239109), self__.ajax_opts], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", -1318773696), self__.curr_xhr_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state_", "state_", 957667102), self__.state_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "packer", "packer", 66077544), self__.packer], null)], null), self__.__extmap));
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4358__auto__, G__22046) {
  var self__ = this;
  var this__4358__auto____$1 = this;
  return new taoensso.sente.ChAjaxSocket(self__.client_id, self__.url, self__.chs, self__.timeout_ms, self__.ajax_opts, self__.curr_xhr_, self__.state_, self__.packer, G__22046, self__.__extmap, self__.__hash);
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4364__auto__, entry__4365__auto__) {
  var self__ = this;
  var this__4364__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4365__auto__)) {
    return cljs.core._assoc.call(null, this__4364__auto____$1, cljs.core._nth.call(null, entry__4365__auto__, 0), cljs.core._nth.call(null, entry__4365__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4364__auto____$1, entry__4365__auto__);
  }
};
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$ = true;
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$chsk_send_BANG__STAR_$arity$3 = function(chsk, ev, p__22053) {
  var self__ = this;
  var map__22054 = p__22053;
  var map__22054__$1 = cljs.core.seq_QMARK_.call(null, map__22054) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22054) : map__22054;
  var opts = map__22054__$1;
  var flush_QMARK_ = cljs.core.get.call(null, map__22054__$1, new cljs.core.Keyword(null, "flush?", "flush?", -108887231));
  var _QMARK_timeout_ms = cljs.core.get.call(null, map__22054__$1, new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406));
  var _QMARK_cb = cljs.core.get.call(null, map__22054__$1, new cljs.core.Keyword(null, "cb", "cb", 589947841));
  var chsk__$1 = this;
  taoensso.sente.assert_send_args.call(null, ev, _QMARK_timeout_ms, _QMARK_cb);
  var _QMARK_cb_fn = taoensso.sente.cb_chan_as_fn.call(null, _QMARK_cb, ev);
  if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "open?", "open?", 1238443125)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state_)))) {
    taoensso.encore.warnf.call(null, "Chsk send against closed chsk.");
    if (cljs.core.truth_(_QMARK_cb_fn)) {
      return _QMARK_cb_fn.call(null, new cljs.core.Keyword("chsk", "closed", "chsk/closed", -922855264));
    } else {
      return null;
    }
  } else {
    taoensso.sente.ajax_call.call(null, self__.url, cljs.core.merge.call(null, self__.ajax_opts, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "post", "post", 269697687), new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), _QMARK_timeout_ms, new cljs.core.Keyword(null, "resp-type", "resp-type", 1050675962), new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.Keyword(null, "params", 
    "params", 710516235), function() {
      var ppstr = taoensso.sente.pack.call(null, self__.packer, cljs.core.meta.call(null, ev), ev, cljs.core.truth_(_QMARK_cb_fn) ? new cljs.core.Keyword(null, "ajax-cb", "ajax-cb", -807060321) : null);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "_", "_", 1453416199), taoensso.encore.now_udt.call(null), new cljs.core.Keyword(null, "csrf-token", "csrf-token", -1872302856), (new cljs.core.Keyword(null, "csrf-token", "csrf-token", -1872302856)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state_)), new cljs.core.Keyword(null, "ppstr", "ppstr", 1557495252), ppstr], null);
    }()], null)), function(_QMARK_cb_fn, chsk__$1, map__22054, map__22054__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb) {
      return function ajax_cb(p__22055) {
        var map__22058 = p__22055;
        var map__22058__$1 = cljs.core.seq_QMARK_.call(null, map__22058) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22058) : map__22058;
        var _QMARK_content = cljs.core.get.call(null, map__22058__$1, new cljs.core.Keyword(null, "?content", "?content", 1697782054));
        var _QMARK_error = cljs.core.get.call(null, map__22058__$1, new cljs.core.Keyword(null, "?error", "?error", 1070752222));
        if (cljs.core.truth_(_QMARK_error)) {
          if (cljs.core._EQ_.call(null, _QMARK_error, new cljs.core.Keyword(null, "timeout", "timeout", -318625318))) {
            if (cljs.core.truth_(_QMARK_cb_fn)) {
              return _QMARK_cb_fn.call(null, new cljs.core.Keyword("chsk", "timeout", "chsk/timeout", -319776489));
            } else {
              return null;
            }
          } else {
            taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), false], null));
            if (cljs.core.truth_(_QMARK_cb_fn)) {
              return _QMARK_cb_fn.call(null, new cljs.core.Keyword("chsk", "error", "chsk/error", -984175439));
            } else {
              return null;
            }
          }
        } else {
          var content = _QMARK_content;
          var resp_ppstr = content;
          var vec__22059 = taoensso.sente.unpack.call(null, self__.packer, resp_ppstr);
          var resp_clj = cljs.core.nth.call(null, vec__22059, 0, null);
          var _ = cljs.core.nth.call(null, vec__22059, 1, null);
          if (cljs.core.truth_(_QMARK_cb_fn)) {
            _QMARK_cb_fn.call(null, resp_clj);
          } else {
            if (cljs.core.not_EQ_.call(null, resp_clj, new cljs.core.Keyword("chsk", "dummy-cb-200", "chsk/dummy-cb-200", -1663130337))) {
              taoensso.encore.warnf.call(null, "Cb reply w/o local cb-fn: %s", resp_clj);
            } else {
            }
          }
          return taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), true], null));
        }
      };
    }(_QMARK_cb_fn, chsk__$1, map__22054, map__22054__$1, opts, flush_QMARK_, _QMARK_timeout_ms, _QMARK_cb));
    return new cljs.core.Keyword(null, "apparent-success", "apparent-success", 242592222);
  }
};
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$chsk_reconnect_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), false, new cljs.core.Keyword(null, "requested-reconnect-pending?", "requested-reconnect-pending?", -299841116), true], null));
  var temp__4126__auto__ = cljs.core.deref.call(null, self__.curr_xhr_);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var x = temp__4126__auto__;
    return x.abort();
  } else {
    return null;
  }
};
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$chsk_destroy_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), false, new cljs.core.Keyword(null, "destroyed?", "destroyed?", 1049634064), true], null));
  var temp__4126__auto__ = cljs.core.deref.call(null, self__.curr_xhr_);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var x = temp__4126__auto__;
    return x.abort();
  } else {
    return null;
  }
};
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$chsk_init_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  (function(chsk__$1) {
    return function async_poll_for_update_BANG_(nattempt) {
      taoensso.encore.tracef.call(null, "async-poll-for-update!");
      if (cljs.core.truth_((new cljs.core.Keyword(null, "destroyed?", "destroyed?", 1049634064)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state_)))) {
        return null;
      } else {
        var retry_BANG_ = function(chsk__$1) {
          return function() {
            var nattempt_STAR_ = nattempt + 1;
            taoensso.encore.warnf.call(null, "Chsk is closed: will try reconnect (%s).", nattempt_STAR_);
            return taoensso.sente.set_exp_backoff_timeout_BANG_.call(null, cljs.core.partial.call(null, async_poll_for_update_BANG_, nattempt_STAR_), nattempt_STAR_);
          };
        }(chsk__$1);
        return cljs.core.reset_BANG_.call(null, self__.curr_xhr_, taoensso.sente.ajax_call.call(null, self__.url, cljs.core.merge.call(null, self__.ajax_opts, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), self__.timeout_ms, new cljs.core.Keyword(null, "resp-type", "resp-type", 1050675962), new cljs.core.Keyword(null, "text", 
        "text", -1790561697), new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "_", "_", 1453416199), taoensso.encore.now_udt.call(null), new cljs.core.Keyword(null, "client-id", "client-id", -464622140), self__.client_id], null), cljs.core.truth_((new cljs.core.Keyword(null, "open?", "open?", 1238443125)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state_))) ? null : new cljs.core.PersistentArrayMap(null, 
        1, [new cljs.core.Keyword(null, "handshake?", "handshake?", -423743093), true], null))], null)), function(retry_BANG_, chsk__$1) {
          return function ajax_cb(p__22065) {
            var map__22068 = p__22065;
            var map__22068__$1 = cljs.core.seq_QMARK_.call(null, map__22068) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22068) : map__22068;
            var _QMARK_content = cljs.core.get.call(null, map__22068__$1, new cljs.core.Keyword(null, "?content", "?content", 1697782054));
            var _QMARK_error = cljs.core.get.call(null, map__22068__$1, new cljs.core.Keyword(null, "?error", "?error", 1070752222));
            if (cljs.core.truth_(_QMARK_error)) {
              if (cljs.core._EQ_.call(null, _QMARK_error, new cljs.core.Keyword(null, "timeout", "timeout", -318625318))) {
                return async_poll_for_update_BANG_.call(null, 0);
              } else {
                taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), false], null));
                return retry_BANG_.call(null);
              }
            } else {
              var content = _QMARK_content;
              var ppstr = content;
              var vec__22069 = taoensso.sente.unpack.call(null, self__.packer, ppstr);
              var clj = cljs.core.nth.call(null, vec__22069, 0, null);
              var _ = cljs.core.nth.call(null, vec__22069, 1, null);
              var or__3761__auto___22071 = taoensso.sente.handle_when_handshake_BANG_.call(null, chsk__$1, self__.chs, clj);
              if (cljs.core.truth_(or__3761__auto___22071)) {
              } else {
                var buffered_evs_22072 = clj;
                taoensso.sente.receive_buffered_evs_BANG_.call(null, self__.chs, buffered_evs_22072);
                taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1238443125), true], null));
              }
              return async_poll_for_update_BANG_.call(null, 0);
            }
          };
        }(retry_BANG_, chsk__$1)));
      }
    };
  })(chsk__$1).call(null, 0);
  return chsk__$1;
};
taoensso.sente.ChAjaxSocket.cljs$lang$type = true;
taoensso.sente.ChAjaxSocket.cljs$lang$ctorPrSeq = function(this__4393__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "taoensso.sente/ChAjaxSocket");
};
taoensso.sente.ChAjaxSocket.cljs$lang$ctorPrWriter = function(this__4393__auto__, writer__4394__auto__) {
  return cljs.core._write.call(null, writer__4394__auto__, "taoensso.sente/ChAjaxSocket");
};
taoensso.sente.__GT_ChAjaxSocket = function __GT_ChAjaxSocket(client_id, url, chs, timeout_ms, ajax_opts, curr_xhr_, state_, packer) {
  return new taoensso.sente.ChAjaxSocket(client_id, url, chs, timeout_ms, ajax_opts, curr_xhr_, state_, packer);
};
taoensso.sente.map__GT_ChAjaxSocket = function map__GT_ChAjaxSocket(G__22048) {
  return new taoensso.sente.ChAjaxSocket((new cljs.core.Keyword(null, "client-id", "client-id", -464622140)).cljs$core$IFn$_invoke$arity$1(G__22048), (new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(G__22048), (new cljs.core.Keyword(null, "chs", "chs", 376886120)).cljs$core$IFn$_invoke$arity$1(G__22048), (new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406)).cljs$core$IFn$_invoke$arity$1(G__22048), (new cljs.core.Keyword(null, "ajax-opts", "ajax-opts", 
  -518239109)).cljs$core$IFn$_invoke$arity$1(G__22048), (new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", -1318773696)).cljs$core$IFn$_invoke$arity$1(G__22048), (new cljs.core.Keyword(null, "state_", "state_", 957667102)).cljs$core$IFn$_invoke$arity$1(G__22048), (new cljs.core.Keyword(null, "packer", "packer", 66077544)).cljs$core$IFn$_invoke$arity$1(G__22048), null, cljs.core.dissoc.call(null, G__22048, new cljs.core.Keyword(null, "client-id", "client-id", -464622140), new cljs.core.Keyword(null, 
  "url", "url", 276297046), new cljs.core.Keyword(null, "chs", "chs", 376886120), new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), new cljs.core.Keyword(null, "ajax-opts", "ajax-opts", -518239109), new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", -1318773696), new cljs.core.Keyword(null, "state_", "state_", 957667102), new cljs.core.Keyword(null, "packer", "packer", 66077544)));
};
taoensso.sente.default_chsk_url_fn = function default_chsk_url_fn(path, p__22073, websocket_QMARK_) {
  var map__22075 = p__22073;
  var map__22075__$1 = cljs.core.seq_QMARK_.call(null, map__22075) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22075) : map__22075;
  var window_location = map__22075__$1;
  var pathname = cljs.core.get.call(null, map__22075__$1, new cljs.core.Keyword(null, "pathname", "pathname", -1420497528));
  var host = cljs.core.get.call(null, map__22075__$1, new cljs.core.Keyword(null, "host", "host", -1558485167));
  var protocol = cljs.core.get.call(null, map__22075__$1, new cljs.core.Keyword(null, "protocol", "protocol", 652470118));
  return[cljs.core.str(cljs.core.not.call(null, websocket_QMARK_) ? protocol : cljs.core._EQ_.call(null, protocol, "https:") ? "wss:" : "ws:"), cljs.core.str("//"), cljs.core.str(host), cljs.core.str(function() {
    var or__3761__auto__ = path;
    if (cljs.core.truth_(or__3761__auto__)) {
      return or__3761__auto__;
    } else {
      return pathname;
    }
  }())].join("");
};
taoensso.sente.make_channel_socket_BANG_ = function() {
  var make_channel_socket_BANG___delegate = function(path, p__22076) {
    var vec__22081 = p__22076;
    var map__22082 = cljs.core.nth.call(null, vec__22081, 0, null);
    var map__22082__$1 = cljs.core.seq_QMARK_.call(null, map__22082) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22082) : map__22082;
    var opts = map__22082__$1;
    var ajax_opts = cljs.core.get.call(null, map__22082__$1, new cljs.core.Keyword(null, "ajax-opts", "ajax-opts", -518239109));
    var client_id = cljs.core.get.call(null, map__22082__$1, new cljs.core.Keyword(null, "client-id", "client-id", -464622140), function() {
      var or__3761__auto__ = (new cljs.core.Keyword(null, "client-uuid", "client-uuid", -1717531965)).cljs$core$IFn$_invoke$arity$1(opts);
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        return taoensso.encore.uuid_str.call(null);
      }
    }());
    var packer = cljs.core.get.call(null, map__22082__$1, new cljs.core.Keyword(null, "packer", "packer", 66077544), new cljs.core.Keyword(null, "edn", "edn", 1317840885));
    var chsk_url_fn = cljs.core.get.call(null, map__22082__$1, new cljs.core.Keyword(null, "chsk-url-fn", "chsk-url-fn", 1968894294), taoensso.sente.default_chsk_url_fn);
    var lp_timeout_ms = cljs.core.get.call(null, map__22082__$1, new cljs.core.Keyword(null, "lp-timeout-ms", "lp-timeout-ms", -1451963133), 25E3);
    var ws_kalive_ms = cljs.core.get.call(null, map__22082__$1, new cljs.core.Keyword(null, "ws-kalive-ms", "ws-kalive-ms", 1442179968), 25E3);
    var recv_buf_or_n = cljs.core.get.call(null, map__22082__$1, new cljs.core.Keyword(null, "recv-buf-or-n", "recv-buf-or-n", 1363950355), cljs.core.async.sliding_buffer.call(null, 2048));
    var type = cljs.core.get.call(null, map__22082__$1, new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "auto", "auto", -566279492));
    var _deprecated_more_opts = cljs.core.nth.call(null, vec__22081, 1, null);
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.sente", null, new cljs.core.Delay(function(vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts) {
        return function() {
          return type;
        };
      }(vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts), null), new cljs.core.Symbol(null, "type", "type", -1480165421, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "in", "in", -1531184865), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "ws", "ws", 86841443), 
      null, new cljs.core.Keyword(null, "ajax", "ajax", 814345549), null, new cljs.core.Keyword(null, "auto", "auto", -566279492), null], null), null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "in", "in", -1531184865), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "ws", "ws", 86841443), null, new cljs.core.Keyword(null, "ajax", "ajax", 814345549), null, new cljs.core.Keyword(null, 
      "auto", "auto", -566279492), null], null), null)], null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "in", "in", -1531184865), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "ws", "ws", 86841443), null, new cljs.core.Keyword(null, "ajax", "ajax", 814345549), 
      null, new cljs.core.Keyword(null, "auto", "auto", -566279492), null], null), null)], null), new cljs.core.Symbol(null, "type", "type", -1480165421, null))))].join(""));
    }
    if (function() {
      taoensso.encore.hcond.call(null, false, "taoensso.sente", null, new cljs.core.Delay(function(vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts) {
        return function() {
          return client_id;
        };
      }(vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts), null), new cljs.core.Symbol(null, "client-id", "client-id", 1175909387, null), taoensso.encore.nblank_str_QMARK_, new cljs.core.Symbol("enc", "nblank-str?", "enc/nblank-str?", 19952870, null));
      return true;
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "have?", "have?", -1685305646, null), new cljs.core.Symbol("enc", "nblank-str?", "enc/nblank-str?", 19952870, null), new cljs.core.Symbol(null, "client-id", "client-id", 1175909387, null))))].join(""));
    }
    if (!(_deprecated_more_opts == null)) {
      taoensso.encore.warnf.call(null, "`make-channel-socket!` fn signature CHANGED with Sente v0.10.0.");
    } else {
    }
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "lp-timeout", "lp-timeout", 1149461302))) {
      taoensso.encore.warnf.call(null, ":lp-timeout opt has CHANGED; please use :lp-timout-ms.");
    } else {
    }
    var packer__$1 = taoensso.sente.interfaces.coerce_packer.call(null, packer);
    var window_location = taoensso.encore.get_window_location.call(null);
    var private_chs = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "state", "state", -1988618099), cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 10)), new cljs.core.Keyword(null, "internal", "internal", -854870097), cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 10)), new cljs.core.Keyword(null, "\x3cserver", "\x3cserver", -2135373537), cljs.core.async.chan.call(null, recv_buf_or_n)], null);
    var ever_opened_QMARK__ = cljs.core.atom.call(null, false);
    var state_STAR_ = function(packer__$1, window_location, private_chs, ever_opened_QMARK__, vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts) {
      return function(state) {
        if (cljs.core.truth_(function() {
          var or__3761__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "open?", "open?", 1238443125)).cljs$core$IFn$_invoke$arity$1(state));
          if (or__3761__auto__) {
            return or__3761__auto__;
          } else {
            return cljs.core.deref.call(null, ever_opened_QMARK__);
          }
        }())) {
          return state;
        } else {
          cljs.core.reset_BANG_.call(null, ever_opened_QMARK__, true);
          return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "first-open?", "first-open?", 396686530), true);
        }
      };
    }(packer__$1, window_location, private_chs, ever_opened_QMARK__, vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts);
    var public_ch_recv = cljs.core.async.merge.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "internal", "internal", -854870097)).cljs$core$IFn$_invoke$arity$1(private_chs), cljs.core.async.map_LT_.call(null, function(packer__$1, window_location, private_chs, ever_opened_QMARK__, state_STAR_, vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, 
    type, _deprecated_more_opts) {
      return function(state) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("chsk", "state", "chsk/state", -1991397620), state_STAR_.call(null, state)], null);
      };
    }(packer__$1, window_location, private_chs, ever_opened_QMARK__, state_STAR_, vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts), (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(private_chs)), cljs.core.async.map_LT_.call(null, function(packer__$1, window_location, private_chs, ever_opened_QMARK__, state_STAR_, vec__22081, map__22082, map__22082__$1, 
    opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts) {
      return function(ev) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("chsk", "recv", "chsk/recv", 561097091), ev], null);
      };
    }(packer__$1, window_location, private_chs, ever_opened_QMARK__, state_STAR_, vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts), (new cljs.core.Keyword(null, "\x3cserver", "\x3cserver", -2135373537)).cljs$core$IFn$_invoke$arity$1(private_chs))], null));
    var chsk = function() {
      var or__3761__auto__ = function() {
        var and__3749__auto__ = cljs.core.not_EQ_.call(null, type, new cljs.core.Keyword(null, "ajax", "ajax", 814345549));
        if (and__3749__auto__) {
          return taoensso.sente.chsk_init_BANG_.call(null, taoensso.sente.map__GT_ChWebSocket.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "client-id", "client-id", -464622140), new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 210734021), new cljs.core.Keyword(null, "nattempt_", "nattempt_", 1980196552), new cljs.core.Keyword(null, "packer", "packer", 66077544), new cljs.core.Keyword(null, "chs", "chs", 376886120), new cljs.core.Keyword(null, "socket_", "socket_", 
          -361048908), new cljs.core.Keyword(null, "url", "url", 276297046), new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 39438072), new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", -1519029061), new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1558413149), new cljs.core.Keyword(null, "state_", "state_", 957667102)], [client_id, ws_kalive_ms, cljs.core.atom.call(null, 0), packer__$1, private_chs, cljs.core.atom.call(null, null), chsk_url_fn.call(null, path, 
          window_location, new cljs.core.Keyword(null, "ws", "ws", 86841443)), cljs.core.atom.call(null, true), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY), cljs.core.atom.call(null, null), cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "ws", "ws", 86841443), new cljs.core.Keyword(null, "open?", "open?", 1238443125), false, new cljs.core.Keyword(null, "destroyed?", "destroyed?", 
          1049634064), false], null))])));
        } else {
          return and__3749__auto__;
        }
      }();
      if (cljs.core.truth_(or__3761__auto__)) {
        return or__3761__auto__;
      } else {
        var and__3749__auto__ = cljs.core.not_EQ_.call(null, type, new cljs.core.Keyword(null, "ws", "ws", 86841443));
        if (and__3749__auto__) {
          return taoensso.sente.chsk_init_BANG_.call(null, taoensso.sente.map__GT_ChAjaxSocket.call(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "client-id", "client-id", -464622140), client_id, new cljs.core.Keyword(null, "url", "url", 276297046), chsk_url_fn.call(null, path, window_location, cljs.core.not.call(null, new cljs.core.Keyword(null, "ws", "ws", 86841443))), new cljs.core.Keyword(null, "chs", "chs", 376886120), private_chs, new cljs.core.Keyword(null, "packer", 
          "packer", 66077544), packer__$1, new cljs.core.Keyword(null, "timeout-ms", "timeout-ms", 754221406), lp_timeout_ms, new cljs.core.Keyword(null, "ajax-opts", "ajax-opts", -518239109), ajax_opts, new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", -1318773696), cljs.core.atom.call(null, null), new cljs.core.Keyword(null, "state_", "state_", 957667102), cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, 
          "ajax", "ajax", 814345549), new cljs.core.Keyword(null, "open?", "open?", 1238443125), false, new cljs.core.Keyword(null, "destroyed?", "destroyed?", 1049634064), false], null))], null)));
        } else {
          return and__3749__auto__;
        }
      }
    }();
    var _ = cljs.core.truth_(chsk) ? null : function() {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Failed to create channel socket"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "chsk", "chsk", 776828446, null)))].join(""));
    }();
    var send_fn = cljs.core.partial.call(null, taoensso.sente.chsk_send_BANG_, chsk);
    var public_ch_recv__$1 = cljs.core.async.map_LT_.call(null, function(packer__$1, window_location, private_chs, ever_opened_QMARK__, state_STAR_, public_ch_recv, chsk, _, send_fn, vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts) {
      return function ev__GT_ev_msg(ev) {
        var vec__22084 = taoensso.sente.as_event.call(null, ev);
        var ev_id = cljs.core.nth.call(null, vec__22084, 0, null);
        var ev__QMARK_data = cljs.core.nth.call(null, vec__22084, 1, null);
        var ev__$1 = vec__22084;
        return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "ch-recv", "ch-recv", -990916861), public_ch_recv, new cljs.core.Keyword(null, "send-fn", "send-fn", 351002041), send_fn, new cljs.core.Keyword(null, "state", "state", -1988618099), (new cljs.core.Keyword(null, "state_", "state_", 957667102)).cljs$core$IFn$_invoke$arity$1(chsk), new cljs.core.Keyword(null, "event", "event", 301435442), ev__$1, new cljs.core.Keyword(null, "id", "id", -1388402092), ev_id, new cljs.core.Keyword(null, 
        "?data", "?data", -9471433), ev__QMARK_data], null);
      };
    }(packer__$1, window_location, private_chs, ever_opened_QMARK__, state_STAR_, public_ch_recv, chsk, _, send_fn, vec__22081, map__22082, map__22082__$1, opts, ajax_opts, client_id, packer, chsk_url_fn, lp_timeout_ms, ws_kalive_ms, recv_buf_or_n, type, _deprecated_more_opts), public_ch_recv);
    if (cljs.core.truth_(chsk)) {
      return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "chsk", "chsk", -863703081), chsk, new cljs.core.Keyword(null, "ch-recv", "ch-recv", -990916861), public_ch_recv__$1, new cljs.core.Keyword(null, "send-fn", "send-fn", 351002041), send_fn, new cljs.core.Keyword(null, "state", "state", -1988618099), (new cljs.core.Keyword(null, "state_", "state_", 957667102)).cljs$core$IFn$_invoke$arity$1(chsk)], null);
    } else {
      return null;
    }
  };
  var make_channel_socket_BANG_ = function(path, var_args) {
    var p__22076 = null;
    if (arguments.length > 1) {
      p__22076 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return make_channel_socket_BANG___delegate.call(this, path, p__22076);
  };
  make_channel_socket_BANG_.cljs$lang$maxFixedArity = 1;
  make_channel_socket_BANG_.cljs$lang$applyTo = function(arglist__22085) {
    var path = cljs.core.first(arglist__22085);
    var p__22076 = cljs.core.rest(arglist__22085);
    return make_channel_socket_BANG___delegate(path, p__22076);
  };
  make_channel_socket_BANG_.cljs$core$IFn$_invoke$arity$variadic = make_channel_socket_BANG___delegate;
  return make_channel_socket_BANG_;
}();
taoensso.sente.start_chsk_router_BANG_ = function() {
  var start_chsk_router_BANG___delegate = function(ch_recv, event_msg_handler, p__22086) {
    var vec__22188 = p__22086;
    var map__22189 = cljs.core.nth.call(null, vec__22188, 0, null);
    var map__22189__$1 = cljs.core.seq_QMARK_.call(null, map__22189) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22189) : map__22189;
    var opts = map__22189__$1;
    var trace_evs_QMARK_ = cljs.core.get.call(null, map__22189__$1, new cljs.core.Keyword(null, "trace-evs?", "trace-evs?", 1502453512));
    var ch_ctrl = cljs.core.async.chan.call(null);
    var c__6474__auto___22289 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6474__auto___22289, ch_ctrl, vec__22188, map__22189, map__22189__$1, opts, trace_evs_QMARK_) {
      return function() {
        var f__6475__auto__ = function() {
          var switch__6459__auto__ = function(c__6474__auto___22289, ch_ctrl, vec__22188, map__22189, map__22189__$1, opts, trace_evs_QMARK_) {
            return function(state_22248) {
              var state_val_22249 = state_22248[1];
              if (state_val_22249 === 7) {
                var inst_22201 = state_22248[2];
                var inst_22202 = cljs.core.nth.call(null, inst_22201, 0, null);
                var inst_22203 = cljs.core.nth.call(null, inst_22201, 1, null);
                var inst_22204 = taoensso.encore.kw_identical_QMARK_.call(null, inst_22203, ch_ctrl);
                var state_22248__$1 = function() {
                  var statearr_22250 = state_22248;
                  statearr_22250[7] = inst_22202;
                  return statearr_22250;
                }();
                if (cljs.core.truth_(inst_22204)) {
                  var statearr_22251_22290 = state_22248__$1;
                  statearr_22251_22290[1] = 8;
                } else {
                  var statearr_22252_22291 = state_22248__$1;
                  statearr_22252_22291[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_22249 === 20) {
                  var inst_22214 = state_22248[8];
                  var inst_22228 = taoensso.encore.errorf.call(null, "Bad event: %s", inst_22214);
                  var state_22248__$1 = state_22248;
                  var statearr_22253_22292 = state_22248__$1;
                  statearr_22253_22292[2] = inst_22228;
                  statearr_22253_22292[1] = 22;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_22249 === 1) {
                    var state_22248__$1 = state_22248;
                    var statearr_22254_22293 = state_22248__$1;
                    statearr_22254_22293[2] = null;
                    statearr_22254_22293[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_22249 === 24) {
                      var state_22248__$1 = state_22248;
                      var statearr_22255_22294 = state_22248__$1;
                      statearr_22255_22294[2] = null;
                      statearr_22255_22294[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_22249 === 4) {
                        var inst_22238 = state_22248[2];
                        var inst_22239 = taoensso.encore.kw_identical_QMARK_.call(null, new cljs.core.Keyword("taoensso.sente", "stop", "taoensso.sente/stop", -1361782571), inst_22238);
                        var state_22248__$1 = state_22248;
                        if (cljs.core.truth_(inst_22239)) {
                          var statearr_22256_22295 = state_22248__$1;
                          statearr_22256_22295[1] = 23;
                        } else {
                          var statearr_22257_22296 = state_22248__$1;
                          statearr_22257_22296[1] = 24;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_22249 === 15) {
                          var inst_22214 = state_22248[8];
                          var inst_22215 = state_22248[2];
                          var inst_22216 = taoensso.encore.errorf.call(null, "Chsk router handling error (%s): %s", inst_22214, inst_22215);
                          var state_22248__$1 = state_22248;
                          var statearr_22258_22297 = state_22248__$1;
                          statearr_22258_22297[2] = inst_22216;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22248__$1);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_22249 === 21) {
                            var inst_22213 = state_22248[9];
                            var inst_22230 = event_msg_handler.call(null, inst_22213);
                            var state_22248__$1 = state_22248;
                            var statearr_22259_22298 = state_22248__$1;
                            statearr_22259_22298[2] = inst_22230;
                            statearr_22259_22298[1] = 22;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_22249 === 13) {
                              var inst_22213 = state_22248[9];
                              var inst_22213__$1 = state_22248[2];
                              var inst_22214 = cljs.core.get.call(null, inst_22213__$1, new cljs.core.Keyword(null, "event", "event", 301435442));
                              var state_22248__$1 = function() {
                                var statearr_22260 = state_22248;
                                statearr_22260[8] = inst_22214;
                                statearr_22260[9] = inst_22213__$1;
                                return statearr_22260;
                              }();
                              var statearr_22261_22299 = state_22248__$1;
                              statearr_22261_22299[2] = null;
                              statearr_22261_22299[1] = 16;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_22249 === 22) {
                                var inst_22232 = state_22248[2];
                                var state_22248__$1 = function() {
                                  var statearr_22262 = state_22248;
                                  statearr_22262[10] = inst_22232;
                                  return statearr_22262;
                                }();
                                var statearr_22263_22300 = state_22248__$1;
                                statearr_22263_22300[2] = null;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22248__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_22249 === 6) {
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_22248, 5, Error, null, 4);
                                  var inst_22197 = cljs.core.PersistentVector.EMPTY_NODE;
                                  var inst_22198 = [ch_recv, ch_ctrl];
                                  var inst_22199 = new cljs.core.PersistentVector(null, 2, 5, inst_22197, inst_22198, null);
                                  var state_22248__$1 = state_22248;
                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_22248__$1, 7, inst_22199);
                                } else {
                                  if (state_val_22249 === 25) {
                                    var inst_22244 = state_22248[2];
                                    var state_22248__$1 = state_22248;
                                    var statearr_22264_22301 = state_22248__$1;
                                    statearr_22264_22301[2] = inst_22244;
                                    statearr_22264_22301[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_22249 === 17) {
                                      var inst_22214 = state_22248[8];
                                      var inst_22221 = taoensso.encore.tracef.call(null, "Pre-handler event: %s", inst_22214);
                                      var state_22248__$1 = state_22248;
                                      var statearr_22265_22302 = state_22248__$1;
                                      statearr_22265_22302[2] = inst_22221;
                                      statearr_22265_22302[1] = 19;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_22249 === 3) {
                                        var inst_22246 = state_22248[2];
                                        var state_22248__$1 = state_22248;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22248__$1, inst_22246);
                                      } else {
                                        if (state_val_22249 === 12) {
                                          var inst_22202 = state_22248[7];
                                          var state_22248__$1 = state_22248;
                                          var statearr_22266_22303 = state_22248__$1;
                                          statearr_22266_22303[2] = inst_22202;
                                          statearr_22266_22303[1] = 13;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_22249 === 2) {
                                            var state_22248__$1 = state_22248;
                                            var statearr_22267_22304 = state_22248__$1;
                                            statearr_22267_22304[2] = null;
                                            statearr_22267_22304[1] = 6;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_22249 === 23) {
                                              var state_22248__$1 = state_22248;
                                              var statearr_22268_22305 = state_22248__$1;
                                              statearr_22268_22305[2] = null;
                                              statearr_22268_22305[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_22249 === 19) {
                                                var inst_22213 = state_22248[9];
                                                var inst_22224 = state_22248[2];
                                                var inst_22225 = taoensso.sente.event_msg_QMARK_.call(null, inst_22213);
                                                var inst_22226 = !inst_22225;
                                                var state_22248__$1 = function() {
                                                  var statearr_22269 = state_22248;
                                                  statearr_22269[11] = inst_22224;
                                                  return statearr_22269;
                                                }();
                                                if (inst_22226) {
                                                  var statearr_22270_22306 = state_22248__$1;
                                                  statearr_22270_22306[1] = 20;
                                                } else {
                                                  var statearr_22271_22307 = state_22248__$1;
                                                  statearr_22271_22307[1] = 21;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_22249 === 11) {
                                                  var inst_22202 = state_22248[7];
                                                  var inst_22210 = cljs.core.apply.call(null, cljs.core.hash_map, inst_22202);
                                                  var state_22248__$1 = state_22248;
                                                  var statearr_22272_22308 = state_22248__$1;
                                                  statearr_22272_22308[2] = inst_22210;
                                                  statearr_22272_22308[1] = 13;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_22249 === 9) {
                                                    var inst_22202 = state_22248[7];
                                                    var inst_22208 = cljs.core.seq_QMARK_.call(null, inst_22202);
                                                    var state_22248__$1 = state_22248;
                                                    if (inst_22208) {
                                                      var statearr_22273_22309 = state_22248__$1;
                                                      statearr_22273_22309[1] = 11;
                                                    } else {
                                                      var statearr_22274_22310 = state_22248__$1;
                                                      statearr_22274_22310[1] = 12;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_22249 === 5) {
                                                      var inst_22191 = state_22248[2];
                                                      var inst_22192 = taoensso.encore.errorf.call(null, "Chsk router channel error (%s)!", inst_22191);
                                                      var state_22248__$1 = state_22248;
                                                      var statearr_22275_22311 = state_22248__$1;
                                                      statearr_22275_22311[2] = inst_22192;
                                                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22248__$1);
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_22249 === 14) {
                                                        var inst_22234 = state_22248[2];
                                                        var state_22248__$1 = state_22248;
                                                        var statearr_22276_22312 = state_22248__$1;
                                                        statearr_22276_22312[2] = inst_22234;
                                                        statearr_22276_22312[1] = 10;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_22249 === 16) {
                                                          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_22248, 15, Error, null, 14);
                                                          var state_22248__$1 = state_22248;
                                                          if (cljs.core.truth_(trace_evs_QMARK_)) {
                                                            var statearr_22277_22313 = state_22248__$1;
                                                            statearr_22277_22313[1] = 17;
                                                          } else {
                                                            var statearr_22278_22314 = state_22248__$1;
                                                            statearr_22278_22314[1] = 18;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_22249 === 10) {
                                                            var inst_22236 = state_22248[2];
                                                            var state_22248__$1 = state_22248;
                                                            var statearr_22279_22315 = state_22248__$1;
                                                            statearr_22279_22315[2] = inst_22236;
                                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22248__$1);
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_22249 === 18) {
                                                              var state_22248__$1 = state_22248;
                                                              var statearr_22280_22316 = state_22248__$1;
                                                              statearr_22280_22316[2] = null;
                                                              statearr_22280_22316[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_22249 === 8) {
                                                                var state_22248__$1 = state_22248;
                                                                var statearr_22281_22317 = state_22248__$1;
                                                                statearr_22281_22317[2] = new cljs.core.Keyword("taoensso.sente", "stop", "taoensso.sente/stop", -1361782571);
                                                                statearr_22281_22317[1] = 10;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6474__auto___22289, ch_ctrl, vec__22188, map__22189, map__22189__$1, opts, trace_evs_QMARK_);
          return function(switch__6459__auto__, c__6474__auto___22289, ch_ctrl, vec__22188, map__22189, map__22189__$1, opts, trace_evs_QMARK_) {
            return function() {
              var state_machine__6460__auto__ = null;
              var state_machine__6460__auto____0 = function() {
                var statearr_22285 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_22285[0] = state_machine__6460__auto__;
                statearr_22285[1] = 1;
                return statearr_22285;
              };
              var state_machine__6460__auto____1 = function(state_22248) {
                while (true) {
                  var ret_value__6461__auto__ = function() {
                    try {
                      while (true) {
                        var result__6462__auto__ = switch__6459__auto__.call(null, state_22248);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6462__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6462__auto__;
                        }
                        break;
                      }
                    } catch (e22286) {
                      if (e22286 instanceof Object) {
                        var ex__6463__auto__ = e22286;
                        var statearr_22287_22318 = state_22248;
                        statearr_22287_22318[5] = ex__6463__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22248);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e22286;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6461__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__22319 = state_22248;
                    state_22248 = G__22319;
                    continue;
                  } else {
                    return ret_value__6461__auto__;
                  }
                  break;
                }
              };
              state_machine__6460__auto__ = function(state_22248) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6460__auto____0.call(this);
                  case 1:
                    return state_machine__6460__auto____1.call(this, state_22248);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6460__auto____0;
              state_machine__6460__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6460__auto____1;
              return state_machine__6460__auto__;
            }();
          }(switch__6459__auto__, c__6474__auto___22289, ch_ctrl, vec__22188, map__22189, map__22189__$1, opts, trace_evs_QMARK_);
        }();
        var state__6476__auto__ = function() {
          var statearr_22288 = f__6475__auto__.call(null);
          statearr_22288[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6474__auto___22289;
          return statearr_22288;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6476__auto__);
      };
    }(c__6474__auto___22289, ch_ctrl, vec__22188, map__22189, map__22189__$1, opts, trace_evs_QMARK_));
    return function(ch_ctrl, vec__22188, map__22189, map__22189__$1, opts, trace_evs_QMARK_) {
      return function stop_BANG_() {
        return cljs.core.async.close_BANG_.call(null, ch_ctrl);
      };
    }(ch_ctrl, vec__22188, map__22189, map__22189__$1, opts, trace_evs_QMARK_);
  };
  var start_chsk_router_BANG_ = function(ch_recv, event_msg_handler, var_args) {
    var p__22086 = null;
    if (arguments.length > 2) {
      p__22086 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return start_chsk_router_BANG___delegate.call(this, ch_recv, event_msg_handler, p__22086);
  };
  start_chsk_router_BANG_.cljs$lang$maxFixedArity = 2;
  start_chsk_router_BANG_.cljs$lang$applyTo = function(arglist__22320) {
    var ch_recv = cljs.core.first(arglist__22320);
    arglist__22320 = cljs.core.next(arglist__22320);
    var event_msg_handler = cljs.core.first(arglist__22320);
    var p__22086 = cljs.core.rest(arglist__22320);
    return start_chsk_router_BANG___delegate(ch_recv, event_msg_handler, p__22086);
  };
  start_chsk_router_BANG_.cljs$core$IFn$_invoke$arity$variadic = start_chsk_router_BANG___delegate;
  return start_chsk_router_BANG_;
}();
taoensso.sente.start_chsk_router_loop_BANG_ = function start_chsk_router_loop_BANG_(event_handler, ch_recv) {
  return taoensso.sente.start_chsk_router_BANG_.call(null, ch_recv, function(ev_msg) {
    return event_handler.call(null, (new cljs.core.Keyword(null, "event", "event", 301435442)).cljs$core$IFn$_invoke$arity$1(ev_msg), (new cljs.core.Keyword(null, "ch-recv", "ch-recv", -990916861)).cljs$core$IFn$_invoke$arity$1(ev_msg));
  });
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.net.xpc.NixTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.log.error(goog.net.xpc.logger, "Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.log.error(goog.net.xpc.logger, "NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.net.xpc.NixTransport.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet(("area,base,br,col,command," + "embed,hr,img,input,keygen,link,meta,param,source,track,wbr").split(","));
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  var safeStyle = new goog.html.SafeStyle;
  safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return safeStyle;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-.%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.VALUE_RE_ = /^[-.%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"\u202a", RLE:"\u202b", PDF:"\u202c", LRM:"\u200e", RLM:"\u200f"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0, UNKNOWN:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff" + "\u200e\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";
goog.i18n.bidi.rtlChars_ = "\u0591-\u07ff\u200f\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return!goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05f3");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /\d/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  } else {
    url = goog.html.SafeUrl.normalize_(url);
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.normalize_ = function(url) {
  try {
    var normalized = encodeURI(url);
  } catch (e) {
    return goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return normalized.replace(goog.html.SafeUrl.NORMALIZE_MATCHER_, function(match) {
    return goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_[match];
  });
};
goog.html.SafeUrl.NORMALIZE_MATCHER_ = /[()']|%5B|%5D|%25/g;
goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_ = {"'":"%27", "(":"%28", ")":"%29", "%5B":"[", "%5D":"]", "%25":"%"};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet("link", "script", "style");
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toLowerCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (value == null) {
        continue;
      }
      if (value instanceof goog.string.Const) {
        value = goog.string.Const.unwrap(value);
      } else {
        if (name.toLowerCase() == "style") {
          value = goog.html.SafeHtml.getStyleValue_(value);
        } else {
          if (/^on/i.test(name)) {
            throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
                throw Error('Attribute "' + name + '" requires goog.string.Const or goog.html.SafeUrl value, "' + value + '" given.');
              }
            }
          }
        }
      }
      goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
      result += " " + name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
    }
  }
  var content = opt_content;
  if (!goog.isDef(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  var safeHtml = new goog.html.SafeHtml;
  safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  safeHtml.dir_ = dir;
  return safeHtml;
};
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.debug");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.messaging.AbstractChannel.base(this, "constructor");
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.log.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return{callback:callback, objectPayload:objectPayload};
    }
  }
  goog.log.warning(this.logger, 'Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      goog.log.warning(this.logger, "Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.messaging.AbstractChannel.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.net.xpc.FrameElementMethodTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.dom.safe");
goog.require("goog.events");
goog.require("goog.html.SafeHtml");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframeRelayTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement("div");
    goog.dom.safe.setInnerHtml(div, goog.html.SafeHtml.create("iframe", {"onload":goog.string.Const.from("this.xpcOnload()")}));
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement("iframe");
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframeRelayTransport.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.net.xpc.NativeMessagingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.log.info(goog.net.xpc.logger, "NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, msgEvt.getBrowserEvent().origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)) {
      staleChannel.updateChannelNameAndCatalog(channelName);
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2) && protocolVersion == 2) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || this.channel_.isConnected() || this.isDisposed()) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.log.warning(goog.net.xpc.logger, "Peer window had no postMessage function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.log.fine(goog.net.xpc.logger, "send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.log.warning(goog.net.xpc.logger, "Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.net.xpc.NativeMessagingTransport.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dispose");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventType");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.ChannelStates");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.DirectTransport");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.net.xpc.UriCfgFields");
goog.require("goog.string");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.net.xpc.CrossPageChannel.base(this, "constructor");
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  if (!goog.events.getListener(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_)) {
    goog.events.listenOnce(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_);
  }
  goog.log.info(goog.net.xpc.logger, "CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return!!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  var CfgFields = goog.net.xpc.CfgFields;
  if (!this.cfg_[CfgFields.TRANSPORT]) {
    this.cfg_[CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.DIRECT:
      if (this.peerWindowObject_ && goog.net.xpc.DirectTransport.isSupported((this.peerWindowObject_))) {
        this.transport_ = new goog.net.xpc.DirectTransport(this, this.domHelper_);
      } else {
        goog.log.info(goog.net.xpc.logger, "DirectTransport not supported for this window, peer window in" + " different security context or not set yet.");
      }
      break;
  }
  if (this.transport_) {
    goog.log.info(goog.net.xpc.logger, "Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.log.info(goog.net.xpc.logger, "createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement("IFRAME");
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnceWithScope(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
  }
  return(iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.log.info(goog.net.xpc.logger, "continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (goog.isDef(opt_delay)) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected_ = goog.net.xpc.CrossPageChannel.prototype.notifyConnected;
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.log.info(goog.net.xpc.logger, "Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.log.error(goog.net.xpc.logger, "Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.log.error(goog.net.xpc.logger, "Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.log.warning(goog.net.xpc.logger, 'Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed()) {
    goog.log.warning(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Disposed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.log.info(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (goog.isNumber(role)) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog = function(name) {
  goog.log.fine(goog.net.xpc.logger, "changing channel name to " + name);
  delete goog.net.xpc.channels[this.name];
  this.name = name;
  goog.net.xpc.channels[name] = this;
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptySafe(opt_origin) || goog.string.isEmptySafe(peerHostname) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.net.xpc.CrossPageChannel.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events.EventType");
goog.require("goog.events.EventTarget");
goog.require("goog.events");
goog.require("goog.events");
clojure.browser.event.IEventType = function() {
  var obj17489 = {};
  return obj17489;
}();
clojure.browser.event.event_types = function event_types(this$) {
  if (function() {
    var and__3749__auto__ = this$;
    if (and__3749__auto__) {
      return this$.clojure$browser$event$IEventType$event_types$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return this$.clojure$browser$event$IEventType$event_types$arity$1(this$);
  } else {
    var x__4400__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3761__auto__ = clojure.browser.event.event_types[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = clojure.browser.event.event_types["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEventType.event-types", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__17490) {
      var vec__17491 = p__17490;
      var k = cljs.core.nth.call(null, vec__17491, 0, null);
      var v = cljs.core.nth.call(null, vec__17491, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
if (typeof Element !== "undefined") {
  Element.prototype.clojure$browser$event$IEventType$ = true;
  Element.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
    var this$__$1 = this;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
      return function(p__17492) {
        var vec__17493 = p__17492;
        var k = cljs.core.nth.call(null, vec__17493, 0, null);
        var v = cljs.core.nth.call(null, vec__17493, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
      };
    }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
  };
} else {
}
clojure.browser.event.listen = function() {
  var listen = null;
  var listen__3 = function(src, type, fn) {
    return listen.call(null, src, type, fn, false);
  };
  var listen__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen__3.call(this, src, type, fn);
      case 4:
        return listen__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen.cljs$core$IFn$_invoke$arity$3 = listen__3;
  listen.cljs$core$IFn$_invoke$arity$4 = listen__4;
  return listen;
}();
clojure.browser.event.listen_once = function() {
  var listen_once = null;
  var listen_once__3 = function(src, type, fn) {
    return listen_once.call(null, src, type, fn, false);
  };
  var listen_once__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  listen_once = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return listen_once__3.call(this, src, type, fn);
      case 4:
        return listen_once__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once.cljs$core$IFn$_invoke$arity$3 = listen_once__3;
  listen_once.cljs$core$IFn$_invoke$arity$4 = listen_once__4;
  return listen_once;
}();
clojure.browser.event.unlisten = function() {
  var unlisten = null;
  var unlisten__3 = function(src, type, fn) {
    return unlisten.call(null, src, type, fn, false);
  };
  var unlisten__4 = function(src, type, fn, capture_QMARK_) {
    return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
  };
  unlisten = function(src, type, fn, capture_QMARK_) {
    switch(arguments.length) {
      case 3:
        return unlisten__3.call(this, src, type, fn);
      case 4:
        return unlisten__4.call(this, src, type, fn, capture_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten.cljs$core$IFn$_invoke$arity$3 = unlisten__3;
  unlisten.cljs$core$IFn$_invoke$arity$4 = unlisten__4;
  return unlisten;
}();
clojure.browser.event.unlisten_by_key = function unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.json");
goog.require("goog.json");
goog.require("clojure.browser.event");
goog.require("clojure.browser.event");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__17494) {
  var vec__17495 = p__17494;
  var k = cljs.core.nth.call(null, vec__17495, 0, null);
  var v = cljs.core.nth.call(null, vec__17495, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
  var obj17497 = {};
  return obj17497;
}();
clojure.browser.net.connect = function() {
  var connect = null;
  var connect__1 = function(this$) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$1;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.connect[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var connect__2 = function(this$, opt1) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$2;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.connect[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1);
    }
  };
  var connect__3 = function(this$, opt1, opt2) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$3;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.connect[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2);
    }
  };
  var connect__4 = function(this$, opt1, opt2, opt3) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$IConnection$connect$arity$4;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.connect[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.connect["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
          }
        }
      }().call(null, this$, opt1, opt2, opt3);
    }
  };
  connect = function(this$, opt1, opt2, opt3) {
    switch(arguments.length) {
      case 1:
        return connect__1.call(this, this$);
      case 2:
        return connect__2.call(this, this$, opt1);
      case 3:
        return connect__3.call(this, this$, opt1, opt2);
      case 4:
        return connect__4.call(this, this$, opt1, opt2, opt3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  connect.cljs$core$IFn$_invoke$arity$1 = connect__1;
  connect.cljs$core$IFn$_invoke$arity$2 = connect__2;
  connect.cljs$core$IFn$_invoke$arity$3 = connect__3;
  connect.cljs$core$IFn$_invoke$arity$4 = connect__4;
  return connect;
}();
clojure.browser.net.transmit = function() {
  var transmit = null;
  var transmit__2 = function(this$, opt) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$2;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt);
    }
  };
  var transmit__3 = function(this$, opt, opt2) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$3;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2);
    }
  };
  var transmit__4 = function(this$, opt, opt2, opt3) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$4;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3);
    }
  };
  var transmit__5 = function(this$, opt, opt2, opt3, opt4) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$5;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4);
    }
  };
  var transmit__6 = function(this$, opt, opt2, opt3, opt4, opt5) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$IConnection$transmit$arity$6;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.transmit["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
          }
        }
      }().call(null, this$, opt, opt2, opt3, opt4, opt5);
    }
  };
  transmit = function(this$, opt, opt2, opt3, opt4, opt5) {
    switch(arguments.length) {
      case 2:
        return transmit__2.call(this, this$, opt);
      case 3:
        return transmit__3.call(this, this$, opt, opt2);
      case 4:
        return transmit__4.call(this, this$, opt, opt2, opt3);
      case 5:
        return transmit__5.call(this, this$, opt, opt2, opt3, opt4);
      case 6:
        return transmit__6.call(this, this$, opt, opt2, opt3, opt4, opt5);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transmit.cljs$core$IFn$_invoke$arity$2 = transmit__2;
  transmit.cljs$core$IFn$_invoke$arity$3 = transmit__3;
  transmit.cljs$core$IFn$_invoke$arity$4 = transmit__4;
  transmit.cljs$core$IFn$_invoke$arity$5 = transmit__5;
  transmit.cljs$core$IFn$_invoke$arity$6 = transmit__6;
  return transmit;
}();
clojure.browser.net.close = function close(this$) {
  if (function() {
    var and__3749__auto__ = this$;
    if (and__3749__auto__) {
      return this$.clojure$browser$net$IConnection$close$arity$1;
    } else {
      return and__3749__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__4400__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3761__auto__ = clojure.browser.net.close[goog.typeOf(x__4400__auto__)];
      if (or__3761__auto__) {
        return or__3761__auto__;
      } else {
        var or__3761__auto____$1 = clojure.browser.net.close["_"];
        if (or__3761__auto____$1) {
          return or__3761__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__17498) {
      var vec__17499 = p__17498;
      var k = cljs.core.nth.call(null, vec__17499, 0, null);
      var v = cljs.core.nth.call(null, vec__17499, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__17500) {
  var vec__17501 = p__17500;
  var k = cljs.core.nth.call(null, vec__17501, 0, null);
  var v = cljs.core.nth.call(null, vec__17501, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
  var obj17503 = {};
  return obj17503;
}();
clojure.browser.net.register_service = function() {
  var register_service = null;
  var register_service__3 = function(this$, service_name, fn) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn);
    }
  };
  var register_service__4 = function(this$, service_name, fn, encode_json_QMARK_) {
    if (function() {
      var and__3749__auto__ = this$;
      if (and__3749__auto__) {
        return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4;
      } else {
        return and__3749__auto__;
      }
    }()) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
    } else {
      var x__4400__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3761__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4400__auto__)];
        if (or__3761__auto__) {
          return or__3761__auto__;
        } else {
          var or__3761__auto____$1 = clojure.browser.net.register_service["_"];
          if (or__3761__auto____$1) {
            return or__3761__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
          }
        }
      }().call(null, this$, service_name, fn, encode_json_QMARK_);
    }
  };
  register_service = function(this$, service_name, fn, encode_json_QMARK_) {
    switch(arguments.length) {
      case 3:
        return register_service__3.call(this, this$, service_name, fn);
      case 4:
        return register_service__4.call(this, this$, service_name, fn, encode_json_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  register_service.cljs$core$IFn$_invoke$arity$3 = register_service__3;
  register_service.cljs$core$IFn$_invoke$arity$4 = register_service__4;
  return register_service;
}();
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close();
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
clojure.browser.net.xpc_connection = function() {
  var xpc_connection = null;
  var xpc_connection__0 = function() {
    var temp__4126__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
    if (cljs.core.truth_(temp__4126__auto__)) {
      var config = temp__4126__auto__;
      return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
    } else {
      return null;
    }
  };
  var xpc_connection__1 = function(config) {
    return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__17509) {
      var vec__17510 = p__17509;
      var k = cljs.core.nth.call(null, vec__17510, 0, null);
      var v = cljs.core.nth.call(null, vec__17510, 1, null);
      var temp__4124__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var field = temp__4124__auto__;
        var G__17511 = sum;
        G__17511[field] = v;
        return G__17511;
      } else {
        return sum;
      }
    }, function() {
      var obj17513 = {};
      return obj17513;
    }(), config));
  };
  xpc_connection = function(config) {
    switch(arguments.length) {
      case 0:
        return xpc_connection__0.call(this);
      case 1:
        return xpc_connection__1.call(this, config);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpc_connection.cljs$core$IFn$_invoke$arity$0 = xpc_connection__0;
  xpc_connection.cljs$core$IFn$_invoke$arity$1 = xpc_connection__1;
  return xpc_connection;
}();
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("clojure.browser.event");
goog.require("clojure.browser.event");
goog.require("clojure.browser.net");
goog.require("clojure.browser.net");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.repl_print = function repl_print(data) {
  var temp__4124__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var conn = temp__4124__auto__;
    return clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), cljs.core.pr_str.call(null, data));
  } else {
    return null;
  }
};
clojure.browser.repl.evaluate_javascript = function evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(eval(block))].join("")], null);
    } catch (e17487) {
      var e = e17487;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "value", "value", 305978217), cljs.core.pr_str.call(null, e), new cljs.core.Keyword(null, "stacktrace", "stacktrace", -95588394), cljs.core.truth_(e.hasOwnProperty("stack")) ? e.stack : "No stacktrace available."], null);
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function() {
  var send_print = null;
  var send_print__2 = function(url, data) {
    return send_print.call(null, url, data, 0);
  };
  var send_print__3 = function(url, data, n) {
    var conn = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", -978969032), function(conn) {
      return function(_) {
        if (n < 10) {
          return send_print.call(null, url, data, n + 1);
        } else {
          return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
        }
      };
    }(conn));
    return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
  };
  send_print = function(url, data, n) {
    switch(arguments.length) {
      case 2:
        return send_print__2.call(this, url, data);
      case 3:
        return send_print__3.call(this, url, data, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  send_print.cljs$core$IFn$_invoke$arity$2 = send_print__2;
  send_print.cljs$core$IFn$_invoke$arity$3 = send_print__3;
  return send_print;
}();
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), t, new cljs.core.Keyword(null, "content", "content", 15833224), data, new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function start_evaluator(url) {
  var temp__4124__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var repl_connection = temp__4124__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 1890645906), function(connection, repl_connection, temp__4124__auto__) {
      return function(e) {
        return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
      };
    }(connection, repl_connection, temp__4124__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), function(connection, repl_connection, temp__4124__auto__) {
      return function(data) {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 1415092211), data));
      };
    }(connection, repl_connection, temp__4124__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1299562414), function(connection, repl_connection, temp__4124__auto__) {
      return function(data) {
        return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1299562414), data));
      };
    }(connection, repl_connection, temp__4124__auto__));
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function(connection, repl_connection, temp__4124__auto__) {
      return function() {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1086465795), "ready"));
      };
    }(connection, repl_connection, temp__4124__auto__), 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.connect = function connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 910305997), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), function(repl_connection) {
    return function(js) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
    };
  }(repl_connection));
  return clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(repl_connection) {
    return function(iframe) {
      return iframe.style.display = "none";
    };
  }(repl_connection));
};
goog.provide("logging_dashboard.connect");
goog.require("cljs.core");
goog.require("clojure.browser.repl");
goog.require("clojure.browser.repl");
clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
goog.provide("logging_dashboard.server");
goog.require("cljs.core");
goog.require("taoensso.sente");
goog.require("logging_dashboard.routes");
goog.require("taoensso.encore");
goog.require("cljs.core.async");
goog.require("taoensso.sente");
goog.require("taoensso.sente");
goog.require("logging_dashboard.routes");
goog.require("logging_dashboard.routes");
goog.require("taoensso.encore");
goog.require("taoensso.encore");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
var rand_chsk_type_17448 = cljs.core.rand.call(null) >= .5 ? new cljs.core.Keyword(null, "ajax", "ajax", 814345549) : new cljs.core.Keyword(null, "auto", "auto", -566279492);
var map__17447_17449 = taoensso.sente.make_channel_socket_BANG_.call(null, "/chsk", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), rand_chsk_type_17448], null));
var map__17447_17450__$1 = cljs.core.seq_QMARK_.call(null, map__17447_17449) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17447_17449) : map__17447_17449;
var state_17451 = cljs.core.get.call(null, map__17447_17450__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
var send_fn_17452 = cljs.core.get.call(null, map__17447_17450__$1, new cljs.core.Keyword(null, "send-fn", "send-fn", 351002041));
var ch_recv_17453 = cljs.core.get.call(null, map__17447_17450__$1, new cljs.core.Keyword(null, "ch-recv", "ch-recv", -990916861));
var chsk_17454 = cljs.core.get.call(null, map__17447_17450__$1, new cljs.core.Keyword(null, "chsk", "chsk", -863703081));
logging_dashboard.server.chsk = chsk_17454;
logging_dashboard.server.ch_chsk = ch_recv_17453;
logging_dashboard.server.chsk_send_BANG_ = send_fn_17452;
logging_dashboard.server.chsk_state = state_17451;
logging_dashboard.server.event_msg_handler = function() {
  var method_table__4653__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4654__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4655__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4656__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4657__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn(cljs.core.symbol.call(null, "logging-dashboard.server", "event-msg-handler"), new cljs.core.Keyword(null, "id", "id", -1388402092), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__4657__auto__, method_table__4653__auto__, prefer_table__4654__auto__, method_cache__4655__auto__, cached_hierarchy__4656__auto__);
}();
logging_dashboard.server.event_msg_handler_STAR_ = function event_msg_handler_STAR_(p__17455) {
  var map__17457 = p__17455;
  var map__17457__$1 = cljs.core.seq_QMARK_.call(null, map__17457) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17457) : map__17457;
  var ev_msg = map__17457__$1;
  var event = cljs.core.get.call(null, map__17457__$1, new cljs.core.Keyword(null, "event", "event", 301435442));
  var _QMARK_data = cljs.core.get.call(null, map__17457__$1, new cljs.core.Keyword(null, "?data", "?data", -9471433));
  var id = cljs.core.get.call(null, map__17457__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  taoensso.encore.debugf.call(null, "Event: %s", event);
  return logging_dashboard.server.event_msg_handler.call(null, ev_msg);
};
cljs.core._add_method.call(null, logging_dashboard.server.event_msg_handler, new cljs.core.Keyword(null, "default", "default", -1987822328), function(p__17458) {
  var map__17459 = p__17458;
  var map__17459__$1 = cljs.core.seq_QMARK_.call(null, map__17459) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17459) : map__17459;
  var ev_msg = map__17459__$1;
  var event = cljs.core.get.call(null, map__17459__$1, new cljs.core.Keyword(null, "event", "event", 301435442));
  return taoensso.encore.debugf.call(null, "Unhandled event: %s", event);
});
cljs.core._add_method.call(null, logging_dashboard.server.event_msg_handler, new cljs.core.Keyword("some", "broadcast", "some/broadcast", 1765715220), function(p__17460) {
  var map__17461 = p__17460;
  var map__17461__$1 = cljs.core.seq_QMARK_.call(null, map__17461) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17461) : map__17461;
  var ev_msg = map__17461__$1;
  var _QMARK_data = cljs.core.get.call(null, map__17461__$1, new cljs.core.Keyword(null, "?data", "?data", -9471433));
  return taoensso.encore.debugf.call(null, "Broadcast: %s", _QMARK_data);
});
var temp__4126__auto___17462 = document.getElementById("btn1");
if (cljs.core.truth_(temp__4126__auto___17462)) {
  var target_el_17463 = temp__4126__auto___17462;
  target_el_17463.addEventListener("click", function(target_el_17463, temp__4126__auto___17462) {
    return function(ev) {
      taoensso.encore.debugf.call(null, "Triggering event");
      return logging_dashboard.server.chsk_send_BANG_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("test", "echo", "test/echo", 1458372903), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "message", "message", -406056002), "1234"], null)], null), 1E4, function(target_el_17463, temp__4126__auto___17462) {
        return function(cb_reply) {
          return taoensso.encore.debugf.call(null, "Reply - %s", cb_reply);
        };
      }(target_el_17463, temp__4126__auto___17462));
    };
  }(target_el_17463, temp__4126__auto___17462));
} else {
}
logging_dashboard.server.router_ = cljs.core.atom.call(null, null);
logging_dashboard.server.stop_server_router_BANG_ = function stop_server_router_BANG_() {
  var temp__4126__auto__ = cljs.core.deref.call(null, logging_dashboard.server.router_);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var stop_f = temp__4126__auto__;
    return stop_f.call(null);
  } else {
    return null;
  }
};
logging_dashboard.server.start_server_router_BANG_ = function start_server_router_BANG_() {
  logging_dashboard.server.stop_server_router_BANG_.call(null);
  return cljs.core.reset_BANG_.call(null, logging_dashboard.server.router_, taoensso.sente.start_chsk_router_BANG_.call(null, logging_dashboard.server.ch_chsk, logging_dashboard.server.event_msg_handler_STAR_));
};
goog.provide("logging_dashboard.main");
goog.require("cljs.core");
goog.require("logging_dashboard.server");
goog.require("logging_dashboard.routes");
goog.require("taoensso.encore");
goog.require("logging_dashboard.server");
goog.require("logging_dashboard.server");
goog.require("logging_dashboard.routes");
goog.require("logging_dashboard.routes");
goog.require("taoensso.encore");
goog.require("taoensso.encore");
taoensso.encore.debugf.call(null, "ClojureScript loaded correctly.");
logging_dashboard.main.start_BANG_ = function start_BANG_() {
  logging_dashboard.server.start_server_router_BANG_.call(null);
  logging_dashboard.routes.init.call(null);
  return taoensso.encore.debugf.call(null, "Started App.");
};
logging_dashboard.main.start_BANG_.call(null);

//# sourceMappingURL=logging-dashboard.js.map